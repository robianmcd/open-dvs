{"version":3,"file":"app.js","sources":["../src/services/workerUtil.ts","../src/services/audio/waveformUtil.service.ts","../src/services/activeSong.ts","../src/services/audio/audioUtil.service.ts","../src/services/db/migrations/dbMigration1.ts","../src/services/db/migrations/dbMigration20.ts","../src/services/db/migrations/dbMigration21.ts","../src/services/db/db.service.ts","../src/services/db/preferences.ts","../src/services/db/preferencesDb.service.ts","../src/app/sideNav/audioSettings/audioSettings.service.ts","../src/services/audio/dspUtil.service.ts","../src/services/audio/resampler.service.ts","../src/services/audioOutput.service.ts","../src/services/activeSongs.service.ts","../src/services/animationFrames.service.ts","../src/pipes/formatTime.pipe.ts","../src/models/song.ts","../src/services/imageUtil.service.ts","../src/services/db/songDb.service.ts","../src/app/deck/deck.component.ts","../src/services/sidenav.service.ts","../src/services/midi/midiUtil.service.ts","../src/app/app.component.ts","../src/app/library/library.component.ts","../src/app/library/fileDrop.directive.ts","../src/services/midi/midiIo.service.ts","../src/services/documentEvents.service.ts","../src/services/midi/midiMapper.service.ts","../src/app/toolbar/toolbar.component.ts","../src/app/spinner/spinner.component.ts","../src/app/centerControls/centerControls.component.ts","../src/app/centerControls/crossfader/crossfader.component.ts","../src/app/sideNav/sideNav.component.ts","../src/app/sideNav/audioSettings/audioSettings.component.ts","../src/app/sideNav/midiSettings.component.ts","../src/app/midiMapping/midiMapping.component.ts","../src/app/library/fixedTableHeaderContainer.directive.ts","../src/app/sideNav/audioSettings/deckAudioSettings.component.ts","../src/app/fader/fader.component.ts","../src/app/loadingOverlay/loadingOverlay.component.ts","../src/app/app.module.ts","../src/main.dev.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {BehaviorSubject, Observable} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class WorkerUtil {\r\n\r\n    workersByType = {\r\n        [WorkerType.Waveform]: new Worker('webWorkers/waveformWorker.js'),\r\n        [WorkerType.Image]: new Worker('webWorkers/imageWorker.js')\r\n    };\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    run({workerType, method, params, transferObjs=[]}: {workerType: WorkerType, method: string, params: any[], transferObjs?: any[]}) {\r\n        let worker = this.workersByType[workerType];\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let msgId = Math.random();\r\n            worker.postMessage({method, params, msgId}, transferObjs);\r\n\r\n            let handler = (e) => {\r\n                if(e.data.msgId === msgId) {\r\n                    worker.removeEventListener('message', handler);\r\n                    if(e.data.error) {\r\n                        reject(e.data.error);\r\n                    } else {\r\n                        resolve(e.data.result);\r\n                    }\r\n                }\r\n            };\r\n            worker.addEventListener('message', handler, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport enum WorkerType {Image, Waveform}","import {ThemeId} from \"../../app/app.component\";\r\nimport {WorkerType, WorkerUtil} from '../workerUtil';\r\nimport {Injectable} from '@angular/core';\r\n\r\n@Injectable()\r\nexport class WaveformUtil {\r\n    constructor(private workerUtil: WorkerUtil) {\r\n\r\n    }\r\n\r\n    //Give the waveform a bit of a boost to make up for what gets lost from taking averages.\r\n    WAVEFORM_BOOST = 1.4;\r\n\r\n    //Side effect: Clears the data from the buffer.\r\n    getWaveformData(buffer: AudioBuffer) {\r\n        let samples = buffer.getChannelData(0);\r\n\r\n        return this.workerUtil.run({\r\n            workerType: WorkerType.Waveform,\r\n            method: 'getWaveformData',\r\n            params: [samples.buffer],\r\n            transferObjs: [samples.buffer]\r\n        });\r\n    }\r\n\r\n    projectWaveform(samples: number[], sampleRate: number, outputSize: number, startTime: number = undefined, endTime: number = undefined): number[] {\r\n        let outputSamples = [];\r\n\r\n        if (startTime === undefined) {\r\n            startTime = 0;\r\n        }\r\n\r\n        if (endTime === undefined) {\r\n            endTime = samples.length / sampleRate;\r\n        }\r\n\r\n        //Tiny variations in the output length caused by the limitations of floating point percision cause the waveform\r\n        //to jitter so desiredOutputLength is rounded to 5 decimal places.\r\n        let desiredOutputLength = Math.round((endTime - startTime) * 100000) / 100000;\r\n        let samplesPerPixel = (desiredOutputLength * sampleRate) / outputSize;\r\n        let timePerPixel = samplesPerPixel / sampleRate;\r\n\r\n        let pixelOffset = Math.round(startTime / timePerPixel);\r\n\r\n        for (let col = 0; col < outputSize; col++) {\r\n            if (pixelOffset < 0 && col + pixelOffset < 0) {\r\n                outputSamples.push(0);\r\n                continue;\r\n            }\r\n\r\n            let firstSampleInBucketIndex = Math.floor((pixelOffset + col) * samplesPerPixel);\r\n            let lastSampleInBucketIndex = Math.floor((pixelOffset + col + 1) * samplesPerPixel);\r\n\r\n            //Make sure the samples for the current column are not outside of the samples array\r\n            firstSampleInBucketIndex = Math.min(firstSampleInBucketIndex, samples.length);\r\n            lastSampleInBucketIndex = Math.min(lastSampleInBucketIndex, samples.length);\r\n\r\n            let sum = 0;\r\n            for (let sampleI = firstSampleInBucketIndex; sampleI < lastSampleInBucketIndex; sampleI++) {\r\n                sum += samples[sampleI];\r\n            }\r\n\r\n            let mean: number;\r\n            if (lastSampleInBucketIndex - firstSampleInBucketIndex === 0) {\r\n                mean = 0;\r\n            } else {\r\n                mean = sum / (lastSampleInBucketIndex - firstSampleInBucketIndex);\r\n            }\r\n            mean = Math.min(1, mean * this.WAVEFORM_BOOST);\r\n            outputSamples.push(mean);\r\n        }\r\n\r\n        return outputSamples;\r\n    }\r\n\r\n    drawWaveform({canvas, themeId, positiveSamples, negativeSamples, firstColorPixel, useGradient = true, drawFromX = 0, drawToX}: DrawWaveformOptions) {\r\n        if (drawToX === undefined) {\r\n            drawToX = canvas.width;\r\n        }\r\n\r\n        let mainColor;\r\n        let highlightColor;\r\n        switch (themeId) {\r\n            case ThemeId.DECK1:\r\n                mainColor = '#632B9B';\r\n                highlightColor = '#9b49f2';\r\n                break;\r\n            case ThemeId.DECK2:\r\n                mainColor = '#165eaa';\r\n                highlightColor = '#219bff';\r\n                break;\r\n            case ThemeId.DEFAULT:\r\n                mainColor = '#5b5b5b';\r\n                highlightColor = '#a6a6a6';\r\n                break;\r\n        }\r\n        let showPositive = !!positiveSamples;\r\n        let showNegative = !!negativeSamples;\r\n        let showBoth = showPositive && showNegative;\r\n\r\n        let positiveWaveform = positiveSamples;\r\n        let negativeWaveform = negativeSamples;\r\n\r\n        let numSamples = positiveWaveform ? positiveWaveform.length : negativeWaveform.length;\r\n\r\n        let canvasCtx = canvas.getContext('2d');\r\n\r\n        canvasCtx.clearRect(drawFromX-1, 0, drawToX-drawFromX, canvas.height);\r\n\r\n        for (let col = Math.max(drawFromX, 0); col < Math.min(drawToX, numSamples); col++) {\r\n            let topY;\r\n            let bottomY;\r\n            let startY;\r\n            let halfWaveformHeight;\r\n            if (showBoth) {\r\n                topY = (1 - positiveWaveform[col]) / 2 * canvas.height;\r\n                bottomY = (1 - negativeWaveform[col]) / 2 * canvas.height;\r\n                startY = canvas.height / 2;\r\n                halfWaveformHeight = canvas.height / 2;\r\n            } else if (showPositive) {\r\n                topY = (1 - positiveWaveform[col]) * canvas.height;\r\n                startY = canvas.height;\r\n                halfWaveformHeight = canvas.height;\r\n            } else {\r\n                //This is a bit of a hack. Right now if showNegative is true all the values are actually positive.\r\n                //This is why the equation isn't (1 - negativeMean) * canvas.height\r\n                //Should find a better way of handling this\r\n                bottomY = negativeWaveform[col] * canvas.height;\r\n                startY = 0;\r\n                halfWaveformHeight = canvas.height;\r\n            }\r\n\r\n            let curPixedMainColor = mainColor;\r\n            let curPixelHighlightColor = highlightColor;\r\n\r\n            if (firstColorPixel !== undefined && firstColorPixel > col) {\r\n                curPixedMainColor = '#5b5b5b';\r\n                curPixelHighlightColor = '#a6a6a6';\r\n            }\r\n\r\n            if (showPositive) {\r\n                canvasCtx.beginPath();\r\n                canvasCtx.moveTo(col, startY);\r\n                canvasCtx.lineTo(col, topY);\r\n\r\n                if (useGradient) {\r\n                    let gradient = canvasCtx.createLinearGradient(col, topY + halfWaveformHeight, col, topY + (halfWaveformHeight - topY) / 3);\r\n                    gradient.addColorStop(0, curPixelHighlightColor);\r\n                    gradient.addColorStop(1, curPixedMainColor);\r\n                    canvasCtx.strokeStyle = gradient;\r\n                } else {\r\n                    canvasCtx.strokeStyle = mainColor;\r\n                }\r\n\r\n                canvasCtx.stroke();\r\n            }\r\n\r\n            if (showNegative) {\r\n                canvasCtx.beginPath();\r\n                canvasCtx.moveTo(col, startY);\r\n                canvasCtx.lineTo(col, bottomY);\r\n\r\n                if (useGradient) {\r\n                    let gradient = canvasCtx.createLinearGradient(col, bottomY - halfWaveformHeight, col, bottomY - (bottomY - halfWaveformHeight) / 3);\r\n                    gradient.addColorStop(0, curPixelHighlightColor);\r\n                    gradient.addColorStop(1, curPixedMainColor);\r\n                    canvasCtx.strokeStyle = gradient;\r\n                }\r\n                else {\r\n                    canvasCtx.strokeStyle = mainColor;\r\n                }\r\n\r\n                canvasCtx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    generateDataUrlWaveform(positiveSamples: number[], negativeSamples: number[], sampleRate: number, width: number, height: number, themeId: ThemeId, cues: number[], startTime: number, duration: number) {\r\n        let canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        let projectedPositiveSamples = this.projectWaveform(positiveSamples, sampleRate, width);\r\n        let projectedNegativeSamples = this.projectWaveform(negativeSamples, sampleRate, width);\r\n\r\n        this.drawWaveform({\r\n            canvas,\r\n            positiveSamples: projectedPositiveSamples,\r\n            negativeSamples: projectedNegativeSamples,\r\n            themeId\r\n        });\r\n        this.overlayCues(canvas, cues, startTime, duration);\r\n\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    overlayCues(canvas: HTMLCanvasElement, cues: number[], startTime: number, duration: number, labelAtTop: boolean = true) {\r\n        cues.forEach((cueTime, index) => {\r\n            if (cueTime >= startTime && cueTime <= startTime + duration) {\r\n                let cueX = (cueTime - startTime) / duration * canvas.width;\r\n\r\n                let canvasCtx = canvas.getContext('2d');\r\n\r\n                canvasCtx.fillStyle = 'white';\r\n                canvasCtx.fillRect(cueX, 0, 0.5, canvas.height);\r\n\r\n                let textBottom = labelAtTop ? 10 : canvas.height - 4;\r\n                let textTop = textBottom - 10;\r\n\r\n                let lastStrokeStyle = canvasCtx.strokeStyle;\r\n                canvasCtx.strokeStyle = 'white';\r\n\r\n                canvasCtx.clearRect(cueX - 14, textTop, 14, 14);\r\n                canvasCtx.strokeRect(cueX - 14, textTop, 14, 14);\r\n\r\n                canvasCtx.strokeStyle = lastStrokeStyle;\r\n\r\n                canvasCtx.strokeText((index + 1).toString(), cueX - 10, textBottom);\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport interface DrawWaveformOptions {\r\n    canvas: HTMLCanvasElement,\r\n    themeId: ThemeId,\r\n    positiveSamples?: number[],\r\n    negativeSamples?: number[],\r\n    firstColorPixel?: number,\r\n    useGradient?: boolean,\r\n    drawFromX?: number,\r\n    drawToX?: number\r\n}","import {Song} from \"../models/song\";\r\nimport {AudioUtil} from \"./audio/audioUtil.service\";\r\nimport {DeckId} from \"../app/app.component\";\r\nimport {ReplaySubject, Observable} from \"rxjs\";\r\nimport {DeckAudioSettings} from \"../app/sideNav/audioSettings/audioSettings.service\";\r\nimport {DspUtil} from \"./audio/dspUtil.service\";\r\nimport {Resampler} from \"./audio/resampler.service\";\r\nimport {AudioOutput} from \"./audioOutput.service\";\r\n\r\nexport class ActiveSong {\r\n    public song: Song;\r\n\r\n    private song$ = new ReplaySubject<Song>();\r\n    private source: AudioBufferSourceNode;\r\n    private buffer: AudioBuffer;\r\n\r\n    private songOffsetRecordedTime: number;\r\n    private songOffset: number;\r\n\r\n    private _playbackRate = 0;\r\n\r\n    private get playbackRate() {\r\n        return this._playbackRate;\r\n    }\r\n\r\n    private set playbackRate(value: number) {\r\n        this._playbackRate = value;\r\n        if (value !== 0) {\r\n            this.lastPlaybackDirectionIsForward = (value > 0);\r\n        }\r\n    }\r\n\r\n    private lastPlaybackDirectionIsForward = true;\r\n    private gainNode: GainNode;\r\n    private scriptNode: ScriptProcessorNode;\r\n    private controlInputNode: MediaStreamAudioSourceNode;\r\n\r\n    private controlled = false;\r\n    private BUFFER_SIZE = 1024;\r\n\r\n    constructor(\r\n        private deckId: DeckId,\r\n        private audioUtil: AudioUtil,\r\n        private deckAudioSettings: DeckAudioSettings,\r\n        private dspUtil: DspUtil,\r\n        private resampler: Resampler,\r\n        private audioOutput: AudioOutput\r\n    ) {\r\n        this.song$.subscribe((song) => this.song = song);\r\n\r\n        this.gainNode = this.audioUtil.context.createGain();\r\n        this.gainNode.connect(this.audioOutput.getInputForDeck(deckId));\r\n\r\n        this.scriptNode = this.audioUtil.context.createScriptProcessor(this.BUFFER_SIZE);\r\n        this.scriptNode.onaudioprocess = (e: AudioProcessingEvent) => this.processControlAudio(e);\r\n    }\r\n\r\n    get isPlaying() {\r\n        return this.buffer !== undefined && this.playbackRate !== 0 && !this.isControlled;\r\n    }\r\n\r\n    get isLoaded() {\r\n        return !!this.buffer;\r\n    }\r\n\r\n    get songObservable(): Observable<Song> {\r\n        return this.song$.asObservable();\r\n    }\r\n\r\n    get currentSongOffset() {\r\n        let songOffsetSinceLastRecording = (this.audioUtil.context.currentTime - this.songOffsetRecordedTime) * this.playbackRate;\r\n        return this.songOffset + songOffsetSinceLastRecording;\r\n    }\r\n\r\n    get isControlled() {\r\n        return this.controlled;\r\n    }\r\n\r\n    enableControl() {\r\n        let controlDevice = this.deckAudioSettings.getControlIn();\r\n        if (controlDevice) {\r\n            if(this.isPlaying) {\r\n                this.pauseBuffer();\r\n            }\r\n\r\n            this.controlled = true;\r\n\r\n            let constraints = {\r\n                audio: {\r\n                    deviceId: controlDevice.deviceId,\r\n                    echoCancellation: {exact: false}\r\n                }\r\n            };\r\n\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(\r\n                    (stream) => {\r\n                        this.controlInputNode = this.audioUtil.context.createMediaStreamSource(stream);\r\n                        this.controlInputNode.connect(this.scriptNode);\r\n                        this.scriptNode.connect(this.gainNode);\r\n                    },\r\n                    (error) => {\r\n                        console.error('Could not load control device.', error);\r\n                        this.controlled = false;\r\n                    }\r\n                );\r\n\r\n        }\r\n    }\r\n\r\n    disableControl() {\r\n        this.controlInputNode.disconnect();\r\n        this.controlInputNode = undefined;\r\n        this.scriptNode.disconnect();\r\n        this.controlled = false;\r\n\r\n        this.updateSongOffset();\r\n        this.playbackRate = 0;\r\n    }\r\n\r\n    toggleControl() {\r\n        this.isControlled ? this.disableControl() : this.enableControl();\r\n    }\r\n\r\n    private processControlAudio(event: AudioProcessingEvent) {\r\n        //This could happen once after you disable control\r\n        if(!this.isControlled) {\r\n            return;\r\n        }\r\n\r\n        let context = this.audioUtil.context;\r\n\r\n        let leftInputBuffer = event.inputBuffer.getChannelData(0);\r\n        let rightInputBuffer = event.inputBuffer.getChannelData(1);\r\n\r\n        let leftScriptOutputBuffer = event.outputBuffer.getChannelData(0);\r\n        let rightScriptOutputBuffer = event.outputBuffer.getChannelData(1);\r\n\r\n        const subChunkSize = 512;\r\n        const defaultPilotHz = 2000;\r\n\r\n        try {\r\n            for (let subChunkOffset = 0; subChunkOffset < this.BUFFER_SIZE; subChunkOffset += subChunkSize) {\r\n                let leftSubInputBuffer = this.audioUtil.copyBuffer(leftInputBuffer, subChunkOffset, subChunkSize);\r\n                let rightSubInputBuffer = this.audioUtil.copyBuffer(rightInputBuffer, subChunkOffset, subChunkSize);\r\n\r\n                let {pilotHz, periodSamples} = this.getControlFreq(leftSubInputBuffer);\r\n\r\n                let playingForward = this.controlIsPlayingForward(leftSubInputBuffer, rightSubInputBuffer, periodSamples);\r\n                let playDirectionMultiplier = playingForward ? 1 : -1;\r\n\r\n                let songSize = Math.round(subChunkSize * (pilotHz / defaultPilotHz));\r\n                let songPlaybackRate = songSize / subChunkSize;\r\n                let songSampleRate = context.sampleRate * songPlaybackRate;\r\n\r\n                let {leftSongBuffer, rightSongBuffer} = this.getChunkOfSongForControl(songSize, playingForward);\r\n\r\n                let leftRenderedBuffer = this.resampler.resample(leftSongBuffer, songSampleRate, context.sampleRate);\r\n                let rightRenderedBuffer = this.resampler.resample(rightSongBuffer, songSampleRate, context.sampleRate);\r\n\r\n                for (let i = 0; i < subChunkSize; i++) {\r\n                    leftScriptOutputBuffer[i + subChunkOffset] = leftRenderedBuffer[i];\r\n                    rightScriptOutputBuffer[i + subChunkOffset] = rightRenderedBuffer[i];\r\n                }\r\n\r\n                this.songOffset += songSize * playDirectionMultiplier / this.audioUtil.context.sampleRate;\r\n                this.playbackRate = songSize * playDirectionMultiplier / this.BUFFER_SIZE;\r\n                this.songOffsetRecordedTime = this.audioUtil.context.currentTime;\r\n\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.playbackRate = 0;\r\n            this.songOffsetRecordedTime = this.audioUtil.context.currentTime;\r\n            for (let i = 0; i < this.BUFFER_SIZE; i++) {\r\n                leftScriptOutputBuffer[i] = 0;\r\n                rightScriptOutputBuffer[i] = 0;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private getControlFreq(buf: Float32Array) {\r\n        let pilotHz = this.dspUtil.autoCorrelate(buf, this.audioUtil.context.sampleRate);\r\n        let periodSamples = this.audioUtil.context.sampleRate / pilotHz;\r\n\r\n        //Not enough of a signal to detect/too quiet or too slow\r\n        if (pilotHz === -1) {\r\n            throw new Error('Could not detect frequency');\r\n        } else {\r\n            return {pilotHz, periodSamples};\r\n        }\r\n    }\r\n\r\n    private controlIsPlayingForward(leftBuf: Float32Array, rightBuf: Float32Array, periodSamples: number): boolean {\r\n\r\n        let isPlayingForward = this.dspUtil.isPlayingForwardMaxMin(leftBuf, rightBuf, periodSamples);\r\n\r\n        if(isPlayingForward !== undefined) {\r\n            return isPlayingForward;\r\n        } else {\r\n\r\n        }\r\n\r\n        let phaseSamples = this.dspUtil.crossCorrelate(leftBuf, rightBuf);\r\n        //This should be from 0.22 to 0.25\r\n        let relPhaseSeperation = Math.min(periodSamples - phaseSamples, phaseSamples) / periodSamples;\r\n\r\n        if (phaseSamples === -1 || relPhaseSeperation < 0.2 || relPhaseSeperation > 0.3 || phaseSamples > periodSamples) {\r\n            return this.lastPlaybackDirectionIsForward;\r\n        } else {\r\n            return phaseSamples > periodSamples - phaseSamples;\r\n        }\r\n    }\r\n\r\n    private getChunkOfSongForControl(size, playingForward) {\r\n        let leftFullSongBuffer = this.buffer.getChannelData(0);\r\n        let rightFullSongBuffer = this.buffer.getChannelData(1);\r\n\r\n        let leftSongBuffer = new Float32Array(size);\r\n        let rightSongBuffer = new Float32Array(size);\r\n\r\n        let playDirectionMultiplier = playingForward ? 1 : -1;\r\n\r\n        let offsetSamples = Math.round(this.songOffset * this.audioUtil.context.sampleRate);\r\n        for (let i = 0; i < size; i++) {\r\n            let songIndex = i * playDirectionMultiplier + offsetSamples;\r\n\r\n            let songIndexIsValid = () => songIndex >= 0 && songIndex <= leftFullSongBuffer.length;\r\n\r\n            leftSongBuffer[i] = songIndexIsValid() ? leftFullSongBuffer[songIndex] : 0;\r\n            rightSongBuffer[i] = songIndexIsValid() ? rightFullSongBuffer[songIndex] : 0;\r\n        }\r\n\r\n        return {leftSongBuffer, rightSongBuffer};\r\n    }\r\n\r\n\r\n    setSongOffset(time) {\r\n        this.songOffset = time;\r\n        this.songOffsetRecordedTime = this.audioUtil.context.currentTime;\r\n\r\n        if (!this.isControlled && this.isPlaying) {\r\n            this.pauseBuffer();\r\n            this.playBuffer();\r\n        }\r\n    }\r\n\r\n    loadSong(song: Song) {\r\n        let context = this.audioUtil.context;\r\n\r\n        return context.decodeAudioData(song.buffer)\r\n            .then((audioBuffer) => {\r\n                this.buffer = audioBuffer;\r\n                this.songOffset = 0;\r\n                this.songOffsetRecordedTime = context.currentTime;\r\n                this.playbackRate = 0;\r\n                this.song$.next(song);\r\n            });\r\n    }\r\n\r\n    playBuffer() {\r\n        if (this.buffer && !this.isPlaying && !this.isControlled) {\r\n            let context = this.audioUtil.context;\r\n\r\n            if (this.source) {\r\n                this.source.stop();\r\n            }\r\n\r\n            this.updateSongOffset();\r\n            //todo: replace 1 with value of the tempo slider\r\n            this.playbackRate = 1;\r\n            this.source = context.createBufferSource();\r\n            this.source.playbackRate.value = this.playbackRate;\r\n            this.source.buffer = this.buffer;\r\n            this.source.connect(this.gainNode);\r\n            this.source.start(context.currentTime, this.songOffset);\r\n        }\r\n    }\r\n\r\n    pauseBuffer() {\r\n        if (this.buffer) {\r\n            this.updateSongOffset();\r\n            this.playbackRate = 0;\r\n            this.source.stop();\r\n            this.source = undefined;\r\n        }\r\n    }\r\n\r\n    setGain(gain: number) {\r\n        //delay when gain is set to make up for audio latency. Maybe set this to 40ms in OSX and 170ms on windows\r\n        this.gainNode.gain.setValueAtTime(gain, this.audioUtil.context.currentTime + 40 / 1000);\r\n        //this.gainNode.gain.value = gain;\r\n    }\r\n\r\n    private updateSongOffset() {\r\n        this.songOffset = this.currentSongOffset;\r\n        this.songOffsetRecordedTime = this.audioUtil.context.currentTime;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {Observable, ReplaySubject} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AudioUtil {\r\n    context = new AudioContext();\r\n    private inputDevices = new ReplaySubject<MediaDeviceInfo[]>();\r\n    private outputDevices = new ReplaySubject<MediaDeviceInfo[]>();\r\n\r\n    get inputDevices$(): Observable<MediaDeviceInfo[]> {\r\n        return this.inputDevices.asObservable();\r\n    }\r\n\r\n    get outputDevices$(): Observable<MediaDeviceInfo[]> {\r\n        return this.outputDevices.asObservable();\r\n    }\r\n\r\n    constructor() {\r\n        //The requests for microphone access. Without this we can't get the names of audio inputs and outputs\r\n        //TODO: can this be replaced with navigator.mediaDevices.getUserMedia\r\n        navigator.getUserMedia({audio: true}, () => this.onUserMediaLoad(), () => this.onUserMediaError());\r\n    }\r\n\r\n    public copyBuffer(buf: Float32Array, start?: number, size?: number) {\r\n        if(start === undefined) {\r\n            start = 0;\r\n        }\r\n\r\n        if(size === undefined) {\r\n            size = buf.length;\r\n        }\r\n\r\n        let output = new Float32Array(size);\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            output[i] = buf[i + start];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private onUserMediaLoad() {\r\n        //TODO: check if this event actually triggers change detection. Might have issues with zone.js\r\n        navigator.mediaDevices.ondevicechange = () => this.updateDeviceLists();\r\n        this.updateDeviceLists();\r\n    }\r\n\r\n    private onUserMediaError() {\r\n        console.error('Could not get access to audio inputs');\r\n    }\r\n\r\n    private updateDeviceLists() {\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\r\n            let inputDevices = [];\r\n            let outputDevices = [];\r\n\r\n            devices.forEach((device: MediaDeviceInfo) => {\r\n                //Not sure what the 'Communications' device is...\r\n                if (device.label !== 'Communications') {\r\n                    if (device.kind === 'audioinput') {\r\n                        inputDevices.push(device);\r\n\r\n                    } else if (device.kind === 'audiooutput') {\r\n                        outputDevices.push(device);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.inputDevices.next(inputDevices);\r\n            this.outputDevices.next(outputDevices);\r\n        });\r\n    }\r\n\r\n}","export function dbMigration1(db: IDBDatabase) {\r\n    db.createObjectStore('songDetails', {autoIncrement: true, keyPath: 'id'});\r\n    db.createObjectStore('songBuffer');\r\n    db.createObjectStore('preferences');\r\n}","import {SongDetails} from \"../../../models/songDetails\";\r\nimport {Db} from \"../db.service\";\r\n\r\nexport function dbMigration20(db: IDBDatabase, upgradeTransaction: IDBTransaction) {\r\n    let getSongCursor = upgradeTransaction.objectStore('songDetails').openCursor();\r\n\r\n    let albumDataUrlById = {};\r\n    let resizingImagesPromises = [];\r\n\r\n    getSongCursor.onsuccess = (e) => {\r\n        let cursor: IDBCursorWithValue = e.target['result'];\r\n        if (cursor) {\r\n            let details: SongDetails = cursor.value;\r\n            if (details['base64Pic']) {\r\n                resizingImagesPromises.push(\r\n                    resizeBase64Img(details['picFormat'], details['base64Pic'], 100, 100)\r\n                        .then((albumDataUrl) => {\r\n                            albumDataUrlById[details.id] = albumDataUrl;\r\n                            delete details['picFormat'];\r\n                            delete details['base64Pic'];\r\n                            details.albumDataUrl = albumDataUrl;\r\n                        })\r\n                );\r\n            }\r\n            cursor.continue();\r\n        } else {\r\n            //ლ(ಠ_ಠლ)\r\n            setTimeout(() => {\r\n                updateAlbumPics(db, albumDataUrlById, resizingImagesPromises);\r\n            })\r\n        }\r\n    };\r\n}\r\n\r\nfunction updateAlbumPics(db, albumDataUrlById, resizingImagesPromises) {\r\n    Promise.all(resizingImagesPromises)\r\n        .then(() => {\r\n            let updateAlbumCoversTransaction = db.transaction(['songDetails'], Db.READWRITE_TRANSACTION);\r\n            let getSongCursor = updateAlbumCoversTransaction.objectStore('songDetails').openCursor();\r\n\r\n            getSongCursor.onsuccess = (e) => {\r\n                let cursor: IDBCursorWithValue = e.target['result'];\r\n                if (cursor) {\r\n                    let details: SongDetails = cursor.value;\r\n                    if (details['base64Pic']) {\r\n                        delete details['picFormat'];\r\n                        delete details['base64Pic'];\r\n\r\n                        details.albumDataUrl = albumDataUrlById[details.id];\r\n                        cursor.update(details);\r\n                        cursor.continue();\r\n                    } else {\r\n                        cursor.continue();\r\n                    }\r\n                }\r\n            };\r\n        })\r\n}\r\n\r\n//based on http://stackoverflow.com/a/20965997/373655\r\nfunction resizeBase64Img(type: string, base64: string, maxWidth: number, maxHeight: number): Promise<string> {\r\n    return new Promise((resolve) => {\r\n        let img = new Image;\r\n\r\n        img.onload = resizeImage;\r\n        img.src = `data:${type};base64,${base64}`;\r\n\r\n        function resizeImage() {\r\n            let targetWidth = img.width;\r\n            let targetHeight = img.height;\r\n\r\n            if (img.width > maxWidth) {\r\n                targetWidth = maxWidth;\r\n                targetHeight = img.height / (img.width / maxWidth);\r\n            }\r\n\r\n            if (targetHeight > maxHeight) {\r\n                targetHeight = maxHeight;\r\n                targetWidth = img.width / (img.height / maxHeight);\r\n            }\r\n            resolve(imageToDataUri(img, targetWidth, targetHeight));\r\n        }\r\n\r\n        function imageToDataUri(img, width, height) {\r\n\r\n            // create an off-screen canvas\r\n            let canvas = document.createElement('canvas'),\r\n                ctx = canvas.getContext('2d');\r\n\r\n            // set its dimension to target size\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n\r\n            // draw source image into the off-screen canvas:\r\n            ctx.drawImage(img, 0, 0, width, height);\r\n\r\n            // encode image to data-uri with base64 version of compressed image\r\n            return canvas.toDataURL('image/jpeg', 0.8);\r\n        }\r\n    });\r\n}","import {SongDetails} from \"../../../models/songDetails\";\r\n\r\nexport function dbMigration21(db: IDBDatabase, transaction: IDBTransaction) {\r\n    let getSongCursor = transaction.objectStore('songDetails').openCursor();\r\n\r\n    getSongCursor.onsuccess = (e) => {\r\n        let cursor: IDBCursorWithValue = e.target['result'];\r\n        if (cursor) {\r\n            let details: SongDetails = cursor.value;\r\n            details.cues = details.cues || [];\r\n            cursor.update(details);\r\n            cursor.continue();\r\n        }\r\n    };\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {dbMigration1} from \"./migrations/dbMigration1\";\r\nimport {dbMigration20} from \"./migrations/dbMigration20\";\r\nimport {dbMigration21} from \"./migrations/dbMigration21\";\r\n\r\n@Injectable()\r\nexport class Db {\r\n\r\n    static READONLY_TRANSACTION = 'readonly';\r\n    static READWRITE_TRANSACTION = 'readwrite';\r\n    static DB_VERSION = 21;\r\n\r\n    dbInitialized: Promise<IDBDatabase>;\r\n    private db: IDBDatabase;\r\n    private resolveInitialized: (db: IDBDatabase) => void;\r\n    private rejectInitialized: (rejection?) => void;\r\n\r\n    constructor() {\r\n        this.dbInitialized = new Promise((resolve, reject) => {\r\n            this.resolveInitialized = resolve;\r\n            this.rejectInitialized = reject;\r\n        });\r\n    }\r\n\r\n    static reqToPromise(req: IDBRequest): Promise<Event> {\r\n        return new Promise((resolve, reject) => {\r\n            req.onsuccess = resolve;\r\n            req.onerror = reject;\r\n        });\r\n    }\r\n\r\n    initialize() {\r\n        let openRequest = indexedDB.open('dvs', Db.DB_VERSION);\r\n\r\n        let oldVersion;\r\n\r\n        openRequest.onupgradeneeded = function (versionEvent: IDBVersionChangeEvent) {\r\n            let db = versionEvent.target['result'];\r\n            let transaction: IDBTransaction = versionEvent.target['transaction'];\r\n            oldVersion = versionEvent.oldVersion;\r\n\r\n\r\n            if (oldVersion !== undefined) {\r\n                if (oldVersion < 1) {\r\n                    dbMigration1(db);\r\n                }\r\n\r\n                if (oldVersion >= 1 && oldVersion < 20) {\r\n                    dbMigration20(db, transaction);\r\n                }\r\n\r\n                if (oldVersion >= 1 && oldVersion < 21) {\r\n                    dbMigration21(db, transaction);\r\n                }\r\n            }\r\n        };\r\n\r\n        openRequest.onsuccess = (event) => {\r\n            this.db = event.target['result'];\r\n            this.resolveInitialized(this.db);\r\n        };\r\n\r\n        openRequest.onerror = this.rejectInitialized;\r\n\r\n        return this.dbInitialized;\r\n    }\r\n\r\n}","import {MidiMapping} from \"../midi/midiMapper.service\";\r\n\r\nexport class Preferences {\r\n    crossfaderCurveSharpness = 0;\r\n    midiMappings = new Map<string, MidiMapping>();\r\n    enabledMidiInputNames = new Set<string>();\r\n    enabledMidiOutputNames = new Set<string>();\r\n    audioSettings = {\r\n        input: {\r\n            deckA: {controlDeviceId: undefined, liveDeviceId: undefined},\r\n            deckB: {controlDeviceId: undefined, liveDeviceId: undefined}\r\n        }\r\n    }\r\n}","import {Injectable} from '@angular/core';\r\nimport {Db} from \"./db.service\";\r\nimport {Preferences} from \"./preferences\";\r\nimport {MidiMapping} from \"../midi/midiMapper.service\";\r\nimport {AudioSettingsDbFormat} from \"../../app/sideNav/audioSettings/audioSettings.service\";\r\n\r\n@Injectable()\r\nexport class PreferencesDb {\r\n    initialized: Promise<any>;\r\n\r\n    private db: IDBDatabase;\r\n    private preferences: Preferences;\r\n\r\n    constructor(dbService: Db) {\r\n        let resolveInitialized;\r\n        let rejectInitialized;\r\n\r\n        this.initialized = new Promise((resolve, reject) => {\r\n            resolveInitialized = resolve;\r\n            rejectInitialized = reject;\r\n        });\r\n\r\n        dbService.dbInitialized.then((db) => {\r\n            this.db = db;\r\n\r\n            this.preferences = new Preferences();\r\n\r\n            let prefCursor = this.db.transaction(['preferences'], Db.READONLY_TRANSACTION)\r\n                .objectStore('preferences')\r\n                .openCursor();\r\n\r\n            prefCursor.onsuccess = (e) => {\r\n                let cursor: IDBCursorWithValue = e.target['result'];\r\n                if (cursor) {\r\n                    if (!(<string>cursor.key in this.preferences)) {\r\n                        console.warn('Found preference key in DB that does not exist in preference model: ' + cursor.key);\r\n                    }\r\n\r\n                    this.preferences[<string>cursor.key] = cursor.value;\r\n                    cursor.continue();\r\n\r\n                    //Called after all entries have been processed\r\n                } else {\r\n                    resolveInitialized();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    setCrossfaderCurveSharpness(value: number) {\r\n        return this.setPreference('crossfaderCurveSharpness', value);\r\n    }\r\n\r\n    getCrossfaderCurveSharpness(): number {\r\n        return this.preferences.crossfaderCurveSharpness;\r\n    }\r\n\r\n    getEnabledMidiInputNames() {\r\n        return this.preferences.enabledMidiInputNames;\r\n    }\r\n\r\n    setEnabledMidiInputNames(inputs: Set<string>) {\r\n        return this.setPreference('enabledMidiInputNames', inputs);\r\n    }\r\n\r\n    getEnabledMidiOutputNames() {\r\n        return this.preferences.enabledMidiOutputNames;\r\n    }\r\n\r\n    setEnabledMidiOutputNames(outputs: Set<string>) {\r\n        return this.setPreference('enabledMidiOutputNames', outputs);\r\n    }\r\n\r\n    getMidiMappings(): Map<string, MidiMapping> {\r\n        return this.preferences.midiMappings;\r\n    }\r\n\r\n    setMidiMappings(mappings: Map<string, MidiMapping>) {\r\n        return this.setPreference('midiMappings', mappings);\r\n    }\r\n\r\n    getAudioSettings(): AudioSettingsDbFormat {\r\n        return this.preferences.audioSettings;\r\n    }\r\n\r\n    setAudioSettings(settings: AudioSettingsDbFormat) {\r\n        return this.setPreference('audioSettings', settings);\r\n    }\r\n\r\n\r\n    private setPreference(key: string, value) {\r\n        this.preferences[key] = value;\r\n\r\n        return Db.reqToPromise(\r\n            this.db.transaction(['preferences'], Db.READWRITE_TRANSACTION)\r\n                .objectStore('preferences')\r\n                .put(value, key)\r\n        );\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {DeckId} from \"../../app.component\";\r\nimport {BehaviorSubject, Observable} from \"rxjs\";\r\nimport {PreferencesDb} from \"../../../services/db/preferencesDb.service\";\r\nimport {AudioUtil} from \"../../../services/audio/audioUtil.service\";\r\n\r\n@Injectable()\r\nexport class AudioSettings {\r\n    private deckSettings = new Map<DeckId, DeckAudioSettings>();\r\n\r\n    constructor(private preferencesDb: PreferencesDb, audioUtil: AudioUtil) {\r\n        let deckASettings = new DeckAudioSettings();\r\n        let deckBSettings = new DeckAudioSettings();\r\n\r\n        this.deckSettings.set(DeckId.LEFT, deckASettings);\r\n        this.deckSettings.set(DeckId.RIGHT, deckBSettings);\r\n\r\n        preferencesDb.initialized.then(() => {\r\n            let audioSettings: AudioSettingsDbFormat = preferencesDb.getAudioSettings();\r\n            audioUtil.inputDevices$.first().subscribe((inputDevices) => {\r\n                deckASettings.setLiveIn(this.findDeviceById(inputDevices, audioSettings.input.deckA.liveDeviceId));\r\n                deckASettings.setControlIn(this.findDeviceById(inputDevices, audioSettings.input.deckA.controlDeviceId));\r\n                deckBSettings.setLiveIn(this.findDeviceById(inputDevices, audioSettings.input.deckB.liveDeviceId));\r\n                deckBSettings.setControlIn(this.findDeviceById(inputDevices, audioSettings.input.deckB.controlDeviceId));\r\n\r\n                deckASettings.liveIn$.subscribe(() => this.saveAudioSettings());\r\n                deckASettings.controlIn$.subscribe(() => this.saveAudioSettings());\r\n                deckBSettings.liveIn$.subscribe(() => this.saveAudioSettings());\r\n                deckBSettings.controlIn$.subscribe(() => this.saveAudioSettings());\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    getDeckAudioSettings(deckId: DeckId) {\r\n        return this.deckSettings.get(deckId);\r\n    }\r\n\r\n    private saveAudioSettings() {\r\n        let deckAAudioSettings = this.deckSettings.get(DeckId.LEFT);\r\n        let deckBAudioSettings = this.deckSettings.get(DeckId.RIGHT);\r\n\r\n        this.preferencesDb.setAudioSettings({\r\n            input: {\r\n                deckA: {\r\n                    liveDeviceId: deckAAudioSettings.getLiveIn() && deckAAudioSettings.getLiveIn().deviceId,\r\n                    controlDeviceId: deckAAudioSettings.getControlIn() && deckAAudioSettings.getControlIn().deviceId\r\n                },\r\n                deckB: {\r\n                    liveDeviceId: deckBAudioSettings.getLiveIn() && deckBAudioSettings.getLiveIn().deviceId,\r\n                    controlDeviceId: deckBAudioSettings.getControlIn() && deckBAudioSettings.getControlIn().deviceId\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private findDeviceById(deviceList: MediaDeviceInfo[], id: string): MediaDeviceInfo {\r\n        let matchingDevices = deviceList.filter(device => device.deviceId === id);\r\n        if(matchingDevices.length) {\r\n            return matchingDevices[0];\r\n        }\r\n    }\r\n}\r\n\r\nexport class DeckAudioSettings {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    private liveIn = new BehaviorSubject<MediaDeviceInfo>(undefined);\r\n    private controlIn = new BehaviorSubject<MediaDeviceInfo>(undefined);\r\n\r\n    get liveIn$(): Observable<MediaDeviceInfo> {\r\n        return this.liveIn.asObservable().distinctUntilChanged();\r\n    }\r\n\r\n    get controlIn$(): Observable<MediaDeviceInfo> {\r\n        return this.controlIn.asObservable().distinctUntilChanged();\r\n    }\r\n\r\n    getLiveIn(): MediaDeviceInfo {\r\n        return this.liveIn.getValue();\r\n    }\r\n\r\n    getControlIn(): MediaDeviceInfo {\r\n        return this.controlIn.getValue();\r\n    }\r\n\r\n    setLiveIn(device: MediaDeviceInfo) {\r\n        this.liveIn.next(device);\r\n    }\r\n\r\n    setControlIn(device: MediaDeviceInfo) {\r\n        this.controlIn.next(device);\r\n    }\r\n}\r\n\r\nexport interface AudioSettingsDbFormat {\r\n    input: {\r\n        deckA: {\r\n            controlDeviceId: string,\r\n            liveDeviceId: string\r\n        },\r\n        deckB: {\r\n            controlDeviceId: string,\r\n            liveDeviceId: string\r\n        }\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class DspUtil {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    isPlayingForward(leftBuf, rightBuf, periodSamples) {\r\n        let seperation = Math.round(periodSamples * 0.23);\r\n\r\n        let leftDcOffset = 0;\r\n        let rightDcOffset = 0;\r\n        for (let i = 0; i < leftBuf.length; i++) {\r\n            leftDcOffset += leftBuf[i] / leftBuf.length;\r\n            rightDcOffset += rightBuf[i] / rightBuf.length;\r\n        }\r\n\r\n        let leftAbsTotalAmp = 0;\r\n        let rightAbsTotalAmp = 0;\r\n        for (let i = 0; i < leftBuf.length; i++) {\r\n            leftAbsTotalAmp += Math.abs(leftBuf[i] - leftDcOffset);\r\n            rightAbsTotalAmp += Math.abs(rightBuf[i] - rightDcOffset);\r\n        }\r\n\r\n        let leftAmpMult = rightAbsTotalAmp / leftAbsTotalAmp;\r\n\r\n        let forwardSum = 0;\r\n        let reverseSum = 0;\r\n        for(let i = seperation; i < leftBuf.length - seperation; i++) {\r\n            forwardSum += Math.abs((leftBuf[i] - leftDcOffset) * leftAmpMult - (rightBuf[i - seperation] - rightDcOffset));\r\n            reverseSum += Math.abs((leftBuf[i] - leftDcOffset) * leftAmpMult - (rightBuf[i + seperation] - rightDcOffset));\r\n        }\r\n\r\n        let significance = Math.max(forwardSum, reverseSum) / Math.min(forwardSum, reverseSum);\r\n\r\n        if(significance > 2) {\r\n            return forwardSum < reverseSum;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    //TODO make this code less dumb\r\n    isPlayingForwardMaxMin(leftBuf, rightBuf, periodSamples) {\r\n        let nextLeftExtreme = undefined;\r\n        let nextRightExtreme = undefined;\r\n\r\n        let leftMaxes = [];\r\n        let leftMins = [];\r\n        let rightMaxes = [];\r\n        let rightMins = [];\r\n\r\n        for (let i = 1; i < leftBuf.length-1; i++) {\r\n            if(nextLeftExtreme !== 'min' && leftBuf[i-1] <= leftBuf[i] && leftBuf[i] >= leftBuf[i+1]) {\r\n                nextLeftExtreme = 'min';\r\n                leftMaxes.push(i);\r\n            }\r\n\r\n            if(nextLeftExtreme !== 'max' && leftBuf[i-1] >= leftBuf[i] && leftBuf[i] <= leftBuf[i+1]) {\r\n                nextLeftExtreme = 'max';\r\n                leftMins.push(i);\r\n            }\r\n\r\n            if(nextRightExtreme !== 'min' && rightBuf[i-1] <= rightBuf[i] && rightBuf[i] >= rightBuf[i+1]) {\r\n                nextRightExtreme = 'min';\r\n                rightMaxes.push(i);\r\n            }\r\n\r\n            if(nextRightExtreme !== 'max' && rightBuf[i-1] >= rightBuf[i] && rightBuf[i] <= rightBuf[i+1]) {\r\n                nextRightExtreme = 'max';\r\n                rightMins.push(i);\r\n            }\r\n        }\r\n\r\n        let leftMaxI = 0;\r\n        let rightMaxI = 0;\r\n\r\n        let forwardCount = 0;\r\n        let reverseCount = 0;\r\n\r\n        while(leftMaxI < leftMaxes.length) {\r\n\r\n\r\n            while(rightMaxI < rightMaxes.length-1 && rightMaxes[rightMaxI+1] < leftMaxes[leftMaxI]) {\r\n                rightMaxI++;\r\n            }\r\n\r\n            if(rightMaxI <= rightMaxes.length-1) {\r\n                if(leftMaxes[leftMaxI] - rightMaxes[rightMaxI] < rightMaxes[rightMaxI+1] - leftMaxes[leftMaxI]) {\r\n                    forwardCount++;\r\n                } else {\r\n                    reverseCount++;\r\n                }\r\n            }\r\n\r\n            leftMaxI++;\r\n        }\r\n\r\n        //1 is best.\r\n        let confidence = Math.abs(forwardCount - reverseCount) / (forwardCount + reverseCount);\r\n\r\n        if(confidence < 0.12) {\r\n            return undefined;\r\n        } else {\r\n            return forwardCount > reverseCount;\r\n        }\r\n\r\n    }\r\n\r\n    getRms(buf) {\r\n        let rms = 0;\r\n\r\n        for (let i = 0; i < buf.length; i++) {\r\n            let val = buf[i];\r\n            rms += val * val;\r\n        }\r\n        rms = Math.sqrt(rms / buf.length);\r\n        return rms;\r\n    }\r\n\r\n    autoCorrelate(buf, sampleRate) {\r\n        const MIN_SAMPLES = 0;  // will be initialized when AudioContext is created.\r\n        const GOOD_ENOUGH_CORRELATION = 0.1; // this is the \"bar\" for how close a correlation needs to be\r\n\r\n        let SIZE = buf.length;\r\n        let offsetIterations = Math.floor(SIZE * 3/4);\r\n        let compareChunkSize = Math.floor(SIZE / 4);\r\n        let best_offset = -1;\r\n        let best_correlation = 0;\r\n        let foundGoodCorrelation = false;\r\n        let correlations = new Array(offsetIterations);\r\n\r\n        let rms = this.getRms(buf);\r\n        // not enough signal\r\n        if (rms < 0.05) {\r\n            return -1;\r\n        }\r\n\r\n        let lastCorrelation = 1;\r\n        for (let offset = MIN_SAMPLES; offset < offsetIterations; offset++) {\r\n            let correlation = 0;\r\n\r\n            for (let i = 0; i < compareChunkSize; i++) {\r\n                correlation += Math.abs((buf[i]) - (buf[i + offset]));\r\n            }\r\n            correlation = 1 - (correlation / compareChunkSize);\r\n            correlations[offset] = correlation; // store it, for the tweaking we need to do below.\r\n            if ((correlation > GOOD_ENOUGH_CORRELATION) && (correlation > lastCorrelation)) {\r\n                foundGoodCorrelation = true;\r\n                if (correlation > best_correlation) {\r\n                    best_correlation = correlation;\r\n                    best_offset = offset;\r\n                }\r\n            } else if (foundGoodCorrelation) {\r\n                // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\r\n                // Now we need to tweak the offset - by interpolating between the values to the left and right of the\r\n                // best offset, and shifting it a bit.  This is complex, and HACKY in this code (happy to take PRs!) -\r\n                // we need to do a curve fit on correlations[] around best_offset in order to better determine precise\r\n                // (anti-aliased) offset.\r\n\r\n                // we know best_offset >=1,\r\n                // since foundGoodCorrelation cannot go to true until the second pass (offset=1), and\r\n                // we can't drop into this clause until the following pass (else if).\r\n                let shift = (correlations[best_offset + 1] - correlations[best_offset - 1]) / correlations[best_offset];\r\n                return sampleRate / (best_offset + (8 * shift));\r\n            }\r\n            lastCorrelation = correlation;\r\n        }\r\n        if (best_correlation > 0.01 && best_offset !== offsetIterations-1) {\r\n            // console.log(\"f = \" + sampleRate/best_offset + \"Hz (rms: \" + rms + \" confidence: \" + best_correlation + \")\")\r\n            return sampleRate / best_offset;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    //Returns phase difference in samples between buf1 and buf2\r\n    //TODO: don't need to wait for correlation > lastCorrelation to set foundGoodCorrelation\r\n    crossCorrelate(buf1, buf2) {\r\n        const MIN_SAMPLES = 0;  // will be initialized when AudioContext is created.\r\n        const GOOD_ENOUGH_CORRELATION = 0.9; // this is the \"bar\" for how close a correlation needs to be\r\n\r\n        let SIZE = Math.min(buf1.length, buf2.length);\r\n        let MAX_SAMPLES = Math.floor(SIZE / 2);\r\n        let best_offset = -1;\r\n        let best_correlation = 0;\r\n        let foundGoodCorrelation = false;\r\n        let correlations = new Array(MAX_SAMPLES);\r\n\r\n        let lastCorrelation = 1;\r\n        for (let offset = MIN_SAMPLES; offset < MAX_SAMPLES; offset++) {\r\n            let correlation = 0;\r\n\r\n            for (let i = 0; i < MAX_SAMPLES; i++) {\r\n                correlation += Math.abs((buf1[i]) - (buf2[i + offset]));\r\n            }\r\n            correlation = 1 - (correlation / MAX_SAMPLES);\r\n            correlations[offset] = correlation; // store it, for the tweaking we need to do below.\r\n            if ((correlation > GOOD_ENOUGH_CORRELATION) && (correlation > lastCorrelation)) {\r\n                foundGoodCorrelation = true;\r\n                if (correlation > best_correlation) {\r\n                    best_correlation = correlation;\r\n                    best_offset = offset;\r\n                }\r\n            } else if (foundGoodCorrelation) {\r\n                // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\r\n                // Now we need to tweak the offset - by interpolating between the values to the left and right of the\r\n                // best offset, and shifting it a bit.  This is complex, and HACKY in this code (happy to take PRs!) -\r\n                // we need to do a curve fit on correlations[] around best_offset in order to better determine precise\r\n                // (anti-aliased) offset.\r\n\r\n                // we know best_offset >=1,\r\n                // since foundGoodCorrelation cannot go to true until the second pass (offset=1), and\r\n                // we can't drop into this clause until the following pass (else if).\r\n                let shift = (correlations[best_offset + 1] - correlations[best_offset - 1]) / correlations[best_offset];\r\n                return best_offset + (8 * shift);\r\n            }\r\n            lastCorrelation = correlation;\r\n        }\r\n        if (best_correlation > 0.01) {\r\n            return best_offset;\r\n        }\r\n        return -1;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\n\r\n//Based on https://github.com/jussi-kalliokoski/sink.js/blob/master/src/utils/resample.js\r\n@Injectable()\r\nexport class Resampler {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * Resamples a sample buffer from a frequency to a frequency and / or from a sample rate to a sample rate.\r\n     *\r\n     * @static Sink\r\n     * @name resample\r\n     *\r\n     * @arg {Buffer} buffer The sample buffer to resample.\r\n     * @arg {Number} fromRate The original sample rate of the buffer, or if the last argument, the speed ratio to convert with.\r\n     * @arg {Number} fromFrequency The original frequency of the buffer, or if the last argument, used as toRate and the secondary comparison will not be made.\r\n     * @arg {Number} toRate The sample rate of the created buffer.\r\n     * @arg {Number} toFrequency The frequency of the created buffer.\r\n     *\r\n     * @return The new resampled buffer.\r\n     */\r\n    resample(buffer, fromRate /* or speed */, fromFrequency /* or toRate */, toRate?, toFrequency?): Float32Array {\r\n        let argc = arguments.length;\r\n\r\n        let speed;\r\n        if(argc === 2) {\r\n            speed = fromRate;\r\n        } else if (argc === 3) {\r\n            speed = fromRate / fromFrequency;\r\n        } else {\r\n            speed = toRate / fromRate * toFrequency / fromFrequency;\r\n        }\r\n\r\n        let l = buffer.length;\r\n        let length = Math.ceil(l / speed);\r\n        let newBuffer = new Float32Array(length);\r\n        let i, n;\r\n        for (i = 0, n = 0; i < l; i += speed) {\r\n            newBuffer[n++] = this.interpolate(buffer, i);\r\n        }\r\n        return newBuffer;\r\n    };\r\n\r\n    private interpolate(arr, pos) {\r\n        let first = Math.floor(pos),\r\n            second = first + 1,\r\n            frac = pos - first;\r\n\r\n        second = second < arr.length ? second : first;\r\n        return arr[first] * (1 - frac) + arr[second] * frac;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {AudioUtil} from \"./audio/audioUtil.service\";\r\nimport {DeckId} from \"../app/app.component\";\r\n\r\n@Injectable()\r\nexport class AudioOutput {\r\n\r\n    private inputGainNodes = new Map<DeckId, GainNode>();\r\n    private masterGain: GainNode;\r\n\r\n    constructor(private audioUtil: AudioUtil) {\r\n        this.inputGainNodes.set(DeckId.LEFT, audioUtil.context.createGain());\r\n        this.inputGainNodes.set(DeckId.RIGHT, audioUtil.context.createGain());\r\n\r\n        this.masterGain = audioUtil.context.createGain();\r\n\r\n        this.inputGainNodes.get(DeckId.LEFT).connect(this.masterGain);\r\n        this.inputGainNodes.get(DeckId.RIGHT).connect(this.masterGain);\r\n\r\n        this.masterGain.connect(audioUtil.context.destination);\r\n    }\r\n\r\n    getInputForDeck(deckId: DeckId): AudioNode {\r\n        return this.inputGainNodes.get(deckId);\r\n    }\r\n\r\n    setDeckGain(deckId: DeckId, gain: number) {\r\n        this.inputGainNodes.get(deckId).gain.value = gain;\r\n    }\r\n\r\n    setMasterGain(gain: number) {\r\n        this.masterGain.gain.value = gain;\r\n    }\r\n\r\n    getDeckGain(deckId: DeckId): number {\r\n        return this.inputGainNodes.get(deckId).gain.value;\r\n    }\r\n\r\n    getMasterGain(): number {\r\n        return this.masterGain.gain.value;\r\n    }\r\n\r\n}","import {DeckId} from \"../app/app.component\";\r\nimport {ActiveSong} from \"./activeSong\";\r\nimport {AudioUtil} from \"./audio/audioUtil.service\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {AudioSettings} from \"../app/sideNav/audioSettings/audioSettings.service\";\r\nimport {DspUtil} from \"./audio/dspUtil.service\";\r\nimport {Resampler} from \"./audio/resampler.service\";\r\nimport {AudioOutput} from \"./audioOutput.service\";\r\n\r\n@Injectable()\r\nexport class ActiveSongs {\r\n    private activeSongByDeckId = new Map<DeckId, ActiveSong>();\r\n\r\n    constructor(audioUtil: AudioUtil, audioSettings: AudioSettings, dspUtil: DspUtil, resampler: Resampler, audioOutput: AudioOutput) {\r\n        this.activeSongByDeckId.set(\r\n            DeckId.LEFT,\r\n            new ActiveSong(DeckId.LEFT, audioUtil, audioSettings.getDeckAudioSettings(DeckId.LEFT), dspUtil, resampler, audioOutput)\r\n        );\r\n        this.activeSongByDeckId.set(\r\n            DeckId.RIGHT,\r\n            new ActiveSong(DeckId.RIGHT, audioUtil, audioSettings.getDeckAudioSettings(DeckId.RIGHT), dspUtil, resampler, audioOutput)\r\n        );\r\n    }\r\n\r\n    getActiveSong(deckId: DeckId) {\r\n        return this.activeSongByDeckId.get(deckId);\r\n    }\r\n}","import {Subject} from \"rxjs\";\r\nimport {NgZone, Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class AnimationFrames {\r\n    private framesSubject = new Subject();\r\n\r\n    public frames = this.framesSubject.asObservable();\r\n\r\n    constructor(ngZone: NgZone) {\r\n        ngZone.runOutsideAngular(() => {\r\n            requestAnimationFrame((time) => {\r\n                this.onFrame(time)\r\n            });\r\n        });\r\n    }\r\n\r\n    private onFrame(time) {\r\n        this.framesSubject.next(time);\r\n        requestAnimationFrame((time) => {\r\n            this.onFrame(time)\r\n        });\r\n    }\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\n@Pipe({name: 'formatTime'})\r\nexport class FormatTimePipe implements PipeTransform {\r\n    transform(timeInSeconds: number): string {\r\n        let minutes = Math.round(timeInSeconds / 60).toString();\r\n        let seconds = Math.round(timeInSeconds % 60).toString();\r\n\r\n        seconds.length === 1 && (seconds = '0' + seconds);\r\n\r\n        return `${minutes}:${seconds}`;\r\n    }\r\n}","import {SongDetails} from \"./songDetails\";\r\nexport class Song {\r\n    details: SongDetails;\r\n    buffer: ArrayBuffer;\r\n    waveformCompressed100x: number[];\r\n\r\n    constructor({details, buffer, waveformCompressed100X}: {details: SongDetails, buffer: ArrayBuffer, waveformCompressed100X: number[]}) {\r\n        this.details = details;\r\n        this.buffer = buffer;\r\n        this.waveformCompressed100x = waveformCompressed100X;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {WorkerType, WorkerUtil} from './workerUtil';\r\n\r\n@Injectable()\r\nexport class ImageUtil {\r\n    constructor(private workerUtil: WorkerUtil) {\r\n\r\n    }\r\n\r\n    byteArrayToBase64(byteArr: number[]): Promise<string> {\r\n        return this.workerUtil.run({\r\n            workerType: WorkerType.Image,\r\n            method: 'byteArrayToBase64',\r\n            params: [byteArr]\r\n        });\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Song} from \"../../models/song\";\r\nimport {SongDetails, SongDetailsDraft} from \"../../models/songDetails\";\r\nimport {WaveformUtil} from \"../audio/waveformUtil.service\";\r\nimport {ThemeId} from \"../../app/app.component\";\r\nimport {Db} from \"./db.service\";\r\nimport {AudioUtil} from \"../audio/audioUtil.service\";\r\nimport {ImageUtil} from '../imageUtil.service';\r\n\r\n@Injectable()\r\nexport class SongDb {\r\n    db: IDBDatabase;\r\n\r\n    private allSongDetails$ = new BehaviorSubject<SongDetails[]>([]);\r\n\r\n    constructor(dbService: Db, private waveformUtil: WaveformUtil, private audioUtil: AudioUtil, private imageUtil: ImageUtil) {\r\n        dbService.dbInitialized.then((db) => {\r\n            this.db = db;\r\n\r\n            let getMetadataTransaction = this.db.transaction(['songDetails'], Db.READONLY_TRANSACTION);\r\n            let getMetadataCursor = getMetadataTransaction.objectStore('songDetails').openCursor();\r\n\r\n            let allMetadata = [];\r\n            getMetadataCursor.onsuccess = (e) => {\r\n                let cursor: IDBCursorWithValue = e.target['result'];\r\n                if (cursor) {\r\n                    allMetadata.push(cursor.value);\r\n                    cursor.continue();\r\n                }\r\n            };\r\n\r\n            getMetadataTransaction.oncomplete = () => {\r\n                this.allSongDetails$.next(allMetadata);\r\n            };\r\n        });\r\n    }\r\n\r\n    getAllSongDetails(): Observable<SongDetails[]> {\r\n        return this.allSongDetails$.asObservable();\r\n    }\r\n\r\n    updateSongDetails(details: SongDetails) {\r\n        let updateTransaction = this.db.transaction(['songDetails'], Db.READWRITE_TRANSACTION);\r\n\r\n        return Db.reqToPromise(\r\n            updateTransaction\r\n                .objectStore('songDetails')\r\n                .put(details)\r\n        );\r\n    }\r\n\r\n    //TODO: figure out why this locks up the browser\r\n    addSong(arrayBuffer: ArrayBuffer, audioBuffer: AudioBuffer, tags, fileName: string): Promise<void> {\r\n        //setInterval(() => console.log('tick'));\r\n        console.log('adding song', performance.now());\r\n        let songDetails: SongDetails;\r\n        let songDetailsDraft: SongDetailsDraft = {\r\n            title: undefined,\r\n            lengthSeconds: audioBuffer.duration,\r\n            positiveSamples: undefined,\r\n            negativeSamples: undefined,\r\n            numSamples: undefined,\r\n            waveformDataUrl: undefined,\r\n            cues: []\r\n        };\r\n        let addTransaction: IDBTransaction;\r\n        let waveformData;\r\n\r\n        return this.waveformUtil.getWaveformData(audioBuffer)\r\n            .then((waveformDataResult: any) => {\r\n                waveformData = waveformDataResult;\r\n                songDetailsDraft.positiveSamples = waveformData.positiveSamples;\r\n                songDetailsDraft.negativeSamples = waveformData.negativeSamples;\r\n                songDetailsDraft.numSamples = waveformData.numSamples;\r\n\r\n                console.log('got the waveform', performance.now());\r\n                songDetailsDraft.waveformDataUrl = this.waveformUtil.generateDataUrlWaveform(\r\n                    waveformData.positiveSamples,\r\n                    waveformData.negativeSamples,\r\n                    this.audioUtil.context.sampleRate,\r\n                    150,\r\n                    35,\r\n                    ThemeId.DEFAULT,\r\n                    [],\r\n                    0,\r\n                    0\r\n                );\r\n\r\n\r\n                console.log('generated waveform dataurl', performance.now());\r\n\r\n                if (tags) {\r\n                    let parsedTrack = parseInt(tags.track);\r\n                    let parsedYear = parseInt(tags.year);\r\n\r\n                    songDetailsDraft.title = tags.title;\r\n                    songDetailsDraft.album = tags.album;\r\n                    songDetailsDraft.artist = tags.artist;\r\n                    songDetailsDraft.genre = tags.genre;\r\n                    !isNaN(parsedTrack) && (songDetailsDraft.track = parsedTrack);\r\n                    !isNaN(parsedYear) && (songDetailsDraft.year = parsedYear);\r\n\r\n                    if (tags.picture) {\r\n                        return this.imageUtil.byteArrayToBase64(tags.picture.data)\r\n                            .then((base64Album) => this.resizeBase64Img(tags.picture.format, base64Album, 100, 100))\r\n                            .then(albumDataUrl => (songDetailsDraft.albumDataUrl = albumDataUrl));\r\n                    }\r\n                }\r\n            })\r\n            .then(() => {\r\n                if (!songDetailsDraft.title) {\r\n                    songDetailsDraft.title = fileName;\r\n                }\r\n\r\n                addTransaction = this.db.transaction(['songDetails', 'songBuffer'], Db.READWRITE_TRANSACTION);\r\n\r\n                return Db.reqToPromise(\r\n                    addTransaction\r\n                        .objectStore('songDetails')\r\n                        .add(songDetailsDraft)\r\n                )\r\n            })\r\n            .then((e: Event) => {\r\n            console.log('done adding to indexed db', performance.now());\r\n                let id = e.target['result'];\r\n                songDetails = Object.assign({}, songDetailsDraft, {id: id});\r\n                return id;\r\n            })\r\n            .then((id) => {\r\n                let songBuffer: SongBuffer = {\r\n                    buffer: arrayBuffer,\r\n                    waveformCompressed100X: waveformData.compress100X\r\n                };\r\n\r\n                return Db.reqToPromise(\r\n                    addTransaction\r\n                        .objectStore('songBuffer')\r\n                        .add(songBuffer, id)\r\n                );\r\n            })\r\n            .then(() => {\r\n            console.log('done saving song buffer in indexed db', performance.now());\r\n                this.allSongDetails$.next([...this.allSongDetails$.getValue(), songDetails]);\r\n            });\r\n    }\r\n\r\n    deleteSong(songDetails: SongDetails) {\r\n        let deleteTransaction = this.db.transaction(['songDetails', 'songBuffer'], Db.READWRITE_TRANSACTION);\r\n        let deleteDetailsReq = deleteTransaction.objectStore('songDetails').delete(songDetails.id);\r\n        let deleteBufferReq = deleteTransaction.objectStore('songBuffer').delete(songDetails.id);\r\n\r\n        Promise.all([Db.reqToPromise(deleteDetailsReq), Db.reqToPromise(deleteBufferReq)])\r\n            .then(() => {\r\n                let currentDetails = this.allSongDetails$.getValue();\r\n                let filteredDetails = currentDetails.filter(d => d.id !== songDetails.id);\r\n                this.allSongDetails$.next(filteredDetails);\r\n            });\r\n    }\r\n\r\n    getSong(songDetails: SongDetails): Promise<Song> {\r\n        return Db.reqToPromise(\r\n            this.db.transaction(['songBuffer'], Db.READONLY_TRANSACTION)\r\n                .objectStore('songBuffer')\r\n                .get(songDetails.id)\r\n        )\r\n            .then((bufferEvent: Event) => {\r\n                let songBuffer: SongBuffer = bufferEvent.target['result'];\r\n                return new Song({\r\n                    details: songDetails,\r\n                    buffer: songBuffer.buffer,\r\n                    waveformCompressed100X: songBuffer.waveformCompressed100X\r\n                });\r\n            });\r\n    }\r\n\r\n    //based on http://stackoverflow.com/a/20965997/373655\r\n    resizeBase64Img(type: string, base64: string, maxWidth: number, maxHeight: number): Promise<string> {\r\n        return new Promise((resolve) => {\r\n            let img = new Image;\r\n\r\n            img.onload = resizeImage;\r\n            img.src = `data:${type};base64,${base64}`;\r\n\r\n            function resizeImage() {\r\n                let targetWidth = img.width;\r\n                let targetHeight = img.height;\r\n\r\n                if (img.width > maxWidth) {\r\n                    targetWidth = maxWidth;\r\n                    targetHeight = img.height / (img.width / maxWidth);\r\n                }\r\n\r\n                if (targetHeight > maxHeight) {\r\n                    targetHeight = maxHeight;\r\n                    targetWidth = img.width / (img.height / maxHeight);\r\n                }\r\n                resolve(imageToDataUri(img, targetWidth, targetHeight));\r\n            }\r\n\r\n            function imageToDataUri(img, width, height) {\r\n\r\n                // create an off-screen canvas\r\n                let canvas = document.createElement('canvas'),\r\n                    ctx = canvas.getContext('2d');\r\n\r\n                // set its dimension to target size\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n\r\n                // draw source image into the off-screen canvas:\r\n                ctx.drawImage(img, 0, 0, width, height);\r\n\r\n                // encode image to data-uri with base64 version of compressed image\r\n                return canvas.toDataURL('image/jpeg', 0.8);\r\n            }\r\n        });\r\n    }\r\n}","import {Song} from \"../../models/song\";\r\nimport {SongDetails} from \"../../models/songDetails\";\r\nimport {Component, ElementRef, Input, OnInit, AfterViewInit} from \"@angular/core\";\r\nimport {WaveformUtil} from \"../../services/audio/waveformUtil.service\";\r\nimport {DeckId, ThemeId} from \"../app.component\";\r\nimport {ActiveSongs} from \"../../services/activeSongs.service\";\r\nimport {ActiveSong} from \"../../services/activeSong\";\r\nimport {AnimationFrames} from \"../../services/animationFrames.service\";\r\nimport {Observable} from \"rxjs\";\r\nimport {FormatTimePipe} from \"../../pipes/formatTime.pipe\";\r\nimport {SongDb} from \"../../services/db/songDb.service\";\r\nimport {AudioUtil} from \"../../services/audio/audioUtil.service\";\r\n\r\n@Component({\r\n    selector: 'deck',\r\n    templateUrl: 'deck.component.html',\r\n    styleUrls: ['deck.component.css']\r\n})\r\nexport class DeckComponent implements OnInit, AfterViewInit {\r\n    @Input() deckId: DeckId;\r\n    activeSong: ActiveSong;\r\n    deckElem: HTMLElement;\r\n    waveformElem: HTMLCanvasElement;\r\n    formattedSongOffset$: Observable<string>;\r\n    loadingSong = false;\r\n    cueMode = CueMode.Jump;\r\n\r\n    CueMode = CueMode;\r\n\r\n    songOffsetAtLastDraw: number;\r\n\r\n    inputType: DeckInputType = DeckInputType.File;\r\n    inputTypeOptions = [\r\n        {label: 'File', type: DeckInputType.File},\r\n        {label: 'Live', type: DeckInputType.Live}\r\n    ];\r\n\r\n    get deckName() {\r\n        return DeckId[this.deckId];\r\n    }\r\n\r\n    constructor(\r\n        private elementRef: ElementRef,\r\n        private waveformUtil: WaveformUtil,\r\n        private audioUtil: AudioUtil,\r\n        private activeSongs: ActiveSongs,\r\n        private animationFrames: AnimationFrames,\r\n        private formatTime: FormatTimePipe,\r\n        private songDb: SongDb\r\n    ) {\r\n        animationFrames.frames.subscribe((time) => this.onAnimationFrame());\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.activeSong = this.activeSongs.getActiveSong(this.deckId);\r\n\r\n        this.formattedSongOffset$ = Observable.interval(100 /* ms */)\r\n            .map(() => {\r\n                if (this.activeSong.isLoaded) {\r\n                    return this.formatTime.transform(this.activeSong.currentSongOffset);\r\n                } else {\r\n                    return '0:00';\r\n                }\r\n            })\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.deckElem = <HTMLElement>this.elementRef.nativeElement;\r\n        this.waveformElem = <HTMLCanvasElement>this.deckElem.querySelector('.waveform');\r\n        this.waveformElem.width = this.waveformElem.offsetWidth;\r\n        this.waveformElem.getContext('2d').translate(0.5, 0);\r\n    }\r\n\r\n    loadSong(song: Song) {\r\n        this.loadingSong = true;\r\n        this.activeSong.loadSong(song)\r\n            .then(\r\n                () => {\r\n                    this.songOffsetAtLastDraw = undefined;\r\n                    this.loadingSong = false;\r\n                },\r\n                () => this.loadingSong = false\r\n            );\r\n    }\r\n\r\n    play() {\r\n        if (this.activeSong.isLoaded && !this.activeSong.isPlaying) {\r\n            this.activeSong.playBuffer();\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this.activeSong.isLoaded && this.activeSong.isPlaying) {\r\n            this.activeSong.pauseBuffer();\r\n        }\r\n    }\r\n\r\n    onAnimationFrame() {\r\n        if (this.activeSong.isLoaded) {\r\n            this.drawWaveform(this.activeSong.song.details);\r\n        }\r\n    }\r\n\r\n    drawWaveform(songDetails: SongDetails) {\r\n        let positiveSamples = this.waveformUtil.projectWaveform(\r\n            songDetails.positiveSamples,\r\n            songDetails.positiveSamples.length / songDetails.lengthSeconds,\r\n            this.waveformElem.width\r\n        );\r\n\r\n        let negativeSamples = this.waveformUtil.projectWaveform(\r\n            songDetails.negativeSamples,\r\n            songDetails.negativeSamples.length / songDetails.lengthSeconds,\r\n            this.waveformElem.width\r\n        );\r\n\r\n        let currentSongOffset = this.activeSong.currentSongOffset;\r\n\r\n        let relativeSongOffset = currentSongOffset / this.activeSong.song.details.lengthSeconds;\r\n        let curSample = Math.round(relativeSongOffset * this.waveformElem.width);\r\n\r\n        let drawFromX = 0;\r\n        let drawToX = this.waveformElem.width;\r\n\r\n        if (this.songOffsetAtLastDraw !== undefined) {\r\n            let timeElapsed = currentSongOffset - this.songOffsetAtLastDraw;\r\n            let redrawWidth = this.waveformElem.width * (timeElapsed / this.activeSong.song.details.lengthSeconds);\r\n\r\n            if (redrawWidth < this.waveformElem.width) {\r\n                if (redrawWidth > 0) {\r\n                    drawFromX = Math.max(curSample - Math.ceil(redrawWidth), 0);\r\n                    drawToX = curSample;\r\n                } else {\r\n                    drawFromX = curSample;\r\n                    drawToX = Math.min(curSample + Math.ceil(-redrawWidth), this.waveformElem.width);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.songOffsetAtLastDraw = currentSongOffset;\r\n\r\n        this.waveformUtil.drawWaveform({\r\n            canvas: this.waveformElem,\r\n            themeId: ThemeId.fromDeckId(this.deckId),\r\n            positiveSamples,\r\n            negativeSamples,\r\n            firstColorPixel: curSample,\r\n            drawFromX,\r\n            drawToX\r\n        });\r\n        this.waveformUtil.overlayCues(this.waveformElem, songDetails.cues, 0, songDetails.lengthSeconds)\r\n    }\r\n\r\n    onCanvasClick(event) {\r\n        if (this.activeSong.isLoaded) {\r\n            let relativeSongOffse = event.offsetX / this.waveformElem.offsetWidth;\r\n            this.activeSong.setSongOffset(relativeSongOffse * this.activeSong.song.details.lengthSeconds);\r\n        }\r\n    }\r\n\r\n    cueClicked(index) {\r\n        if (this.activeSong.isLoaded) {\r\n            let cues = this.activeSong.song.details.cues;\r\n            let updateRequired = false;\r\n\r\n\r\n            switch (this.cueMode) {\r\n                case CueMode.Jump: {\r\n                    if (cues[index]) {\r\n                        this.activeSong.setSongOffset(cues[index]);\r\n                    } else {\r\n                        cues[index] = this.activeSong.currentSongOffset;\r\n                        updateRequired = true;\r\n                    }\r\n                    break;\r\n                }\r\n                case CueMode.Set: {\r\n                    cues[index] = this.activeSong.currentSongOffset;\r\n                    this.cueMode = CueMode.Jump;\r\n                    updateRequired = true;\r\n                    break;\r\n                }\r\n                case CueMode.Delete: {\r\n                    cues[index] = undefined;\r\n                    this.cueMode = CueMode.Jump;\r\n                    updateRequired = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (updateRequired) {\r\n                this.activeSong.song.details.waveformDataUrl = this.waveformUtil.generateDataUrlWaveform(\r\n                    this.activeSong.song.details.positiveSamples,\r\n                    this.activeSong.song.details.negativeSamples,\r\n                    this.audioUtil.context.sampleRate,\r\n                    150,\r\n                    35,\r\n                    ThemeId.DEFAULT,\r\n                    this.activeSong.song.details.cues,\r\n                    0,\r\n                    this.activeSong.song.details.lengthSeconds\r\n                );\r\n\r\n                this.songDb.updateSongDetails(this.activeSong.song.details);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    indexArray(num: number) {\r\n        return Array(num).fill(0).map((x, i) => i);\r\n    }\r\n}\r\n\r\nexport enum DeckInputType {File, Live}\r\nexport enum CueMode {Jump, Set, Delete}","import {Injectable} from \"@angular/core\";\r\nimport {BehaviorSubject, Observable} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class SideNav {\r\n    private state = new BehaviorSubject(SideNavState.Closed);\r\n\r\n    get state$() : Observable<SideNavState> {\r\n        return this.state.asObservable();\r\n    }\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    setState(state: SideNavState) {\r\n        this.state.next(state);\r\n    }\r\n\r\n    getState(): SideNavState {\r\n        return this.state.getValue();\r\n    }\r\n}\r\n\r\nexport enum SideNavState {\r\n    Closed, Audio, Midi\r\n}","import {Injectable} from \"@angular/core\";\r\nimport MIDIAccess = WebMidi.MIDIAccess;\r\n\r\n@Injectable()\r\nexport class MidiUtil {\r\n\r\n    midiInitialized: Promise<MIDIAccess>;\r\n    midi: MIDIAccess;\r\n\r\n    private resolveMidiInitialized: (access: MIDIAccess) => void;\r\n    private rejectMidiInitialized: (rejection?) => void;\r\n\r\n    constructor() {\r\n        this.midiInitialized = new Promise((resolve, reject) => {\r\n            this.resolveMidiInitialized = resolve;\r\n            this.rejectMidiInitialized = reject;\r\n        });\r\n    }\r\n\r\n    initialize() {\r\n        if (navigator.requestMIDIAccess) {\r\n            navigator.requestMIDIAccess()\r\n                .then((midiAccess) => {\r\n                    this.midi = midiAccess;\r\n                    this.resolveMidiInitialized(midiAccess);\r\n                })\r\n                .catch(() => {\r\n                    this.rejectMidiInitialized();\r\n                    console.error(\"No access to MIDI devices or your browser doesn't support WebMIDI API\");\r\n                });\r\n        } else {\r\n            this.rejectMidiInitialized();\r\n            console.error(\"No MIDI support in your browser.\");\r\n        }\r\n    }\r\n\r\n    parseRawMsg(rawMessage: Uint8Array): MidiMsg {\r\n        let byte1 = rawMessage[0];\r\n        let byte2 = rawMessage[1];\r\n        let byte3 = rawMessage[2];\r\n\r\n        let msgType: MidiMsgType = byte1 >> 4;\r\n        let channel = (byte1 & 0b00001111) + 1;\r\n\r\n        let subType: number;\r\n        let amount: number;\r\n\r\n        switch (msgType) {\r\n            case MidiMsgType.ProgramChange: {\r\n                subType = byte2;\r\n                amount = 1;\r\n                break;\r\n            }\r\n            case MidiMsgType.ChannelAfterTouch: {\r\n                subType = 0;\r\n                amount = byte2 / 127;\r\n                break;\r\n            }\r\n            case MidiMsgType.PitchBend: {\r\n                subType = 0;\r\n                amount = ((byte3 << 7) + byte2) / ((1 << 14) - 1);\r\n                break;\r\n            }\r\n            default: {\r\n                subType = byte2;\r\n                amount = byte3 / 127;\r\n            }\r\n        }\r\n\r\n        return {msgType, channel, subType, amount};\r\n    }\r\n\r\n    serializeMsg(msg: MidiMsg): number[] {\r\n        let byte1 = (msg.msgType << 4) + (msg.channel - 1);\r\n\r\n        let byte2;\r\n        let byte3;\r\n\r\n        switch (msg.msgType) {\r\n            case MidiMsgType.ProgramChange: {\r\n                byte2 = msg.subType;\r\n                byte3 = 0;\r\n                break;\r\n            }\r\n            case MidiMsgType.ChannelAfterTouch: {\r\n                byte2 = Math.round(msg.amount * 127);\r\n                byte3 = 0;\r\n                break;\r\n            }\r\n            case MidiMsgType.PitchBend: {\r\n                let integerAmount = Math.round(msg.amount * ((1 << 14) - 1));\r\n                byte2 = integerAmount & 0b1111111;\r\n                byte3 = integerAmount >> 7;\r\n                break;\r\n            }\r\n            default: {\r\n                byte2 = msg.subType;\r\n                byte3 = Math.round(msg.amount * 127);\r\n            }\r\n        }\r\n\r\n        return [byte1, byte2, byte3];\r\n    }\r\n}\r\n\r\nexport enum MidiMsgType {\r\n    NoteOff = 8,\r\n    NoteOn = 9,\r\n    PolyAfterTouch = 10,\r\n    CC = 11,\r\n    ProgramChange = 12,\r\n    ChannelAfterTouch = 13,\r\n    PitchBend = 14,\r\n    SysEx = 15\r\n}\r\n\r\nexport interface MidiControl {\r\n    msgType: MidiMsgType,\r\n    //1 - 16\r\n    channel: number;\r\n    //0 - 127\r\n    subType: number;\r\n}\r\n\r\nexport interface MidiMsg extends MidiControl {\r\n    //0 - 1\r\n    amount: number;\r\n}","import {Component, ViewChildren, QueryList, AfterViewInit} from '@angular/core';\r\nimport {DeckComponent} from \"./deck/deck.component\";\r\nimport {LoadSongEvent} from \"./library/library.component\";\r\nimport {SideNav, SideNavState} from \"../services/sidenav.service\";\r\nimport {MidiUtil} from \"../services/midi/midiUtil.service\";\r\nimport {Db} from \"../services/db/db.service\";\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'app.component.html',\r\n    styleUrls: ['app.component.css']\r\n})\r\nexport class AppComponent implements AfterViewInit {\r\n    DeckId = DeckId;\r\n    @ViewChildren(DeckComponent) decksQuery: QueryList<DeckComponent>;\r\n    deck1: DeckComponent;\r\n    deck2: DeckComponent;\r\n\r\n    SideNavState = SideNavState;\r\n\r\n    constructor(public sideNav: SideNav, midiUtil: MidiUtil, db: Db) {\r\n        db.initialize();\r\n        midiUtil.initialize();\r\n\r\n        if ('serviceWorker' in navigator) {\r\n            navigator['serviceWorker'].register('./sw.js');\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        [this.deck1, this.deck2] = this.decksQuery.toArray()\r\n    }\r\n\r\n    onLoadSong({song, deckId}: LoadSongEvent) {\r\n        let deck: DeckComponent = this[`deck${deckId}`];\r\n        deck.loadSong(song);\r\n    }\r\n\r\n    onCloseSideNav() {\r\n        this.sideNav.setState(SideNavState.Closed);\r\n    }\r\n}\r\n\r\nexport enum DeckId {LEFT = 1, RIGHT = 2}\r\n\r\nenum ThemeId {DEFAULT = 0, DECK1 = 1, DECK2 = 2}\r\nnamespace ThemeId {\r\n    export function fromDeckId(deckId: DeckId): ThemeId {\r\n        switch (deckId) {\r\n            case DeckId.LEFT:\r\n                return ThemeId.DECK1;\r\n            case DeckId.RIGHT:\r\n                return ThemeId.DECK2;\r\n        }\r\n    }\r\n}\r\n\r\nexport {ThemeId};","import {Component, EventEmitter, Output} from \"@angular/core\";\r\nimport {AudioUtil} from \"../../services/audio/audioUtil.service\";\r\nimport {SongDb} from \"../../services/db/songDb.service\";\r\nimport {SongDetails} from \"../../models/songDetails\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Song} from \"../../models/song\";\r\nimport {DeckId} from \"../app.component\";\r\nimport firstBy from \"thenby\";\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {FormatTimePipe} from '../../pipes/formatTime.pipe';\r\n\r\ndeclare let jsmediatags;\r\n\r\n@Component({\r\n    selector: 'library',\r\n    templateUrl: 'library.component.html',\r\n    styleUrls: ['library.component.css']\r\n})\r\nexport class LibraryComponent {\r\n    fileIsOverDrop = false;\r\n\r\n    uploadingFiles = false;\r\n    totalFilesToUpload;\r\n    numFilesUploaded;\r\n\r\n    filteredSongDetails: Observable<SongDetails[]>;\r\n    DeckId = DeckId;\r\n    @Output() onLoadSong = new EventEmitter<LoadSongEvent>();\r\n\r\n    searchInput = new BehaviorSubject('').distinctUntilChanged();\r\n\r\n    constructor(private audioUtil: AudioUtil, private songDb: SongDb, private formatTimePipe: FormatTimePipe) {\r\n        let allSongDetails = this.songDb.getAllSongDetails()\r\n            .map((songDetails: SongDetails[]) => {\r\n                return songDetails.sort(\r\n                    (<any>firstBy)('artist', {ignoreCase: true})\r\n                        .thenBy('year')\r\n                        .thenBy('album', {ignoreCase: true})\r\n                        .thenBy('track')\r\n                );\r\n            });\r\n\r\n        this.filteredSongDetails = Observable.combineLatest(\r\n            allSongDetails,\r\n            this.searchInput,\r\n            (details, input) => this.filterSongDetails(details, input)\r\n        );\r\n    }\r\n    \r\n    public onFileOverDrop(fileIsOver: boolean): void {\r\n        this.fileIsOverDrop = fileIsOver;\r\n    }\r\n\r\n    public uploadFiles(files: File[]): void {\r\n        this.uploadingFiles = true;\r\n        this.totalFilesToUpload = files.length;\r\n        this.numFilesUploaded = 0;\r\n\r\n        //For each file...\r\n        //  Read media tags\r\n        //  Read as audio buffer\r\n        //  Add to song db\r\n        //  Update progress bar\r\n        let loadFilePromises = files.map((file) => {\r\n            let readMediaTagsPromise = new Promise((resolve) => {\r\n                jsmediatags.read(file, {\r\n                    onSuccess: (result) => resolve(result.tags),\r\n                    onError: (error) => resolve(null)\r\n                });\r\n            });\r\n\r\n            let arrayBuffer: ArrayBuffer;\r\n            let readAudioBufferPromise = this.readAsArrayBuffer(file)\r\n                .then(buf => {\r\n                    arrayBuffer = buf;\r\n                    //I believe calling decodeAudioData copies the array buffer into a web worker which makes it\r\n                    //inaccessible on the main thread so we need to make a copy of it. Although this didn't happen in\r\n                    //older versions of Chrome. If we don't make a copy then the following error is thrown when the\r\n                    //audio buffer is later saved to the DB:\r\n                    //Failed to execute 'add' on 'IDBObjectStore': An ArrayBuffer is neutered and could not be cloned.\r\n                    let bufCopyForAudioData = this.copyArrayBuffer(buf);\r\n                    return this.audioUtil.context.decodeAudioData(bufCopyForAudioData);\r\n                });\r\n\r\n            return Promise.all([readAudioBufferPromise, readMediaTagsPromise])\r\n                .then(([audioBuffer, tags]: [AudioBuffer, any]) => {\r\n                    return this.songDb.addSong(arrayBuffer, audioBuffer, tags, file.name);\r\n                })\r\n                .then(() => {\r\n                    this.numFilesUploaded++;\r\n                });\r\n        });\r\n\r\n        let onUploadingFinished = () => {\r\n            this.uploadingFiles = false;\r\n            this.totalFilesToUpload = undefined;\r\n            this.numFilesUploaded = undefined;\r\n        };\r\n\r\n        Promise.all(loadFilePromises)\r\n            .then(onUploadingFinished)\r\n            .catch((error) => {\r\n                console.error('Failed to upload songs', error);\r\n                onUploadingFinished();\r\n            });\r\n    }\r\n\r\n    public deleteSong(songDetails: SongDetails) {\r\n        this.songDb.deleteSong(songDetails);\r\n    }\r\n\r\n    public loadSong(songDetails, deckId) {\r\n        this.songDb.getSong(songDetails)\r\n            .then((song: Song) => {\r\n                this.onLoadSong.emit({song, deckId});\r\n            });\r\n    }\r\n\r\n    public getLoadingMessage() {\r\n        if(this.totalFilesToUpload > 1) {\r\n            return `Loading ${this.numFilesUploaded} of ${this.totalFilesToUpload}`;\r\n        } else {\r\n            return 'Loading';\r\n        }\r\n    }\r\n\r\n    //Taken from https://stackoverflow.com/a/22114687/373655\r\n    private copyArrayBuffer(src)  {\r\n        var dst = new ArrayBuffer(src.byteLength);\r\n        new Uint8Array(dst).set(new Uint8Array(src));\r\n        return dst;\r\n    }\r\n\r\n    private readAsArrayBuffer(file): Promise<ArrayBuffer> {\r\n        let arrayBuffer: ArrayBuffer;\r\n\r\n        return new Promise<ArrayBuffer>((resolve, reject) => {\r\n            let reader = new FileReader();\r\n            reader.readAsArrayBuffer(file);\r\n            reader.onload = () => {\r\n                arrayBuffer = reader.result;\r\n                resolve(reader.result);\r\n            };\r\n            reader.onerror = reject;\r\n        });\r\n    }\r\n\r\n    private filterSongDetails(allSongDetails, searchInput): SongDetails[] {\r\n        searchInput = searchInput.trim();\r\n        if(!searchInput) {\r\n            return allSongDetails;\r\n        }\r\n\r\n        let searchTokens = searchInput.split(' ');\r\n\r\n        return allSongDetails.filter((songDetails) => {\r\n            let allTokensMatchReducer = (previousTokensMatch, token) => previousTokensMatch && this.songDetailsMatchesToken(songDetails, token);\r\n            return searchTokens.reduce(allTokensMatchReducer, true);\r\n        });\r\n    }\r\n\r\n    private songDetailsMatchesToken(songDetails: SongDetails, token: string): boolean {\r\n        token = token.toLowerCase();\r\n        for(let fieldKey in songDetails) {\r\n            let field = songDetails[fieldKey];\r\n            if(songDetails.hasOwnProperty(fieldKey) && field !== undefined) {\r\n                let cmpStr: string;\r\n                switch(fieldKey) {\r\n                    case 'title':\r\n                    case 'album':\r\n                    case 'artist':\r\n                    case 'track':\r\n                    case 'year':\r\n                    case 'genre':\r\n                        cmpStr = field.toString();\r\n                        break;\r\n                    case 'lengthSeconds':\r\n                        cmpStr = this.formatTimePipe.transform(field);\r\n                        break;\r\n                }\r\n\r\n                if(cmpStr && cmpStr.toLowerCase().indexOf(token) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport interface LoadSongEvent {\r\n    song: Song,\r\n    deckId: DeckId\r\n}","import {\r\n    Directive,\r\n    EventEmitter,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n} from '@angular/core';\r\n\r\n@Directive({ selector: '[fileDrop]' })\r\nexport class FileDropDirective {\r\n    @Output() public fileOver = new EventEmitter<boolean>();\r\n    @Output() public onFileDrop = new EventEmitter<File[]>();\r\n\r\n    private element: ElementRef;\r\n\r\n    public constructor(\r\n        element: ElementRef\r\n    ) {\r\n        this.element = element;\r\n    }\r\n\r\n    dragLevel = 0;\r\n\r\n    @HostListener('dragover', ['$event'])\r\n    public onDragOver(event: any): void {\r\n        const transfer = this.getDataTransfer(event);\r\n\r\n        if (!this.haveFiles(transfer.types)) {\r\n            return;\r\n        }\r\n\r\n        transfer.dropEffect = 'copy';\r\n        this.preventAndStop(event);\r\n    }\r\n\r\n    @HostListener('dragenter', ['$event'])\r\n    public onDragEnter(event: any): void {\r\n        this.dragLevel++;\r\n        this.emitFileOver();\r\n    }\r\n\r\n    @HostListener('dragleave', ['$event'])\r\n    public onDragLeave(event: any): void {\r\n        this.dragLevel--;\r\n\r\n        this.preventAndStop(event);\r\n        if(this.dragLevel === 0) {\r\n            this.emitFileOver();\r\n        }\r\n    }\r\n\r\n    @HostListener('drop', ['$event'])\r\n    public onDrop(event: any): void {\r\n        const transfer = this.getDataTransfer(event);\r\n\r\n        if (!transfer) {\r\n            return;\r\n        }\r\n\r\n        this.preventAndStop(event);\r\n        this.dragLevel = 0;\r\n        this.emitFileOver();\r\n        this.onFileDrop.emit(Array.from(transfer.files));\r\n    }\r\n\r\n    private emitFileOver(): void {\r\n        this.fileOver.emit(this.dragLevel > 0);\r\n    }\r\n\r\n    private getDataTransfer(event: any | any): DataTransfer {\r\n        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\r\n    }\r\n\r\n    private preventAndStop(event: any): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    private haveFiles(types: any): boolean {\r\n        if (!types) {\r\n            return false;\r\n        }\r\n\r\n        if (types.indexOf) {\r\n            return types.indexOf('Files') !== -1;\r\n        }\r\n\r\n        if (types.contains) {\r\n            return types.contains('Files');\r\n        }\r\n\r\n        return false;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {MidiMsg, MidiUtil} from \"./midiUtil.service\";\r\nimport {Subject, Observable} from \"rxjs\";\r\nimport {PreferencesDb} from \"../db/preferencesDb.service\";\r\nimport MIDIOutput = WebMidi.MIDIOutput;\r\nimport MIDIInput = WebMidi.MIDIInput;\r\nimport MIDIMessageEvent = WebMidi.MIDIMessageEvent;\r\n\r\n@Injectable()\r\nexport class MidiIo {\r\n\r\n    private enabledInputNames = new Set<string>();\r\n    private enabledOutputNames = new Set<string>();\r\n\r\n    private msg = new Subject<MidiMsg>();\r\n    devicesByName: { [name: string]: { input?: MIDIInput, output?: MIDIOutput } };\r\n    devices: Array<{ name: string, input?: MIDIInput, output?: MIDIOutput }>;\r\n\r\n\r\n    get msg$(): Observable<MidiMsg> {\r\n        return this.msg.asObservable();\r\n    }\r\n\r\n    constructor(private midiUtil: MidiUtil, private preferencesDb: PreferencesDb) {\r\n        this.midiUtil.midiInitialized.then(() => {\r\n            midiUtil.midi.onstatechange = () => {\r\n                this.retrieveDevices();\r\n            };\r\n            this.retrieveDevices();\r\n        });\r\n\r\n        preferencesDb.initialized.then(() => {\r\n            this.enabledOutputNames = preferencesDb.getEnabledMidiOutputNames();\r\n            preferencesDb.getEnabledMidiInputNames().forEach((name) => {\r\n                if (this.devicesByName[name]) {\r\n                    this.enableInput(name);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private retrieveDevices() {\r\n        this.devicesByName = {};\r\n\r\n        this.midiUtil.midi.inputs.forEach((input: MIDIInput) => {\r\n            this.devicesByName[input.name] = {input};\r\n\r\n            //This could occur if an input was saved as enabled in the preferences but the diver was not connected to\r\n            //the computer until after the app started.\r\n            if(this.inputIsEnabled(input.name) === false && this.enabledInputNames.has(input.name)) {\r\n                this.enableInput(input.name);\r\n            }\r\n        });\r\n\r\n        this.midiUtil.midi.outputs.forEach((output: MIDIOutput) => {\r\n            this.devicesByName[output.name] = this.devicesByName[output.name] || {};\r\n            this.devicesByName[output.name].output = output;\r\n        });\r\n\r\n        this.devices = [];\r\n        for (let name in this.devicesByName) {\r\n            let device = this.devicesByName[name];\r\n            this.devices.push({name, input: device.input, output: device.output});\r\n        }\r\n    }\r\n\r\n    inputIsEnabled(deviceName: string) {\r\n        let input = this.getDevice(deviceName).input;\r\n        return !!input && !!input['lastEventListener'];\r\n    }\r\n\r\n    enableInput(deviceName: string) {\r\n        this.enabledInputNames.add(deviceName);\r\n        this.saveInputPreferences();\r\n\r\n        let device = this.getDevice(deviceName);\r\n\r\n        if (device.input) {\r\n            device.input['lastEventListener'] = this.onInputMsg.bind(this);\r\n            device.input.addEventListener('midimessage', device.input['lastEventListener']);\r\n        }\r\n\r\n    }\r\n\r\n    disableInput(deviceName: string) {\r\n        let device = this.getDevice(deviceName);\r\n\r\n        if (device.input) {\r\n            if (device.input['lastEventListener']) {\r\n                device.input.removeEventListener('midimessage', device.input['lastEventListener']);\r\n                device.input['lastEventListener'] = undefined;\r\n            }\r\n            device.input.close();\r\n        }\r\n\r\n        this.enabledInputNames.delete(deviceName);\r\n        this.saveInputPreferences();\r\n    }\r\n\r\n    toggleInput(deviceName: string) {\r\n        if (this.inputIsEnabled(deviceName)) {\r\n            this.disableInput(deviceName);\r\n        } else {\r\n            this.enableInput(deviceName);\r\n        }\r\n    }\r\n\r\n    outputIsEnabled(deviceName: string) {\r\n        return this.enabledOutputNames.has(deviceName);\r\n    }\r\n\r\n    enableOutput(deviceName: string) {\r\n        this.enabledOutputNames.add(deviceName);\r\n        this.saveOutputPreferences();\r\n    }\r\n\r\n    disableOutput(deviceName: string) {\r\n        this.enabledOutputNames.delete(deviceName);\r\n        this.saveOutputPreferences();\r\n    }\r\n\r\n    toggleOutput(deviceName: string) {\r\n        if (this.outputIsEnabled(deviceName)) {\r\n            this.disableOutput(deviceName);\r\n        } else {\r\n            this.enableOutput(deviceName);\r\n        }\r\n    }\r\n\r\n    sendMessage(msg: MidiMsg) {\r\n        this.enabledOutputNames.forEach((name) => {\r\n            let device = this.getDevice(name);\r\n            if(device.output) {\r\n                device.output.send(this.midiUtil.serializeMsg(msg));\r\n            }\r\n        });\r\n    }\r\n\r\n    saveInputPreferences() {\r\n        this.preferencesDb.setEnabledMidiInputNames(this.enabledInputNames);\r\n    }\r\n\r\n    saveOutputPreferences() {\r\n        this.preferencesDb.setEnabledMidiOutputNames(this.enabledOutputNames);\r\n    }\r\n\r\n    //Always returns an object even if the device doesn't exist\r\n    getDevice(name: string) {\r\n        return this.devicesByName[name] || {};\r\n    }\r\n\r\n    private onInputMsg(msgEvent: MIDIMessageEvent) {\r\n        let msg = this.midiUtil.parseRawMsg(msgEvent.data);\r\n        this.msg.next(msg);\r\n    }\r\n}","import {Subject, Observable} from \"rxjs\";\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class DocumentEvents {\r\n    get mouseMove(): Observable<MouseEvent> {\r\n        return this.mouseMoveSubject.asObservable();\r\n    }\r\n\r\n    get mouseUp(): Observable<MouseEvent> {\r\n        return this.mouseUpSubject.asObservable();\r\n    }\r\n\r\n    get dragEnd(): Observable<MouseEvent> {\r\n        return this.dragEndSubject.asObservable();\r\n    }\r\n\r\n    get keyUp(): Observable<KeyboardEvent> {\r\n        return this.keyUpSubject.asObservable();\r\n    }\r\n\r\n    private mouseMoveSubject = new Subject();\r\n    private mouseUpSubject = new Subject();\r\n    private dragEndSubject = new Subject();\r\n    private keyUpSubject = new Subject();\r\n\r\n    constructor() {\r\n        document.addEventListener('mousemove', (event) => this.mouseMoveSubject.next(event));\r\n        document.addEventListener('mouseup', (event) => this.mouseUpSubject.next(event));\r\n        document.addEventListener('dragend', (event) => this.dragEndSubject.next(event));\r\n        document.addEventListener('keyup', (event) => this.keyUpSubject.next(event));\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {BehaviorSubject, Observable} from \"rxjs\";\r\nimport {MidiIo} from \"./midiIo.service\";\r\nimport {MidiMappingComponent} from \"../../app/midiMapping/midiMapping.component\";\r\nimport {MidiControl, MidiMsg} from \"./midiUtil.service\";\r\nimport {PreferencesDb} from \"../db/preferencesDb.service\";\r\nimport {DocumentEvents} from \"../documentEvents.service\";\r\n\r\n@Injectable()\r\nexport class MidiMapper {\r\n    private learnMode = new BehaviorSubject<boolean>(false);\r\n    activeLearnMappingComp: MidiMappingComponent;\r\n\r\n    private mappings = new Map<string, MidiMapping>();\r\n    private mappingComps = new Map<string, MidiMappingComponent>();\r\n\r\n    get learnMode$(): Observable<boolean> {\r\n        return this.learnMode.asObservable();\r\n    }\r\n\r\n    constructor(midiIo: MidiIo, private preferencesDb: PreferencesDb, documentEvents: DocumentEvents) {\r\n        midiIo.msg$.subscribe((msg) => this.onInputMsg(msg));\r\n\r\n        preferencesDb.initialized.then(() => {\r\n            this.mappings = preferencesDb.getMidiMappings();\r\n        });\r\n\r\n        documentEvents.keyUp.subscribe((event: KeyboardEvent) => {\r\n            if(this.learnMode.getValue()) {\r\n                if(event.code === 'Backspace' || event.code === 'Delete') {\r\n                    if(this.activeLearnMappingComp) {\r\n                        this.mappings.delete(this.activeLearnMappingComp.elemId);\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    setLearnMode(value: boolean) {\r\n        !value && (this.activeLearnMappingComp = undefined);\r\n        this.learnMode.next(value);\r\n    }\r\n\r\n    toggleLearnMode() {\r\n        this.setLearnMode(!this.learnMode.getValue());\r\n    }\r\n\r\n    getLearnMode(): boolean {\r\n        return this.learnMode.getValue();\r\n    }\r\n\r\n    registerMappingComp(id: string, comp: MidiMappingComponent) {\r\n        this.mappingComps.set(id, comp);\r\n    }\r\n\r\n    setMapping(id: string, mapping: MidiMapping) {\r\n        this.mappings.set(id, mapping);\r\n        this.preferencesDb.setMidiMappings(this.mappings);\r\n    }\r\n\r\n    getMapping(id: string): MidiMapping {\r\n        return this.mappings.get(id);\r\n    }\r\n\r\n    private onInputMsg(msg: MidiMsg) {\r\n        if (this.activeLearnMappingComp) {\r\n            this.activeLearnMappingComp.onLearnMsg(msg);\r\n        } else if (!this.getLearnMode()) {\r\n            this.mappings.forEach((mapping: MidiMapping, id) => {\r\n                if (\r\n                    mapping.control.msgType === msg.msgType &&\r\n                    mapping.control.channel === msg.channel &&\r\n                    mapping.control.subType === msg.subType\r\n                ) {\r\n                    this.mappingComps.get(id).onInputMsg(msg);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport interface MidiMapping {\r\n    control: MidiControl,\r\n    type: MappingType\r\n}\r\n\r\nexport enum MappingType {\r\n    //Map the amount directly to the control\r\n    Amount,\r\n        //Toggle the control whenever a non-zero midi amount is sent\r\n        //TODO use latch by default for note messages\r\n    Latch\r\n}","import {Component} from \"@angular/core\";\r\nimport {SideNav, SideNavState} from \"../../services/sidenav.service\";\r\nimport {MidiMapper} from \"../../services/midi/midiMapper.service\";\r\n\r\n@Component({\r\n    selector: 'toolbar',\r\n    templateUrl: 'toolbar.component.html',\r\n    styleUrls: ['toolbar.component.css']\r\n})\r\nexport class ToolbarComponent {\r\n    constructor(private sideNav: SideNav, public midiMapper: MidiMapper) {\r\n\r\n    }\r\n\r\n    toggleMidiSettings() {\r\n        if(this.sideNav.getState() === SideNavState.Midi) {\r\n            this.sideNav.setState(SideNavState.Closed);\r\n        } else {\r\n            this.sideNav.setState(SideNavState.Midi);\r\n        }\r\n    }\r\n\r\n    toggleAudioSettings() {\r\n        if(this.sideNav.getState() === SideNavState.Audio) {\r\n            this.sideNav.setState(SideNavState.Closed);\r\n        } else {\r\n            this.sideNav.setState(SideNavState.Audio);\r\n        }\r\n    }\r\n\r\n    toggleFullScreen() {\r\n        let doc = <any>document;\r\n\r\n        //Taken from http://stackoverflow.com/a/10627148/373655\r\n        if (!this.isFullScreen()) {\r\n            if (doc.documentElement.requestFullScreen) {\r\n                doc.documentElement.requestFullScreen();\r\n            } else if (doc.documentElement.mozRequestFullScreen) {\r\n                doc.documentElement.mozRequestFullScreen();\r\n            } else if (doc.documentElement.webkitRequestFullScreen) {\r\n                doc.documentElement.webkitRequestFullScreen(Element['ALLOW_KEYBOARD_INPUT']);\r\n            }\r\n        } else {\r\n            if (doc.cancelFullScreen) {\r\n                doc.cancelFullScreen();\r\n            } else if (doc.mozCancelFullScreen) {\r\n                doc.mozCancelFullScreen();\r\n            } else if (doc.webkitCancelFullScreen) {\r\n                doc.webkitCancelFullScreen();\r\n            }\r\n        }\r\n    }\r\n\r\n    isFullScreen() {\r\n        let doc = <any>document;\r\n        return !doc.fullScreenElement && (doc.mozFullScreen || doc.webkitIsFullScreen);\r\n    }\r\n}","import {Component} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'spinner',\r\n    template: `\r\n<div class=\"overlay\"></div>\r\n<div class='uil-ripple-css'> \r\n    <div></div> \r\n    <div></div> \r\n</div>`,\r\n    styles: [`\r\n@keyframes uil-ripple {\r\n  0% {\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 0;\r\n    margin: 0 0 0 0;\r\n  }\r\n  33% {\r\n    width: 44%;\r\n    height: 44%;\r\n    margin: -22% 0 0 -22%;\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    width: 88%;\r\n    height: 88%;\r\n    margin: -44% 0 0 -44%;\r\n    opacity: 0;\r\n  }\r\n}\r\n.uil-ripple-css {\r\n  position: absolute;\r\n  width: 64px;\r\n  height: 64px;\r\n  transform: translate(-50%, -50%);\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n.uil-ripple-css div {\r\n  position: absolute;\r\n  z-index: 2;\r\n  top: 50%;\r\n  left: 50%;\r\n  margin: 0;\r\n  width: 0;\r\n  height: 0;\r\n  opacity: 0;\r\n  border-radius: 50%;\r\n  border-width: 4px;\r\n  border-style: solid;\r\n  animation: uil-ripple 2s linear infinite;\r\n}\r\n.uil-ripple-css div:nth-of-type(1) {\r\n  border-color: #165eaa;\r\n}\r\n.uil-ripple-css div:nth-of-type(2) {\r\n  border-color: #632b9b;\r\n  animation-delay: 1s;\r\n}\r\n.overlay {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n    z-index: 1;\r\n    top: 0;\r\n}\r\n`]\r\n})\r\nexport class SpinnerComponent {\r\n    constructor() {\r\n\r\n    }\r\n}","import {Component, ViewChild, AfterViewInit, ElementRef} from \"@angular/core\";\r\nimport {ActiveSongs} from \"../../services/activeSongs.service\";\r\nimport {ActiveSong} from \"../../services/activeSong\";\r\nimport {DeckId, ThemeId} from \"../app.component\";\r\nimport {Song} from \"../../models/song\";\r\nimport {WaveformUtil, DrawWaveformOptions} from \"../../services/audio/waveformUtil.service\";\r\nimport {AudioUtil} from \"../../services/audio/audioUtil.service\";\r\nimport {AnimationFrames} from \"../../services/animationFrames.service\";\r\nimport {DocumentEvents} from \"../../services/documentEvents.service\";\r\nimport {CrossfaderChangeEvent} from \"./crossfader/crossfader.component\";\r\nimport {AudioOutput} from \"../../services/audioOutput.service\";\r\n\r\n@Component({\r\n    selector: 'center-controls',\r\n    templateUrl: 'centerControls.component.html',\r\n    styleUrls: ['centerControls.component.css']\r\n})\r\nexport class CenterControlsComponent implements AfterViewInit {\r\n    DeckId = DeckId;\r\n\r\n    deck1ActiveSong: ActiveSong;\r\n    deck2ActiveSong: ActiveSong;\r\n\r\n    activeScrubDeck: DeckId;\r\n    scrubOrigSongOffset: number;\r\n    scrubOrigScreenX: number;\r\n    resumePlayingAfterScrub: boolean;\r\n    song1PixelOffsetAtLastDraw: number;\r\n    song2PixelOffsetAtLastDraw: number;\r\n\r\n    @ViewChild('deck1Canvas') deck1ElementRef: ElementRef;\r\n    @ViewChild('deck2Canvas') deck2ElementRef: ElementRef;\r\n\r\n    get deck1Canvas(): HTMLCanvasElement {\r\n        return this.deck1ElementRef.nativeElement;\r\n    }\r\n\r\n    get deck2Canvas(): HTMLCanvasElement {\r\n        return this.deck2ElementRef.nativeElement;\r\n    }\r\n\r\n    constructor(\r\n        private activeSongs: ActiveSongs,\r\n        private waveformUtil: WaveformUtil,\r\n        private audioUtil: AudioUtil,\r\n        private animationFrames: AnimationFrames,\r\n        private documentEvents: DocumentEvents,\r\n        public audioOutput: AudioOutput\r\n    ) {\r\n        this.deck1ActiveSong = activeSongs.getActiveSong(DeckId.LEFT);\r\n        this.deck2ActiveSong = activeSongs.getActiveSong(DeckId.RIGHT);\r\n\r\n        this.deck1ActiveSong.songObservable.subscribe((song: Song) => this.onSongChange(DeckId.LEFT, song));\r\n        this.deck2ActiveSong.songObservable.subscribe((song: Song) => this.onSongChange(DeckId.RIGHT, song));\r\n\r\n        animationFrames.frames.subscribe((time) => this.onAnimationFrame());\r\n\r\n        this.documentEvents.mouseMove.subscribe((event) => this.onMouseMove(event));\r\n        this.documentEvents.mouseUp.subscribe((event) => this.endScrub(event));\r\n        this.documentEvents.dragEnd.subscribe((event) => this.endScrub(event));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.deck1Canvas.width = this.deck1Canvas.offsetWidth;\r\n        this.deck2Canvas.width = this.deck2Canvas.offsetWidth;\r\n\r\n        this.deck1Canvas.getContext('2d').translate(0.5, 0);\r\n        this.deck2Canvas.getContext('2d').translate(0.5, 0);\r\n    }\r\n\r\n    onAnimationFrame() {\r\n        if (this.deck1ActiveSong.isLoaded) {\r\n            this.drawSong(DeckId.LEFT, this.deck1ActiveSong.song);\r\n        }\r\n\r\n        if (this.deck2ActiveSong.isLoaded) {\r\n            this.drawSong(DeckId.RIGHT, this.deck2ActiveSong.song);\r\n        }\r\n    }\r\n\r\n    onSongChange(deckId: DeckId, song: Song) {\r\n        this.setPixelOffsetAtLastDraw(undefined, deckId);\r\n        this.drawSong(deckId, song);\r\n    }\r\n\r\n    setPixelOffsetAtLastDraw(offset: number, deckId: DeckId) {\r\n      if(deckId === DeckId.LEFT) {\r\n          this.song1PixelOffsetAtLastDraw = offset;\r\n      }  else {\r\n          this.song2PixelOffsetAtLastDraw = offset;\r\n      }\r\n    }\r\n\r\n    getPixelOffsetAtLastDraw(deckId: DeckId): number {\r\n        if(deckId === DeckId.LEFT) {\r\n            return this.song1PixelOffsetAtLastDraw;\r\n        }  else {\r\n            return this.song2PixelOffsetAtLastDraw;\r\n        }\r\n    }\r\n\r\n    drawSong(deckId: DeckId, song: Song) {\r\n        let waveformCanvas;\r\n        let drawOptions: DrawWaveformOptions;\r\n        let waveformName;\r\n        let activeSong: ActiveSong;\r\n\r\n        switch (deckId) {\r\n            case DeckId.LEFT: {\r\n                waveformCanvas = this.deck1Canvas;\r\n                waveformName = 'negativeSamples';\r\n                activeSong = this.deck1ActiveSong;\r\n                break;\r\n            }\r\n            case DeckId.RIGHT: {\r\n                waveformCanvas = this.deck2Canvas;\r\n                waveformName = 'positiveSamples';\r\n                activeSong = this.deck2ActiveSong;\r\n            }\r\n        }\r\n\r\n        let currentSongOffset = activeSong.currentSongOffset;\r\n\r\n        //TODO: when tempo slider is set multiple this by it\r\n        let compressedSampleRate = this.audioUtil.context.sampleRate / 100;\r\n        let startTime = currentSongOffset - 3;\r\n        let endTime = currentSongOffset + 3;\r\n\r\n        let drawFromX = 0;\r\n        let drawToX = waveformCanvas.width;\r\n\r\n        let pixelOffset = Math.round(currentSongOffset * waveformCanvas.width/ 6);\r\n\r\n        if(this.getPixelOffsetAtLastDraw(deckId) !== undefined) {\r\n            let redrawWidth = pixelOffset - this.getPixelOffsetAtLastDraw(deckId);\r\n\r\n            if(Math.abs(redrawWidth) < waveformCanvas.width) {\r\n                if(redrawWidth >= 0) {\r\n                    drawFromX = waveformCanvas.width - redrawWidth;\r\n                    drawToX = waveformCanvas.width;\r\n                } else {\r\n                    drawFromX = 0;\r\n                    drawToX = -redrawWidth;\r\n                }\r\n\r\n                if(redrawWidth !== 0) {\r\n                    let canvasCtx = waveformCanvas.getContext('2d');\r\n                    let imageData = canvasCtx.getImageData(0, 0, waveformCanvas.width, waveformCanvas.height);\r\n                    //canvasCtx.clearRect(0,0, waveformCanvas.width, waveformCanvas.height);\r\n                    canvasCtx.putImageData(imageData, -redrawWidth, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setPixelOffsetAtLastDraw(pixelOffset, deckId);\r\n\r\n        drawOptions = {\r\n            canvas: waveformCanvas,\r\n            themeId: ThemeId.fromDeckId(deckId),\r\n            useGradient: false,\r\n            drawFromX,\r\n            drawToX\r\n        };\r\n        drawOptions[waveformName] = this.waveformUtil.projectWaveform(song.waveformCompressed100x, compressedSampleRate, waveformCanvas.width, startTime, endTime);\r\n\r\n        this.waveformUtil.drawWaveform(drawOptions);\r\n        this.waveformUtil.overlayCues(waveformCanvas, song.details.cues, startTime, 6, deckId === DeckId.RIGHT);\r\n    }\r\n\r\n    onMouseMove(event: MouseEvent) {\r\n        if(this.activeScrubDeck) {\r\n            let activeSong = this.getActiveSongFromDeckId(this.activeScrubDeck);\r\n\r\n            let pixelsPerSecond = this.deck1Canvas.offsetWidth / 6;\r\n            let deltaX = this.scrubOrigScreenX - event.screenX;\r\n            let newSongOffset = this.scrubOrigSongOffset + (deltaX / pixelsPerSecond);\r\n            newSongOffset = Math.max(0, newSongOffset);\r\n            newSongOffset = Math.min(activeSong.song.details.lengthSeconds, newSongOffset);\r\n            activeSong.setSongOffset(newSongOffset);\r\n        }\r\n    }\r\n\r\n    endScrub(event: MouseEvent) {\r\n        if(this.activeScrubDeck !== undefined) {\r\n            let activeSong = this.getActiveSongFromDeckId(this.activeScrubDeck);\r\n            if(this.resumePlayingAfterScrub) {\r\n                activeSong.playBuffer();\r\n            }\r\n\r\n            this.activeScrubDeck = undefined;\r\n            document.body.classList.remove('scrubbing');\r\n        }\r\n    }\r\n\r\n    startScrub(deckId: DeckId, event: MouseEvent) {\r\n        let activeSong = this.getActiveSongFromDeckId(deckId);\r\n        if(activeSong.isLoaded) {\r\n            this.activeScrubDeck = deckId;\r\n            this.resumePlayingAfterScrub = activeSong.isPlaying;\r\n            this.scrubOrigSongOffset = activeSong.currentSongOffset;\r\n            this.scrubOrigScreenX = event.screenX;\r\n\r\n            activeSong.isPlaying && activeSong.pauseBuffer();\r\n            document.body.classList.add('scrubbing');\r\n        }\r\n    }\r\n\r\n    getActiveSongFromDeckId(deckId: DeckId) {\r\n        if(deckId === DeckId.LEFT) {\r\n            return this.deck1ActiveSong;\r\n        } else {\r\n            return this.deck2ActiveSong;\r\n        }\r\n    }\r\n\r\n    crossfaderChange({leftGain, rightGain}: CrossfaderChangeEvent) {\r\n        this.deck1ActiveSong.setGain(leftGain);\r\n        this.deck2ActiveSong.setGain(rightGain);\r\n    }\r\n\r\n}\r\n","import {Component, Output, EventEmitter} from \"@angular/core\";\r\nimport {BehaviorSubject} from \"rxjs\";\r\nimport {PreferencesDb} from \"../../../services/db/preferencesDb.service\";\r\n\r\n@Component({\r\n    selector: 'crossfader',\r\n    templateUrl: 'crossfader.component.html',\r\n    styleUrls: ['crossfader.component.css']\r\n})\r\nexport class CrossfaderComponent {\r\n    sliderValue = new BehaviorSubject(0.5);\r\n\r\n    //0 represents an equal power fade\r\n    //1 represents a scratch fade\r\n    crossfaderCurveSharpness = new BehaviorSubject(0);\r\n\r\n    @Output() change = new EventEmitter<CrossfaderChangeEvent>();\r\n\r\n    constructor(private preferencesDb: PreferencesDb) {\r\n        preferencesDb.initialized.then(() => {\r\n            this.crossfaderCurveSharpness.next(preferencesDb.getCrossfaderCurveSharpness());\r\n        });\r\n\r\n        this.crossfaderCurveSharpness.subscribe(() => this.sendCrossfaderChange());\r\n        this.sliderValue.subscribe(() => this.sendCrossfaderChange());\r\n    }\r\n\r\n    getGain(sliderValue, curveSharpness) {\r\n        let equalPowerValue = Math.cos(sliderValue * Math.PI / 2);\r\n        return Math.min(1, equalPowerValue * (curveSharpness * 19 + 1));\r\n    }\r\n\r\n    sendCrossfaderChange() {\r\n        let sliderValue = this.sliderValue.getValue();\r\n        let curveSharpness = this.crossfaderCurveSharpness.getValue();\r\n\r\n        let leftGain = this.getGain(sliderValue, curveSharpness);\r\n        let rightGain = this.getGain(1 - sliderValue, curveSharpness);\r\n        this.change.emit({leftGain, rightGain});\r\n    }\r\n\r\n    setCurveSharpness(value: number) {\r\n        this.preferencesDb.setCrossfaderCurveSharpness(value);\r\n        this.crossfaderCurveSharpness.next(value);\r\n    }\r\n}\r\n\r\nexport interface CrossfaderChangeEvent {\r\n    leftGain: number,\r\n    rightGain: number\r\n}","import {Component} from '@angular/core';\r\nimport {SideNav, SideNavState} from \"../../services/sidenav.service\";\r\n\r\n@Component({\r\n    selector: 'side-nav',\r\n    template: `\r\n<div id=\"sideNav\" style=\"width: 350px; padding:10px\">\r\n    <midi-settings *ngIf=\"(sideNav.state$ | async) === SideNavState.Midi\"></midi-settings>\r\n    <audio-settings *ngIf=\"(sideNav.state$ | async) === SideNavState.Audio\"></audio-settings>\r\n</div>\r\n`\r\n})\r\nexport class SideNavComponent {\r\n    SideNavState = SideNavState;\r\n\r\n    constructor(public sideNav: SideNav) {\r\n\r\n    }\r\n}","import {Component} from '@angular/core';\r\nimport {DeckId} from '../../app.component'\r\n\r\n@Component({\r\n    selector: 'audio-settings',\r\n    templateUrl: 'audioSettings.component.html',\r\n    styleUrls: ['audioSettings.component.css']\r\n})\r\nexport class AudioSettingsComponent {\r\n    DeckId = DeckId;\r\n    constructor() {\r\n\r\n    }\r\n}","import {Component} from '@angular/core';\r\nimport {MidiIo} from \"../../services/midi/midiIo.service\";\r\n\r\n@Component({\r\n    selector: 'midi-settings',\r\n    templateUrl: 'midiSettings.component.html',\r\n    styleUrls: ['midiSettings.component.css']\r\n})\r\nexport class MidiSettingsComponent {\r\n    constructor(public midiIo: MidiIo) {\r\n\r\n    }\r\n\r\n    getDeviceName(device) {\r\n        return device.name;\r\n    }\r\n}","import {Component, Input, Output, EventEmitter, OnInit} from \"@angular/core\";\r\nimport {MidiMapper, MappingType} from \"../../services/midi/midiMapper.service\";\r\nimport {MidiMsg, MidiMsgType} from \"../../services/midi/midiUtil.service\";\r\nimport {MidiIo} from \"../../services/midi/midiIo.service\";\r\n\r\n@Component({\r\n    selector: 'midi-mapping',\r\n    templateUrl: 'midiMapping.component.html',\r\n    styleUrls: ['midiMapping.component.css']\r\n})\r\nexport class MidiMappingComponent implements OnInit {\r\n    @Input() elemId: string;\r\n\r\n    private _amount: number;\r\n    @Input() set amount(value: number) {\r\n        this._amount = value;\r\n\r\n        let mapping = this.midiMapper.getMapping(this.elemId);\r\n        if (mapping) {\r\n            let msg: MidiMsg = {\r\n                msgType: mapping.control.msgType,\r\n                channel: mapping.control.channel,\r\n                subType: mapping.control.subType,\r\n                amount: value\r\n            };\r\n            this.midiIo.sendMessage(msg);\r\n        }\r\n    }\r\n\r\n    ctrl = this;\r\n\r\n    get inputElem() {\r\n        return document.getElementById(this.elemId);\r\n    }\r\n\r\n    @Output() amountChange = new EventEmitter();\r\n\r\n    private shortMidiTypeNames = {\r\n        [MidiMsgType.NoteOff]: 'Note Off',\r\n        [MidiMsgType.NoteOn]: 'Note On',\r\n        [MidiMsgType.PolyAfterTouch]: 'AfTo',\r\n        [MidiMsgType.CC]: 'CC',\r\n        [MidiMsgType.ProgramChange]: 'Prog',\r\n        [MidiMsgType.ChannelAfterTouch]: 'Chan AfTo',\r\n        [MidiMsgType.PitchBend]: 'Pitch Bend',\r\n        [MidiMsgType.SysEx]: 'SysEx',\r\n\r\n    };\r\n\r\n    constructor(public midiMapper: MidiMapper, private midiIo: MidiIo) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.midiMapper.registerMappingComp(this.elemId, this);\r\n    }\r\n\r\n    onLearnMsg(msg: MidiMsg) {\r\n        if (msg.msgType === MidiMsgType.NoteOff) {\r\n            return;\r\n        }\r\n\r\n        let mappingType = (msg.msgType === MidiMsgType.NoteOn) ? MappingType.Latch : MappingType.Amount;\r\n\r\n        this.midiMapper.setMapping(this.elemId, {\r\n            control: {msgType: msg.msgType, channel: msg.channel, subType: msg.subType},\r\n            type: mappingType\r\n        });\r\n    }\r\n\r\n    onInputMsg(msg: MidiMsg) {\r\n        let mapping = this.midiMapper.getMapping(this.elemId);\r\n\r\n        if (mapping.type === MappingType.Amount) {\r\n            this.amountChange.next(msg.amount);\r\n\r\n        } else if (mapping.type === MappingType.Latch) {\r\n            if(msg.amount === 0) {\r\n                return;\r\n            } else {\r\n                if(this._amount === 1) {\r\n                    this.amountChange.next(0);\r\n                } else {\r\n                    this.amountChange.next(1);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getMappedControlMessage() {\r\n        let mapping = this.midiMapper.getMapping(this.elemId);\r\n        if (mapping) {\r\n            return `${this.shortMidiTypeNames[mapping.control.msgType]}: ${mapping.control.subType}`;\r\n        }\r\n    }\r\n}","import {Directive, HostListener} from \"@angular/core\";\r\n\r\n@Directive({selector: '[fixedTableHeaderContainer]'})\r\nexport class FixedTableHeaderContainerDirective {\r\n    @HostListener('scroll', ['$event'])\r\n    public onScroll(event: any): void {\r\n        let elem = event.target;\r\n        let translate = \"translate(0,\"+elem.scrollTop+\"px)\";\r\n\r\n        const allTh = elem.querySelectorAll(\"th\");\r\n        for( let i=0; i < allTh.length; i++ ) {\r\n            allTh[i].style.transform = translate;\r\n        }\r\n    }\r\n}","import {Component, Input, OnInit} from '@angular/core';\r\nimport {AudioUtil} from \"../../../services/audio/audioUtil.service\";\r\nimport {DeckId} from \"../../app.component\";\r\nimport {DeckAudioSettings, AudioSettings} from \"./audioSettings.service\";\r\n\r\n@Component({\r\n    selector: 'deck-audio-settings',\r\n    templateUrl: 'deckAudioSettings.component.html',\r\n    styleUrls: ['deckAudioSettings.component.css']\r\n})\r\nexport class DeckAudioSettingsComponent implements OnInit {\r\n    @Input() deckId: DeckId;\r\n    deckAudioSettings: DeckAudioSettings;\r\n\r\n    deckNames = {\r\n        [DeckId.LEFT]: 'A',\r\n        [DeckId.RIGHT]: 'B'\r\n    };\r\n\r\n    constructor(public audioUtil: AudioUtil, private audioSettings: AudioSettings) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.deckAudioSettings = this.audioSettings.getDeckAudioSettings(this.deckId);\r\n    }\r\n}","import {Component, EventEmitter, Input, Output} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'fader',\r\n    templateUrl: 'fader.component.html',\r\n    styleUrls: ['fader.component.css']\r\n})\r\nexport class FaderComponent {\r\n    //Should be unique\r\n    @Input() name;\r\n    @Input() value;\r\n    @Output() change = new EventEmitter();\r\n\r\n    maxValue = 1.2;\r\n\r\n    constructor() {\r\n\r\n    }\r\n}","import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'loading-overlay',\r\n    styleUrls: ['loadingOverlay.component.css'],\r\n    template: `\r\n<div class=\"loading-overlay\">\r\n    <div class=\"drop-msg\" *ngIf=\"msg\">{{msg}}</div>\r\n    <spinner *ngIf=\"showSpinner\"></spinner>\r\n</div>\r\n`\r\n})\r\nexport class LoadingOverlayComponent {\r\n    @Input() msg: string;\r\n    @Input() showSpinner: boolean = true;\r\n}","import {NgModule} from \"@angular/core\";\r\nimport {BrowserModule} from \"@angular/platform-browser\";\r\nimport {\r\n    MdButtonModule, MdSliderModule, MdSidenavModule, MdTooltipModule, MdSlideToggleModule, MdRadioModule,\r\n    MdCheckboxModule, MdToolbarModule, MdOptionModule, MdSelectModule\r\n} from \"@angular/material\";\r\nimport {AppComponent} from \"./app.component\";\r\nimport {LibraryComponent} from \"./library/library.component\";\r\nimport {FileDropDirective} from \"./library/fileDrop.directive\";\r\nimport {ToolbarComponent} from \"./toolbar/toolbar.component\";\r\nimport {AudioUtil} from \"../services/audio/audioUtil.service\";\r\nimport {SongDb} from \"../services/db/songDb.service\";\r\nimport {SpinnerComponent} from \"./spinner/spinner.component\";\r\nimport {DeckComponent} from \"./deck/deck.component\";\r\nimport {CenterControlsComponent} from \"./centerControls/centerControls.component\";\r\nimport {WaveformUtil} from \"../services/audio/waveformUtil.service\";\r\nimport {ActiveSongs} from \"../services/activeSongs.service\";\r\nimport {AnimationFrames} from \"../services/animationFrames.service\";\r\nimport {DocumentEvents} from \"../services/documentEvents.service\";\r\nimport {CrossfaderComponent} from \"./centerControls/crossfader/crossfader.component\";\r\nimport {SideNav} from \"../services/sidenav.service\";\r\nimport {SideNavComponent} from \"./sideNav/sideNav.component\";\r\nimport {AudioSettingsComponent} from \"./sideNav/audioSettings/audioSettings.component\";\r\nimport {MidiSettingsComponent} from \"./sideNav/midiSettings.component\";\r\nimport {MidiIo} from \"../services/midi/midiIo.service\";\r\nimport {MidiUtil} from \"../services/midi/midiUtil.service\";\r\nimport {MidiMapper} from \"../services/midi/midiMapper.service\";\r\nimport {MidiMappingComponent} from \"./midiMapping/midiMapping.component\";\r\nimport {Db} from \"../services/db/db.service\";\r\nimport {PreferencesDb} from \"../services/db/preferencesDb.service\";\r\nimport {FixedTableHeaderContainerDirective} from \"./library/fixedTableHeaderContainer.directive\";\r\nimport {AudioSettings} from \"./sideNav/audioSettings/audioSettings.service\";\r\nimport {DeckAudioSettingsComponent} from \"./sideNav/audioSettings/deckAudioSettings.component\";\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {DspUtil} from \"../services/audio/dspUtil.service\";\r\nimport {FaderComponent} from \"./fader/fader.component\";\r\nimport {Resampler} from \"../services/audio/resampler.service\";\r\nimport {AudioOutput} from \"../services/audioOutput.service\";\r\nimport {FormatTimePipe} from \"../pipes/formatTime.pipe\";\r\nimport {LoadingOverlayComponent} from \"./loadingOverlay/loadingOverlay.component\";\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {LazyForModule} from 'angular-lazy-for';\r\nimport {WorkerUtil} from '../services/workerUtil';\r\nimport {ImageUtil} from '../services/imageUtil.service';\r\n\r\n@NgModule({\r\n    imports: [BrowserModule, BrowserAnimationsModule, FormsModule, ReactiveFormsModule, LazyForModule,\r\n        MdButtonModule, MdSliderModule, MdSidenavModule, MdTooltipModule, MdSlideToggleModule, MdRadioModule, MdCheckboxModule, MdToolbarModule, MdOptionModule, MdSelectModule],\r\n    declarations: [AppComponent, LibraryComponent, ToolbarComponent, FileDropDirective, SpinnerComponent, DeckComponent,\r\n        CenterControlsComponent, CrossfaderComponent, SideNavComponent, AudioSettingsComponent, MidiSettingsComponent,\r\n        MidiMappingComponent, FixedTableHeaderContainerDirective, DeckAudioSettingsComponent, FaderComponent,\r\n        FormatTimePipe, LoadingOverlayComponent],\r\n    bootstrap: [AppComponent],\r\n    providers: [AudioUtil, WaveformUtil, SongDb, ActiveSongs, AnimationFrames, DocumentEvents, SideNav, MidiIo, MidiUtil,\r\n        MidiMapper, Db, PreferencesDb, AudioSettings, DspUtil, Resampler, AudioOutput, FormatTimePipe, WorkerUtil,\r\n        ImageUtil]\r\n})\r\n\r\nexport class AppModule {\r\n\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport {AppModule} from \"./app/app.module\";\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);"],"names":["Injectable","ReplaySubject","BehaviorSubject","Subject","NgZone","Pipe","ViewChildren","QueryList","EventEmitter","Output","HostListener","Directive","ElementRef","Component","ViewChild","Input","NgModule","BrowserModule","BrowserAnimationsModule","FormsModule","ReactiveFormsModule","LazyForModule","MdButtonModule","MdSliderModule","MdSidenavModule","MdTooltipModule","MdSlideToggleModule","MdRadioModule","MdCheckboxModule","MdToolbarModule","MdOptionModule","MdSelectModule","platformBrowserDynamic"],"mappings":"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"}