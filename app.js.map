{"version":3,"file":"app.js","sources":["../src/services/db/migrations/dbMigration1.ts","../src/services/db/migrations/dbMigration20.ts","../src/services/db/migrations/dbMigration21.ts","../src/services/workerUtil.ts","../src/services/audio/waveformUtil.service.ts","../src/services/activeSong.ts","../src/services/audio/audioUtil.service.ts","../src/services/db/db.service.ts","../src/services/db/preferences.ts","../src/services/db/preferencesDb.service.ts","../src/app/sideNav/audioSettings/audioSettings.service.ts","../src/services/audio/dspUtil.service.ts","../src/services/audio/resampler.service.ts","../src/services/audioOutput.service.ts","../src/services/activeSongs.service.ts","../src/services/animationFrames.service.ts","../src/pipes/formatTime.pipe.ts","../src/models/song.ts","../src/services/imageUtil.service.ts","../src/services/db/songDb.service.ts","../src/app/deck/deck.component.ts","../src/services/sidenav.service.ts","../src/services/midi/midiUtil.service.ts","../src/app/app.component.ts","../src/app/library/library.component.ts","../src/app/library/fileDrop.directive.ts","../src/services/midi/midiIo.service.ts","../src/services/documentEvents.service.ts","../src/services/midi/midiMapper.service.ts","../src/app/toolbar/toolbar.component.ts","../src/app/spinner/spinner.component.ts","../src/app/centerControls/centerControls.component.ts","../src/app/centerControls/crossfader/crossfader.component.ts","../src/app/sideNav/sideNav.component.ts","../src/app/sideNav/audioSettings/audioSettings.component.ts","../src/app/sideNav/midiSettings.component.ts","../src/app/midiMapping/midiMapping.component.ts","../src/app/library/fixedTableHeaderContainer.directive.ts","../src/app/sideNav/audioSettings/deckAudioSettings.component.ts","../src/app/fader/fader.component.ts","../src/app/loadingOverlay/loadingOverlay.component.ts","../src/app/app.module.ts","../src/main.dev.ts"],"sourcesContent":["export function dbMigration1(db: IDBDatabase) {\r\n    db.createObjectStore('songDetails', {autoIncrement: true, keyPath: 'id'});\r\n    db.createObjectStore('songBuffer');\r\n    db.createObjectStore('preferences');\r\n}","import {SongDetails} from \"../../../models/songDetails\";\r\nimport {Db} from \"../db.service\";\r\n\r\nexport function dbMigration20(db: IDBDatabase, upgradeTransaction: IDBTransaction) {\r\n    let getSongCursor = upgradeTransaction.objectStore('songDetails').openCursor();\r\n\r\n    let albumDataUrlById = {};\r\n    let resizingImagesPromises = [];\r\n\r\n    getSongCursor.onsuccess = (e) => {\r\n        let cursor: IDBCursorWithValue = e.target['result'];\r\n        if (cursor) {\r\n            let details: SongDetails = cursor.value;\r\n            if (details['base64Pic']) {\r\n                resizingImagesPromises.push(\r\n                    resizeBase64Img(details['picFormat'], details['base64Pic'], 100, 100)\r\n                        .then((albumDataUrl) => {\r\n                            albumDataUrlById[details.id] = albumDataUrl;\r\n                            delete details['picFormat'];\r\n                            delete details['base64Pic'];\r\n                            details.albumDataUrl = albumDataUrl;\r\n                        })\r\n                );\r\n            }\r\n            cursor.continue();\r\n        } else {\r\n            //ლ(ಠ_ಠლ)\r\n            setTimeout(() => {\r\n                updateAlbumPics(db, albumDataUrlById, resizingImagesPromises);\r\n            })\r\n        }\r\n    };\r\n}\r\n\r\nfunction updateAlbumPics(db, albumDataUrlById, resizingImagesPromises) {\r\n    Promise.all(resizingImagesPromises)\r\n        .then(() => {\r\n            let updateAlbumCoversTransaction = db.transaction(['songDetails'], Db.READWRITE_TRANSACTION);\r\n            let getSongCursor = updateAlbumCoversTransaction.objectStore('songDetails').openCursor();\r\n\r\n            getSongCursor.onsuccess = (e) => {\r\n                let cursor: IDBCursorWithValue = e.target['result'];\r\n                if (cursor) {\r\n                    let details: SongDetails = cursor.value;\r\n                    if (details['base64Pic']) {\r\n                        delete details['picFormat'];\r\n                        delete details['base64Pic'];\r\n\r\n                        details.albumDataUrl = albumDataUrlById[details.id];\r\n                        cursor.update(details);\r\n                        cursor.continue();\r\n                    } else {\r\n                        cursor.continue();\r\n                    }\r\n                }\r\n            };\r\n        })\r\n}\r\n\r\n//based on http://stackoverflow.com/a/20965997/373655\r\nfunction resizeBase64Img(type: string, base64: string, maxWidth: number, maxHeight: number): Promise<string> {\r\n    return new Promise((resolve) => {\r\n        let img = new Image;\r\n\r\n        img.onload = resizeImage;\r\n        img.src = `data:${type};base64,${base64}`;\r\n\r\n        function resizeImage() {\r\n            let targetWidth = img.width;\r\n            let targetHeight = img.height;\r\n\r\n            if (img.width > maxWidth) {\r\n                targetWidth = maxWidth;\r\n                targetHeight = img.height / (img.width / maxWidth);\r\n            }\r\n\r\n            if (targetHeight > maxHeight) {\r\n                targetHeight = maxHeight;\r\n                targetWidth = img.width / (img.height / maxHeight);\r\n            }\r\n            resolve(imageToDataUri(img, targetWidth, targetHeight));\r\n        }\r\n\r\n        function imageToDataUri(img, width, height) {\r\n\r\n            // create an off-screen canvas\r\n            let canvas = document.createElement('canvas'),\r\n                ctx = canvas.getContext('2d');\r\n\r\n            // set its dimension to target size\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n\r\n            // draw source image into the off-screen canvas:\r\n            ctx.drawImage(img, 0, 0, width, height);\r\n\r\n            // encode image to data-uri with base64 version of compressed image\r\n            return canvas.toDataURL('image/jpeg', 0.8);\r\n        }\r\n    });\r\n}","import {SongDetails} from \"../../../models/songDetails\";\r\n\r\nexport function dbMigration21(db: IDBDatabase, transaction: IDBTransaction) {\r\n    let getSongCursor = transaction.objectStore('songDetails').openCursor();\r\n\r\n    getSongCursor.onsuccess = (e) => {\r\n        let cursor: IDBCursorWithValue = e.target['result'];\r\n        if (cursor) {\r\n            let details: SongDetails = cursor.value;\r\n            details.cues = details.cues || [];\r\n            cursor.update(details);\r\n            cursor.continue();\r\n        }\r\n    };\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {BehaviorSubject, Observable} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class WorkerUtil {\r\n\r\n    workersByType = {\r\n        [WorkerType.Waveform]: new Worker('webWorkers/waveformWorker.js'),\r\n        [WorkerType.Image]: new Worker('webWorkers/imageWorker.js')\r\n    };\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    run({workerType, method, params, transferObjs=[]}: {workerType: WorkerType, method: string, params: any[], transferObjs?: any[]}) {\r\n        let worker = this.workersByType[workerType];\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let msgId = Math.random();\r\n            worker.postMessage({method, params, msgId}, transferObjs);\r\n\r\n            let handler = (e) => {\r\n                if(e.data.msgId === msgId) {\r\n                    worker.removeEventListener('message', handler);\r\n                    if(e.data.error) {\r\n                        reject(e.data.error);\r\n                    } else {\r\n                        resolve(e.data.result);\r\n                    }\r\n                }\r\n            };\r\n            worker.addEventListener('message', handler, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport enum WorkerType {Image, Waveform}","import {ThemeId} from \"../../app/app.component\";\r\nimport {WorkerType, WorkerUtil} from '../workerUtil';\r\nimport {Injectable} from '@angular/core';\r\n\r\n@Injectable()\r\nexport class WaveformUtil {\r\n    constructor(private workerUtil: WorkerUtil) {\r\n\r\n    }\r\n\r\n    //Give the waveform a bit of a boost to make up for what gets lost from taking averages.\r\n    WAVEFORM_BOOST = 1.4;\r\n\r\n    //Side effect: Clears the data from the buffer.\r\n    getWaveformData(buffer: AudioBuffer) {\r\n        let samples = buffer.getChannelData(0);\r\n\r\n        return this.workerUtil.run({\r\n            workerType: WorkerType.Waveform,\r\n            method: 'getWaveformData',\r\n            params: [samples.buffer],\r\n            transferObjs: [samples.buffer]\r\n        });\r\n    }\r\n\r\n    projectWaveform(samples: number[], sampleRate: number, outputSize: number, startTime: number = undefined, endTime: number = undefined): number[] {\r\n        let outputSamples = [];\r\n\r\n        if (startTime === undefined) {\r\n            startTime = 0;\r\n        }\r\n\r\n        if (endTime === undefined) {\r\n            endTime = samples.length / sampleRate;\r\n        }\r\n\r\n        //Tiny variations in the output length caused by the limitations of floating point percision cause the waveform\r\n        //to jitter so desiredOutputLength is rounded to 5 decimal places.\r\n        let desiredOutputLength = Math.round((endTime - startTime) * 100000) / 100000;\r\n        let samplesPerPixel = (desiredOutputLength * sampleRate) / outputSize;\r\n        let timePerPixel = samplesPerPixel / sampleRate;\r\n\r\n        let pixelOffset = Math.round(startTime / timePerPixel);\r\n\r\n        for (let col = 0; col < outputSize; col++) {\r\n            if (pixelOffset < 0 && col + pixelOffset < 0) {\r\n                outputSamples.push(0);\r\n                continue;\r\n            }\r\n\r\n            let firstSampleInBucketIndex = Math.floor((pixelOffset + col) * samplesPerPixel);\r\n            let lastSampleInBucketIndex = Math.floor((pixelOffset + col + 1) * samplesPerPixel);\r\n\r\n            //Make sure the samples for the current column are not outside of the samples array\r\n            firstSampleInBucketIndex = Math.min(firstSampleInBucketIndex, samples.length);\r\n            lastSampleInBucketIndex = Math.min(lastSampleInBucketIndex, samples.length);\r\n\r\n            let sum = 0;\r\n            for (let sampleI = firstSampleInBucketIndex; sampleI < lastSampleInBucketIndex; sampleI++) {\r\n                sum += samples[sampleI];\r\n            }\r\n\r\n            let mean: number;\r\n            if (lastSampleInBucketIndex - firstSampleInBucketIndex === 0) {\r\n                mean = 0;\r\n            } else {\r\n                mean = sum / (lastSampleInBucketIndex - firstSampleInBucketIndex);\r\n            }\r\n            mean = Math.min(1, mean * this.WAVEFORM_BOOST);\r\n            outputSamples.push(mean);\r\n        }\r\n\r\n        return outputSamples;\r\n    }\r\n\r\n    drawWaveform({canvas, themeId, positiveSamples, negativeSamples, firstColorPixel, useGradient = true, drawFromX = 0, drawToX}: DrawWaveformOptions) {\r\n        if (drawToX === undefined) {\r\n            drawToX = canvas.width;\r\n        }\r\n\r\n        let mainColor;\r\n        let highlightColor;\r\n        switch (themeId) {\r\n            case ThemeId.DECK1:\r\n                mainColor = '#632B9B';\r\n                highlightColor = '#9b49f2';\r\n                break;\r\n            case ThemeId.DECK2:\r\n                mainColor = '#165eaa';\r\n                highlightColor = '#219bff';\r\n                break;\r\n            case ThemeId.DEFAULT:\r\n                mainColor = '#5b5b5b';\r\n                highlightColor = '#a6a6a6';\r\n                break;\r\n        }\r\n        let showPositive = !!positiveSamples;\r\n        let showNegative = !!negativeSamples;\r\n        let showBoth = showPositive && showNegative;\r\n\r\n        let positiveWaveform = positiveSamples;\r\n        let negativeWaveform = negativeSamples;\r\n\r\n        let numSamples = positiveWaveform ? positiveWaveform.length : negativeWaveform.length;\r\n\r\n        let canvasCtx = canvas.getContext('2d');\r\n\r\n        canvasCtx.clearRect(drawFromX-1, 0, drawToX-drawFromX, canvas.height);\r\n\r\n        for (let col = Math.max(drawFromX, 0); col < Math.min(drawToX, numSamples); col++) {\r\n            let topY;\r\n            let bottomY;\r\n            let startY;\r\n            let halfWaveformHeight;\r\n            if (showBoth) {\r\n                topY = (1 - positiveWaveform[col]) / 2 * canvas.height;\r\n                bottomY = (1 - negativeWaveform[col]) / 2 * canvas.height;\r\n                startY = canvas.height / 2;\r\n                halfWaveformHeight = canvas.height / 2;\r\n            } else if (showPositive) {\r\n                topY = (1 - positiveWaveform[col]) * canvas.height;\r\n                startY = canvas.height;\r\n                halfWaveformHeight = canvas.height;\r\n            } else {\r\n                //This is a bit of a hack. Right now if showNegative is true all the values are actually positive.\r\n                //This is why the equation isn't (1 - negativeMean) * canvas.height\r\n                //Should find a better way of handling this\r\n                bottomY = negativeWaveform[col] * canvas.height;\r\n                startY = 0;\r\n                halfWaveformHeight = canvas.height;\r\n            }\r\n\r\n            let curPixedMainColor = mainColor;\r\n            let curPixelHighlightColor = highlightColor;\r\n\r\n            if (firstColorPixel !== undefined && firstColorPixel > col) {\r\n                curPixedMainColor = '#5b5b5b';\r\n                curPixelHighlightColor = '#a6a6a6';\r\n            }\r\n\r\n            if (showPositive) {\r\n                canvasCtx.beginPath();\r\n                canvasCtx.moveTo(col, startY);\r\n                canvasCtx.lineTo(col, topY);\r\n\r\n                if (useGradient) {\r\n                    let gradient = canvasCtx.createLinearGradient(col, topY + halfWaveformHeight, col, topY + (halfWaveformHeight - topY) / 3);\r\n                    gradient.addColorStop(0, curPixelHighlightColor);\r\n                    gradient.addColorStop(1, curPixedMainColor);\r\n                    canvasCtx.strokeStyle = gradient;\r\n                } else {\r\n                    canvasCtx.strokeStyle = mainColor;\r\n                }\r\n\r\n                canvasCtx.stroke();\r\n            }\r\n\r\n            if (showNegative) {\r\n                canvasCtx.beginPath();\r\n                canvasCtx.moveTo(col, startY);\r\n                canvasCtx.lineTo(col, bottomY);\r\n\r\n                if (useGradient) {\r\n                    let gradient = canvasCtx.createLinearGradient(col, bottomY - halfWaveformHeight, col, bottomY - (bottomY - halfWaveformHeight) / 3);\r\n                    gradient.addColorStop(0, curPixelHighlightColor);\r\n                    gradient.addColorStop(1, curPixedMainColor);\r\n                    canvasCtx.strokeStyle = gradient;\r\n                }\r\n                else {\r\n                    canvasCtx.strokeStyle = mainColor;\r\n                }\r\n\r\n                canvasCtx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    generateDataUrlWaveform(positiveSamples: number[], negativeSamples: number[], sampleRate: number, width: number, height: number, themeId: ThemeId, cues: number[], startTime: number, duration: number) {\r\n        let canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        let projectedPositiveSamples = this.projectWaveform(positiveSamples, sampleRate, width);\r\n        let projectedNegativeSamples = this.projectWaveform(negativeSamples, sampleRate, width);\r\n\r\n        this.drawWaveform({\r\n            canvas,\r\n            positiveSamples: projectedPositiveSamples,\r\n            negativeSamples: projectedNegativeSamples,\r\n            themeId\r\n        });\r\n        this.overlayCues(canvas, cues, startTime, duration);\r\n\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    overlayCues(canvas: HTMLCanvasElement, cues: number[], startTime: number, duration: number, labelAtTop: boolean = true) {\r\n        cues.forEach((cueTime, index) => {\r\n            if (cueTime >= startTime && cueTime <= startTime + duration) {\r\n                let cueX = (cueTime - startTime) / duration * canvas.width;\r\n\r\n                let canvasCtx = canvas.getContext('2d');\r\n\r\n                canvasCtx.fillStyle = 'white';\r\n                canvasCtx.fillRect(cueX, 0, 0.5, canvas.height);\r\n\r\n                let textBottom = labelAtTop ? 10 : canvas.height - 4;\r\n                let textTop = textBottom - 10;\r\n\r\n                let lastStrokeStyle = canvasCtx.strokeStyle;\r\n                canvasCtx.strokeStyle = 'white';\r\n\r\n                canvasCtx.clearRect(cueX - 14, textTop, 14, 14);\r\n                canvasCtx.strokeRect(cueX - 14, textTop, 14, 14);\r\n\r\n                canvasCtx.strokeStyle = lastStrokeStyle;\r\n\r\n                canvasCtx.strokeText((index + 1).toString(), cueX - 10, textBottom);\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport interface DrawWaveformOptions {\r\n    canvas: HTMLCanvasElement,\r\n    themeId: ThemeId,\r\n    positiveSamples?: number[],\r\n    negativeSamples?: number[],\r\n    firstColorPixel?: number,\r\n    useGradient?: boolean,\r\n    drawFromX?: number,\r\n    drawToX?: number\r\n}","import {Song} from \"../models/song\";\r\nimport {AudioUtil} from \"./audio/audioUtil.service\";\r\nimport {DeckId} from \"../app/app.component\";\r\nimport {ReplaySubject, Observable} from \"rxjs\";\r\nimport {DeckAudioSettings} from \"../app/sideNav/audioSettings/audioSettings.service\";\r\nimport {DspUtil} from \"./audio/dspUtil.service\";\r\nimport {Resampler} from \"./audio/resampler.service\";\r\nimport {AudioOutput} from \"./audioOutput.service\";\r\n\r\nexport class ActiveSong {\r\n    public song: Song;\r\n\r\n    private song$ = new ReplaySubject<Song>();\r\n    private source: AudioBufferSourceNode;\r\n    private buffer: AudioBuffer;\r\n\r\n    private songOffsetRecordedTime: number;\r\n    private songOffset: number;\r\n\r\n    private _playbackRate = 0;\r\n\r\n    private get playbackRate() {\r\n        return this._playbackRate;\r\n    }\r\n\r\n    private set playbackRate(value: number) {\r\n        this._playbackRate = value;\r\n        if (value !== 0) {\r\n            this.lastPlaybackDirectionIsForward = (value > 0);\r\n        }\r\n    }\r\n\r\n    private lastPlaybackDirectionIsForward = true;\r\n    private gainNode: GainNode;\r\n    private scriptNode: ScriptProcessorNode;\r\n    private controlInputNode: MediaStreamAudioSourceNode;\r\n\r\n    private controlled = false;\r\n    private BUFFER_SIZE = 1024;\r\n\r\n    constructor(\r\n        private deckId: DeckId,\r\n        private audioUtil: AudioUtil,\r\n        private deckAudioSettings: DeckAudioSettings,\r\n        private dspUtil: DspUtil,\r\n        private resampler: Resampler,\r\n        private audioOutput: AudioOutput\r\n    ) {\r\n        this.song$.subscribe((song) => this.song = song);\r\n\r\n        this.gainNode = this.audioUtil.context.createGain();\r\n        this.gainNode.connect(this.audioOutput.getInputForDeck(deckId));\r\n\r\n        this.scriptNode = this.audioUtil.context.createScriptProcessor(this.BUFFER_SIZE);\r\n        this.scriptNode.onaudioprocess = (e: AudioProcessingEvent) => this.processControlAudio(e);\r\n    }\r\n\r\n    get isPlaying() {\r\n        return this.buffer !== undefined && this.playbackRate !== 0 && !this.isControlled;\r\n    }\r\n\r\n    get isLoaded() {\r\n        return !!this.buffer;\r\n    }\r\n\r\n    get songObservable(): Observable<Song> {\r\n        return this.song$.asObservable();\r\n    }\r\n\r\n    get currentSongOffset() {\r\n        let songOffsetSinceLastRecording = (this.audioUtil.context.currentTime - this.songOffsetRecordedTime) * this.playbackRate;\r\n        return this.songOffset + songOffsetSinceLastRecording;\r\n    }\r\n\r\n    get isControlled() {\r\n        return this.controlled;\r\n    }\r\n\r\n    enableControl() {\r\n        let controlDevice = this.deckAudioSettings.getControlIn();\r\n        if (controlDevice) {\r\n            if(this.isPlaying) {\r\n                this.pauseBuffer();\r\n            }\r\n\r\n            this.controlled = true;\r\n\r\n            let constraints = {\r\n                audio: {\r\n                    deviceId: controlDevice.deviceId,\r\n                    echoCancellation: {exact: false}\r\n                }\r\n            };\r\n\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(\r\n                    (stream) => {\r\n                        this.controlInputNode = this.audioUtil.context.createMediaStreamSource(stream);\r\n                        this.controlInputNode.connect(this.scriptNode);\r\n                        this.scriptNode.connect(this.gainNode);\r\n                    },\r\n                    (error) => {\r\n                        console.error('Could not load control device.', error);\r\n                        this.controlled = false;\r\n                    }\r\n                );\r\n\r\n        }\r\n    }\r\n\r\n    disableControl() {\r\n        this.controlInputNode.disconnect();\r\n        this.controlInputNode = undefined;\r\n        this.scriptNode.disconnect();\r\n        this.controlled = false;\r\n\r\n        this.updateSongOffset();\r\n        this.playbackRate = 0;\r\n    }\r\n\r\n    toggleControl() {\r\n        this.isControlled ? this.disableControl() : this.enableControl();\r\n    }\r\n\r\n    private processControlAudio(event: AudioProcessingEvent) {\r\n        //This could happen once after you disable control\r\n        if(!this.isControlled) {\r\n            return;\r\n        }\r\n\r\n        let context = this.audioUtil.context;\r\n\r\n        let leftInputBuffer = event.inputBuffer.getChannelData(0);\r\n        let rightInputBuffer = event.inputBuffer.getChannelData(1);\r\n\r\n        let leftScriptOutputBuffer = event.outputBuffer.getChannelData(0);\r\n        let rightScriptOutputBuffer = event.outputBuffer.getChannelData(1);\r\n\r\n        const subChunkSize = 512;\r\n        const defaultPilotHz = 2000;\r\n\r\n        try {\r\n            for (let subChunkOffset = 0; subChunkOffset < this.BUFFER_SIZE; subChunkOffset += subChunkSize) {\r\n                let leftSubInputBuffer = this.audioUtil.copyBuffer(leftInputBuffer, subChunkOffset, subChunkSize);\r\n                let rightSubInputBuffer = this.audioUtil.copyBuffer(rightInputBuffer, subChunkOffset, subChunkSize);\r\n\r\n                let {pilotHz, periodSamples} = this.getControlFreq(leftSubInputBuffer);\r\n\r\n                let playingForward = this.controlIsPlayingForward(leftSubInputBuffer, rightSubInputBuffer, periodSamples);\r\n                let playDirectionMultiplier = playingForward ? 1 : -1;\r\n\r\n                let songSize = Math.round(subChunkSize * (pilotHz / defaultPilotHz));\r\n                let songPlaybackRate = songSize / subChunkSize;\r\n                let songSampleRate = context.sampleRate * songPlaybackRate;\r\n\r\n                let {leftSongBuffer, rightSongBuffer} = this.getChunkOfSongForControl(songSize, playingForward);\r\n\r\n                let leftRenderedBuffer = this.resampler.resample(leftSongBuffer, songSampleRate, context.sampleRate);\r\n                let rightRenderedBuffer = this.resampler.resample(rightSongBuffer, songSampleRate, context.sampleRate);\r\n\r\n                for (let i = 0; i < subChunkSize; i++) {\r\n                    leftScriptOutputBuffer[i + subChunkOffset] = leftRenderedBuffer[i];\r\n                    rightScriptOutputBuffer[i + subChunkOffset] = rightRenderedBuffer[i];\r\n                }\r\n\r\n                this.songOffset += songSize * playDirectionMultiplier / this.audioUtil.context.sampleRate;\r\n                this.playbackRate = songSize * playDirectionMultiplier / this.BUFFER_SIZE;\r\n                this.songOffsetRecordedTime = this.audioUtil.context.currentTime;\r\n\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.playbackRate = 0;\r\n            this.songOffsetRecordedTime = this.audioUtil.context.currentTime;\r\n            for (let i = 0; i < this.BUFFER_SIZE; i++) {\r\n                leftScriptOutputBuffer[i] = 0;\r\n                rightScriptOutputBuffer[i] = 0;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private getControlFreq(buf: Float32Array) {\r\n        let pilotHz = this.dspUtil.autoCorrelate(buf, this.audioUtil.context.sampleRate);\r\n        let periodSamples = this.audioUtil.context.sampleRate / pilotHz;\r\n\r\n        //Not enough of a signal to detect/too quiet or too slow\r\n        if (pilotHz === -1) {\r\n            throw new Error('Could not detect frequency');\r\n        } else {\r\n            return {pilotHz, periodSamples};\r\n        }\r\n    }\r\n\r\n    private controlIsPlayingForward(leftBuf: Float32Array, rightBuf: Float32Array, periodSamples: number): boolean {\r\n\r\n        let isPlayingForward = this.dspUtil.isPlayingForwardMaxMin(leftBuf, rightBuf, periodSamples);\r\n\r\n        if(isPlayingForward !== undefined) {\r\n            return isPlayingForward;\r\n        } else {\r\n\r\n        }\r\n\r\n        let phaseSamples = this.dspUtil.crossCorrelate(leftBuf, rightBuf);\r\n        //This should be from 0.22 to 0.25\r\n        let relPhaseSeperation = Math.min(periodSamples - phaseSamples, phaseSamples) / periodSamples;\r\n\r\n        if (phaseSamples === -1 || relPhaseSeperation < 0.2 || relPhaseSeperation > 0.3 || phaseSamples > periodSamples) {\r\n            return this.lastPlaybackDirectionIsForward;\r\n        } else {\r\n            return phaseSamples > periodSamples - phaseSamples;\r\n        }\r\n    }\r\n\r\n    private getChunkOfSongForControl(size, playingForward) {\r\n        let leftFullSongBuffer = this.buffer.getChannelData(0);\r\n        let rightFullSongBuffer = this.buffer.getChannelData(1);\r\n\r\n        let leftSongBuffer = new Float32Array(size);\r\n        let rightSongBuffer = new Float32Array(size);\r\n\r\n        let playDirectionMultiplier = playingForward ? 1 : -1;\r\n\r\n        let offsetSamples = Math.round(this.songOffset * this.audioUtil.context.sampleRate);\r\n        for (let i = 0; i < size; i++) {\r\n            let songIndex = i * playDirectionMultiplier + offsetSamples;\r\n\r\n            let songIndexIsValid = () => songIndex >= 0 && songIndex <= leftFullSongBuffer.length;\r\n\r\n            leftSongBuffer[i] = songIndexIsValid() ? leftFullSongBuffer[songIndex] : 0;\r\n            rightSongBuffer[i] = songIndexIsValid() ? rightFullSongBuffer[songIndex] : 0;\r\n        }\r\n\r\n        return {leftSongBuffer, rightSongBuffer};\r\n    }\r\n\r\n\r\n    setSongOffset(time) {\r\n        this.songOffset = time;\r\n        this.songOffsetRecordedTime = this.audioUtil.context.currentTime;\r\n\r\n        if (!this.isControlled && this.isPlaying) {\r\n            this.pauseBuffer();\r\n            this.playBuffer();\r\n        }\r\n    }\r\n\r\n    loadSong(song: Song) {\r\n        let context = this.audioUtil.context;\r\n\r\n        return context.decodeAudioData(song.buffer)\r\n            .then((audioBuffer) => {\r\n                this.buffer = audioBuffer;\r\n                this.songOffset = 0;\r\n                this.songOffsetRecordedTime = context.currentTime;\r\n                this.playbackRate = 0;\r\n                this.song$.next(song);\r\n            });\r\n    }\r\n\r\n    playBuffer() {\r\n        if (this.buffer && !this.isPlaying && !this.isControlled) {\r\n            let context = this.audioUtil.context;\r\n\r\n            if (this.source) {\r\n                this.source.stop();\r\n            }\r\n\r\n            this.updateSongOffset();\r\n            //todo: replace 1 with value of the tempo slider\r\n            this.playbackRate = 1;\r\n            this.source = context.createBufferSource();\r\n            this.source.playbackRate.value = this.playbackRate;\r\n            this.source.buffer = this.buffer;\r\n            this.source.connect(this.gainNode);\r\n            this.source.start(context.currentTime, this.songOffset);\r\n        }\r\n    }\r\n\r\n    pauseBuffer() {\r\n        if (this.buffer) {\r\n            this.updateSongOffset();\r\n            this.playbackRate = 0;\r\n            this.source.stop();\r\n            this.source = undefined;\r\n        }\r\n    }\r\n\r\n    setGain(gain: number) {\r\n        //delay when gain is set to make up for audio latency. Maybe set this to 40ms in OSX and 170ms on windows\r\n        this.gainNode.gain.setValueAtTime(gain, this.audioUtil.context.currentTime + 40 / 1000);\r\n        //this.gainNode.gain.value = gain;\r\n    }\r\n\r\n    private updateSongOffset() {\r\n        this.songOffset = this.currentSongOffset;\r\n        this.songOffsetRecordedTime = this.audioUtil.context.currentTime;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {Observable, ReplaySubject} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AudioUtil {\r\n    context = new AudioContext();\r\n    private inputDevices = new ReplaySubject<MediaDeviceInfo[]>();\r\n    private outputDevices = new ReplaySubject<MediaDeviceInfo[]>();\r\n\r\n    get inputDevices$(): Observable<MediaDeviceInfo[]> {\r\n        return this.inputDevices.asObservable();\r\n    }\r\n\r\n    get outputDevices$(): Observable<MediaDeviceInfo[]> {\r\n        return this.outputDevices.asObservable();\r\n    }\r\n\r\n    constructor() {\r\n        //The requests for microphone access. Without this we can't get the names of audio inputs and outputs\r\n        //TODO: can this be replaced with navigator.mediaDevices.getUserMedia\r\n        navigator.getUserMedia({audio: true}, () => this.onUserMediaLoad(), () => this.onUserMediaError());\r\n    }\r\n\r\n    public copyBuffer(buf: Float32Array, start?: number, size?: number) {\r\n        if(start === undefined) {\r\n            start = 0;\r\n        }\r\n\r\n        if(size === undefined) {\r\n            size = buf.length;\r\n        }\r\n\r\n        let output = new Float32Array(size);\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            output[i] = buf[i + start];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private onUserMediaLoad() {\r\n        //TODO: check if this event actually triggers change detection. Might have issues with zone.js\r\n        navigator.mediaDevices.ondevicechange = () => this.updateDeviceLists();\r\n        this.updateDeviceLists();\r\n    }\r\n\r\n    private onUserMediaError() {\r\n        console.error('Could not get access to audio inputs');\r\n    }\r\n\r\n    private updateDeviceLists() {\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\r\n            let inputDevices = [];\r\n            let outputDevices = [];\r\n\r\n            devices.forEach((device: MediaDeviceInfo) => {\r\n                //Not sure what the 'Communications' device is...\r\n                if (device.label !== 'Communications') {\r\n                    if (device.kind === 'audioinput') {\r\n                        inputDevices.push(device);\r\n\r\n                    } else if (device.kind === 'audiooutput') {\r\n                        outputDevices.push(device);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.inputDevices.next(inputDevices);\r\n            this.outputDevices.next(outputDevices);\r\n        });\r\n    }\r\n\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {dbMigration1} from \"./migrations/dbMigration1\";\r\nimport {dbMigration20} from \"./migrations/dbMigration20\";\r\nimport {dbMigration21} from \"./migrations/dbMigration21\";\r\n\r\n@Injectable()\r\nexport class Db {\r\n\r\n    static READONLY_TRANSACTION = 'readonly';\r\n    static READWRITE_TRANSACTION = 'readwrite';\r\n    static DB_VERSION = 21;\r\n\r\n    dbInitialized: Promise<IDBDatabase>;\r\n    private db: IDBDatabase;\r\n    private resolveInitialized: (db: IDBDatabase) => void;\r\n    private rejectInitialized: (rejection?) => void;\r\n\r\n    constructor() {\r\n        this.dbInitialized = new Promise((resolve, reject) => {\r\n            this.resolveInitialized = resolve;\r\n            this.rejectInitialized = reject;\r\n        });\r\n    }\r\n\r\n    static reqToPromise(req: IDBRequest): Promise<Event> {\r\n        return new Promise((resolve, reject) => {\r\n            req.onsuccess = resolve;\r\n            req.onerror = reject;\r\n        });\r\n    }\r\n\r\n    initialize() {\r\n        let openRequest = indexedDB.open('dvs', Db.DB_VERSION);\r\n\r\n        let oldVersion;\r\n\r\n        openRequest.onupgradeneeded = function (versionEvent: IDBVersionChangeEvent) {\r\n            let db = versionEvent.target['result'];\r\n            let transaction: IDBTransaction = versionEvent.target['transaction'];\r\n            oldVersion = versionEvent.oldVersion;\r\n\r\n\r\n            if (oldVersion !== undefined) {\r\n                if (oldVersion < 1) {\r\n                    dbMigration1(db);\r\n                }\r\n\r\n                if (oldVersion >= 1 && oldVersion < 20) {\r\n                    dbMigration20(db, transaction);\r\n                }\r\n\r\n                if (oldVersion >= 1 && oldVersion < 21) {\r\n                    dbMigration21(db, transaction);\r\n                }\r\n            }\r\n        };\r\n\r\n        openRequest.onsuccess = (event) => {\r\n            this.db = event.target['result'];\r\n            this.resolveInitialized(this.db);\r\n        };\r\n\r\n        openRequest.onerror = this.rejectInitialized;\r\n\r\n        return this.dbInitialized;\r\n    }\r\n\r\n}","import {MidiMapping} from \"../midi/midiMapper.service\";\r\n\r\nexport class Preferences {\r\n    crossfaderCurveSharpness = 0;\r\n    midiMappings = new Map<string, MidiMapping>();\r\n    enabledMidiInputNames = new Set<string>();\r\n    enabledMidiOutputNames = new Set<string>();\r\n    audioSettings = {\r\n        input: {\r\n            deckA: {controlDeviceId: undefined, liveDeviceId: undefined},\r\n            deckB: {controlDeviceId: undefined, liveDeviceId: undefined}\r\n        }\r\n    }\r\n}","import {Injectable} from '@angular/core';\r\nimport {Db} from \"./db.service\";\r\nimport {Preferences} from \"./preferences\";\r\nimport {MidiMapping} from \"../midi/midiMapper.service\";\r\nimport {AudioSettingsDbFormat} from \"../../app/sideNav/audioSettings/audioSettings.service\";\r\n\r\n@Injectable()\r\nexport class PreferencesDb {\r\n    initialized: Promise<any>;\r\n\r\n    private db: IDBDatabase;\r\n    private preferences: Preferences;\r\n\r\n    constructor(dbService: Db) {\r\n        let resolveInitialized;\r\n        let rejectInitialized;\r\n\r\n        this.initialized = new Promise((resolve, reject) => {\r\n            resolveInitialized = resolve;\r\n            rejectInitialized = reject;\r\n        });\r\n\r\n        dbService.dbInitialized.then((db) => {\r\n            this.db = db;\r\n\r\n            this.preferences = new Preferences();\r\n\r\n            let prefCursor = this.db.transaction(['preferences'], Db.READONLY_TRANSACTION)\r\n                .objectStore('preferences')\r\n                .openCursor();\r\n\r\n            prefCursor.onsuccess = (e) => {\r\n                let cursor: IDBCursorWithValue = e.target['result'];\r\n                if (cursor) {\r\n                    if (!(<string>cursor.key in this.preferences)) {\r\n                        console.warn('Found preference key in DB that does not exist in preference model: ' + cursor.key);\r\n                    }\r\n\r\n                    this.preferences[<string>cursor.key] = cursor.value;\r\n                    cursor.continue();\r\n\r\n                    //Called after all entries have been processed\r\n                } else {\r\n                    resolveInitialized();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    setCrossfaderCurveSharpness(value: number) {\r\n        return this.setPreference('crossfaderCurveSharpness', value);\r\n    }\r\n\r\n    getCrossfaderCurveSharpness(): number {\r\n        return this.preferences.crossfaderCurveSharpness;\r\n    }\r\n\r\n    getEnabledMidiInputNames() {\r\n        return this.preferences.enabledMidiInputNames;\r\n    }\r\n\r\n    setEnabledMidiInputNames(inputs: Set<string>) {\r\n        return this.setPreference('enabledMidiInputNames', inputs);\r\n    }\r\n\r\n    getEnabledMidiOutputNames() {\r\n        return this.preferences.enabledMidiOutputNames;\r\n    }\r\n\r\n    setEnabledMidiOutputNames(outputs: Set<string>) {\r\n        return this.setPreference('enabledMidiOutputNames', outputs);\r\n    }\r\n\r\n    getMidiMappings(): Map<string, MidiMapping> {\r\n        return this.preferences.midiMappings;\r\n    }\r\n\r\n    setMidiMappings(mappings: Map<string, MidiMapping>) {\r\n        return this.setPreference('midiMappings', mappings);\r\n    }\r\n\r\n    getAudioSettings(): AudioSettingsDbFormat {\r\n        return this.preferences.audioSettings;\r\n    }\r\n\r\n    setAudioSettings(settings: AudioSettingsDbFormat) {\r\n        return this.setPreference('audioSettings', settings);\r\n    }\r\n\r\n\r\n    private setPreference(key: string, value) {\r\n        this.preferences[key] = value;\r\n\r\n        return Db.reqToPromise(\r\n            this.db.transaction(['preferences'], Db.READWRITE_TRANSACTION)\r\n                .objectStore('preferences')\r\n                .put(value, key)\r\n        );\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {DeckId} from \"../../app.component\";\r\nimport {BehaviorSubject, Observable} from \"rxjs\";\r\nimport {PreferencesDb} from \"../../../services/db/preferencesDb.service\";\r\nimport {AudioUtil} from \"../../../services/audio/audioUtil.service\";\r\n\r\n@Injectable()\r\nexport class AudioSettings {\r\n    private deckSettings = new Map<DeckId, DeckAudioSettings>();\r\n\r\n    constructor(private preferencesDb: PreferencesDb, audioUtil: AudioUtil) {\r\n        let deckASettings = new DeckAudioSettings();\r\n        let deckBSettings = new DeckAudioSettings();\r\n\r\n        this.deckSettings.set(DeckId.LEFT, deckASettings);\r\n        this.deckSettings.set(DeckId.RIGHT, deckBSettings);\r\n\r\n        preferencesDb.initialized.then(() => {\r\n            let audioSettings: AudioSettingsDbFormat = preferencesDb.getAudioSettings();\r\n            audioUtil.inputDevices$.first().subscribe((inputDevices) => {\r\n                deckASettings.setLiveIn(this.findDeviceById(inputDevices, audioSettings.input.deckA.liveDeviceId));\r\n                deckASettings.setControlIn(this.findDeviceById(inputDevices, audioSettings.input.deckA.controlDeviceId));\r\n                deckBSettings.setLiveIn(this.findDeviceById(inputDevices, audioSettings.input.deckB.liveDeviceId));\r\n                deckBSettings.setControlIn(this.findDeviceById(inputDevices, audioSettings.input.deckB.controlDeviceId));\r\n\r\n                deckASettings.liveIn$.subscribe(() => this.saveAudioSettings());\r\n                deckASettings.controlIn$.subscribe(() => this.saveAudioSettings());\r\n                deckBSettings.liveIn$.subscribe(() => this.saveAudioSettings());\r\n                deckBSettings.controlIn$.subscribe(() => this.saveAudioSettings());\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    getDeckAudioSettings(deckId: DeckId) {\r\n        return this.deckSettings.get(deckId);\r\n    }\r\n\r\n    private saveAudioSettings() {\r\n        let deckAAudioSettings = this.deckSettings.get(DeckId.LEFT);\r\n        let deckBAudioSettings = this.deckSettings.get(DeckId.RIGHT);\r\n\r\n        this.preferencesDb.setAudioSettings({\r\n            input: {\r\n                deckA: {\r\n                    liveDeviceId: deckAAudioSettings.getLiveIn() && deckAAudioSettings.getLiveIn().deviceId,\r\n                    controlDeviceId: deckAAudioSettings.getControlIn() && deckAAudioSettings.getControlIn().deviceId\r\n                },\r\n                deckB: {\r\n                    liveDeviceId: deckBAudioSettings.getLiveIn() && deckBAudioSettings.getLiveIn().deviceId,\r\n                    controlDeviceId: deckBAudioSettings.getControlIn() && deckBAudioSettings.getControlIn().deviceId\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private findDeviceById(deviceList: MediaDeviceInfo[], id: string): MediaDeviceInfo {\r\n        let matchingDevices = deviceList.filter(device => device.deviceId === id);\r\n        if(matchingDevices.length) {\r\n            return matchingDevices[0];\r\n        }\r\n    }\r\n}\r\n\r\nexport class DeckAudioSettings {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    private liveIn = new BehaviorSubject<MediaDeviceInfo>(undefined);\r\n    private controlIn = new BehaviorSubject<MediaDeviceInfo>(undefined);\r\n\r\n    get liveIn$(): Observable<MediaDeviceInfo> {\r\n        return this.liveIn.asObservable().distinctUntilChanged();\r\n    }\r\n\r\n    get controlIn$(): Observable<MediaDeviceInfo> {\r\n        return this.controlIn.asObservable().distinctUntilChanged();\r\n    }\r\n\r\n    getLiveIn(): MediaDeviceInfo {\r\n        return this.liveIn.getValue();\r\n    }\r\n\r\n    getControlIn(): MediaDeviceInfo {\r\n        return this.controlIn.getValue();\r\n    }\r\n\r\n    setLiveIn(device: MediaDeviceInfo) {\r\n        this.liveIn.next(device);\r\n    }\r\n\r\n    setControlIn(device: MediaDeviceInfo) {\r\n        this.controlIn.next(device);\r\n    }\r\n}\r\n\r\nexport interface AudioSettingsDbFormat {\r\n    input: {\r\n        deckA: {\r\n            controlDeviceId: string,\r\n            liveDeviceId: string\r\n        },\r\n        deckB: {\r\n            controlDeviceId: string,\r\n            liveDeviceId: string\r\n        }\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class DspUtil {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    isPlayingForward(leftBuf, rightBuf, periodSamples) {\r\n        let seperation = Math.round(periodSamples * 0.23);\r\n\r\n        let leftDcOffset = 0;\r\n        let rightDcOffset = 0;\r\n        for (let i = 0; i < leftBuf.length; i++) {\r\n            leftDcOffset += leftBuf[i] / leftBuf.length;\r\n            rightDcOffset += rightBuf[i] / rightBuf.length;\r\n        }\r\n\r\n        let leftAbsTotalAmp = 0;\r\n        let rightAbsTotalAmp = 0;\r\n        for (let i = 0; i < leftBuf.length; i++) {\r\n            leftAbsTotalAmp += Math.abs(leftBuf[i] - leftDcOffset);\r\n            rightAbsTotalAmp += Math.abs(rightBuf[i] - rightDcOffset);\r\n        }\r\n\r\n        let leftAmpMult = rightAbsTotalAmp / leftAbsTotalAmp;\r\n\r\n        let forwardSum = 0;\r\n        let reverseSum = 0;\r\n        for(let i = seperation; i < leftBuf.length - seperation; i++) {\r\n            forwardSum += Math.abs((leftBuf[i] - leftDcOffset) * leftAmpMult - (rightBuf[i - seperation] - rightDcOffset));\r\n            reverseSum += Math.abs((leftBuf[i] - leftDcOffset) * leftAmpMult - (rightBuf[i + seperation] - rightDcOffset));\r\n        }\r\n\r\n        let significance = Math.max(forwardSum, reverseSum) / Math.min(forwardSum, reverseSum);\r\n\r\n        if(significance > 2) {\r\n            return forwardSum < reverseSum;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    //TODO make this code less dumb\r\n    isPlayingForwardMaxMin(leftBuf, rightBuf, periodSamples) {\r\n        let nextLeftExtreme = undefined;\r\n        let nextRightExtreme = undefined;\r\n\r\n        let leftMaxes = [];\r\n        let leftMins = [];\r\n        let rightMaxes = [];\r\n        let rightMins = [];\r\n\r\n        for (let i = 1; i < leftBuf.length-1; i++) {\r\n            if(nextLeftExtreme !== 'min' && leftBuf[i-1] <= leftBuf[i] && leftBuf[i] >= leftBuf[i+1]) {\r\n                nextLeftExtreme = 'min';\r\n                leftMaxes.push(i);\r\n            }\r\n\r\n            if(nextLeftExtreme !== 'max' && leftBuf[i-1] >= leftBuf[i] && leftBuf[i] <= leftBuf[i+1]) {\r\n                nextLeftExtreme = 'max';\r\n                leftMins.push(i);\r\n            }\r\n\r\n            if(nextRightExtreme !== 'min' && rightBuf[i-1] <= rightBuf[i] && rightBuf[i] >= rightBuf[i+1]) {\r\n                nextRightExtreme = 'min';\r\n                rightMaxes.push(i);\r\n            }\r\n\r\n            if(nextRightExtreme !== 'max' && rightBuf[i-1] >= rightBuf[i] && rightBuf[i] <= rightBuf[i+1]) {\r\n                nextRightExtreme = 'max';\r\n                rightMins.push(i);\r\n            }\r\n        }\r\n\r\n        let leftMaxI = 0;\r\n        let rightMaxI = 0;\r\n\r\n        let forwardCount = 0;\r\n        let reverseCount = 0;\r\n\r\n        while(leftMaxI < leftMaxes.length) {\r\n\r\n\r\n            while(rightMaxI < rightMaxes.length-1 && rightMaxes[rightMaxI+1] < leftMaxes[leftMaxI]) {\r\n                rightMaxI++;\r\n            }\r\n\r\n            if(rightMaxI <= rightMaxes.length-1) {\r\n                if(leftMaxes[leftMaxI] - rightMaxes[rightMaxI] < rightMaxes[rightMaxI+1] - leftMaxes[leftMaxI]) {\r\n                    forwardCount++;\r\n                } else {\r\n                    reverseCount++;\r\n                }\r\n            }\r\n\r\n            leftMaxI++;\r\n        }\r\n\r\n        //1 is best.\r\n        let confidence = Math.abs(forwardCount - reverseCount) / (forwardCount + reverseCount);\r\n\r\n        if(confidence < 0.12) {\r\n            return undefined;\r\n        } else {\r\n            return forwardCount > reverseCount;\r\n        }\r\n\r\n    }\r\n\r\n    getRms(buf) {\r\n        let rms = 0;\r\n\r\n        for (let i = 0; i < buf.length; i++) {\r\n            let val = buf[i];\r\n            rms += val * val;\r\n        }\r\n        rms = Math.sqrt(rms / buf.length);\r\n        return rms;\r\n    }\r\n\r\n    autoCorrelate(buf, sampleRate) {\r\n        const MIN_SAMPLES = 0;  // will be initialized when AudioContext is created.\r\n        const GOOD_ENOUGH_CORRELATION = 0.1; // this is the \"bar\" for how close a correlation needs to be\r\n\r\n        let SIZE = buf.length;\r\n        let offsetIterations = Math.floor(SIZE * 3/4);\r\n        let compareChunkSize = Math.floor(SIZE / 4);\r\n        let best_offset = -1;\r\n        let best_correlation = 0;\r\n        let foundGoodCorrelation = false;\r\n        let correlations = new Array(offsetIterations);\r\n\r\n        let rms = this.getRms(buf);\r\n        // not enough signal\r\n        if (rms < 0.05) {\r\n            return -1;\r\n        }\r\n\r\n        let lastCorrelation = 1;\r\n        for (let offset = MIN_SAMPLES; offset < offsetIterations; offset++) {\r\n            let correlation = 0;\r\n\r\n            for (let i = 0; i < compareChunkSize; i++) {\r\n                correlation += Math.abs((buf[i]) - (buf[i + offset]));\r\n            }\r\n            correlation = 1 - (correlation / compareChunkSize);\r\n            correlations[offset] = correlation; // store it, for the tweaking we need to do below.\r\n            if ((correlation > GOOD_ENOUGH_CORRELATION) && (correlation > lastCorrelation)) {\r\n                foundGoodCorrelation = true;\r\n                if (correlation > best_correlation) {\r\n                    best_correlation = correlation;\r\n                    best_offset = offset;\r\n                }\r\n            } else if (foundGoodCorrelation) {\r\n                // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\r\n                // Now we need to tweak the offset - by interpolating between the values to the left and right of the\r\n                // best offset, and shifting it a bit.  This is complex, and HACKY in this code (happy to take PRs!) -\r\n                // we need to do a curve fit on correlations[] around best_offset in order to better determine precise\r\n                // (anti-aliased) offset.\r\n\r\n                // we know best_offset >=1,\r\n                // since foundGoodCorrelation cannot go to true until the second pass (offset=1), and\r\n                // we can't drop into this clause until the following pass (else if).\r\n                let shift = (correlations[best_offset + 1] - correlations[best_offset - 1]) / correlations[best_offset];\r\n                return sampleRate / (best_offset + (8 * shift));\r\n            }\r\n            lastCorrelation = correlation;\r\n        }\r\n        if (best_correlation > 0.01 && best_offset !== offsetIterations-1) {\r\n            // console.log(\"f = \" + sampleRate/best_offset + \"Hz (rms: \" + rms + \" confidence: \" + best_correlation + \")\")\r\n            return sampleRate / best_offset;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    //Returns phase difference in samples between buf1 and buf2\r\n    //TODO: don't need to wait for correlation > lastCorrelation to set foundGoodCorrelation\r\n    crossCorrelate(buf1, buf2) {\r\n        const MIN_SAMPLES = 0;  // will be initialized when AudioContext is created.\r\n        const GOOD_ENOUGH_CORRELATION = 0.9; // this is the \"bar\" for how close a correlation needs to be\r\n\r\n        let SIZE = Math.min(buf1.length, buf2.length);\r\n        let MAX_SAMPLES = Math.floor(SIZE / 2);\r\n        let best_offset = -1;\r\n        let best_correlation = 0;\r\n        let foundGoodCorrelation = false;\r\n        let correlations = new Array(MAX_SAMPLES);\r\n\r\n        let lastCorrelation = 1;\r\n        for (let offset = MIN_SAMPLES; offset < MAX_SAMPLES; offset++) {\r\n            let correlation = 0;\r\n\r\n            for (let i = 0; i < MAX_SAMPLES; i++) {\r\n                correlation += Math.abs((buf1[i]) - (buf2[i + offset]));\r\n            }\r\n            correlation = 1 - (correlation / MAX_SAMPLES);\r\n            correlations[offset] = correlation; // store it, for the tweaking we need to do below.\r\n            if ((correlation > GOOD_ENOUGH_CORRELATION) && (correlation > lastCorrelation)) {\r\n                foundGoodCorrelation = true;\r\n                if (correlation > best_correlation) {\r\n                    best_correlation = correlation;\r\n                    best_offset = offset;\r\n                }\r\n            } else if (foundGoodCorrelation) {\r\n                // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\r\n                // Now we need to tweak the offset - by interpolating between the values to the left and right of the\r\n                // best offset, and shifting it a bit.  This is complex, and HACKY in this code (happy to take PRs!) -\r\n                // we need to do a curve fit on correlations[] around best_offset in order to better determine precise\r\n                // (anti-aliased) offset.\r\n\r\n                // we know best_offset >=1,\r\n                // since foundGoodCorrelation cannot go to true until the second pass (offset=1), and\r\n                // we can't drop into this clause until the following pass (else if).\r\n                let shift = (correlations[best_offset + 1] - correlations[best_offset - 1]) / correlations[best_offset];\r\n                return best_offset + (8 * shift);\r\n            }\r\n            lastCorrelation = correlation;\r\n        }\r\n        if (best_correlation > 0.01) {\r\n            return best_offset;\r\n        }\r\n        return -1;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\n\r\n//Based on https://github.com/jussi-kalliokoski/sink.js/blob/master/src/utils/resample.js\r\n@Injectable()\r\nexport class Resampler {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * Resamples a sample buffer from a frequency to a frequency and / or from a sample rate to a sample rate.\r\n     *\r\n     * @static Sink\r\n     * @name resample\r\n     *\r\n     * @arg {Buffer} buffer The sample buffer to resample.\r\n     * @arg {Number} fromRate The original sample rate of the buffer, or if the last argument, the speed ratio to convert with.\r\n     * @arg {Number} fromFrequency The original frequency of the buffer, or if the last argument, used as toRate and the secondary comparison will not be made.\r\n     * @arg {Number} toRate The sample rate of the created buffer.\r\n     * @arg {Number} toFrequency The frequency of the created buffer.\r\n     *\r\n     * @return The new resampled buffer.\r\n     */\r\n    resample(buffer, fromRate /* or speed */, fromFrequency /* or toRate */, toRate?, toFrequency?): Float32Array {\r\n        let argc = arguments.length;\r\n\r\n        let speed;\r\n        if(argc === 2) {\r\n            speed = fromRate;\r\n        } else if (argc === 3) {\r\n            speed = fromRate / fromFrequency;\r\n        } else {\r\n            speed = toRate / fromRate * toFrequency / fromFrequency;\r\n        }\r\n\r\n        let l = buffer.length;\r\n        let length = Math.ceil(l / speed);\r\n        let newBuffer = new Float32Array(length);\r\n        let i, n;\r\n        for (i = 0, n = 0; i < l; i += speed) {\r\n            newBuffer[n++] = this.interpolate(buffer, i);\r\n        }\r\n        return newBuffer;\r\n    };\r\n\r\n    private interpolate(arr, pos) {\r\n        let first = Math.floor(pos),\r\n            second = first + 1,\r\n            frac = pos - first;\r\n\r\n        second = second < arr.length ? second : first;\r\n        return arr[first] * (1 - frac) + arr[second] * frac;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {AudioUtil} from \"./audio/audioUtil.service\";\r\nimport {DeckId} from \"../app/app.component\";\r\n\r\n@Injectable()\r\nexport class AudioOutput {\r\n\r\n    private inputGainNodes = new Map<DeckId, GainNode>();\r\n    private masterGain: GainNode;\r\n\r\n    constructor(private audioUtil: AudioUtil) {\r\n        this.inputGainNodes.set(DeckId.LEFT, audioUtil.context.createGain());\r\n        this.inputGainNodes.set(DeckId.RIGHT, audioUtil.context.createGain());\r\n\r\n        this.masterGain = audioUtil.context.createGain();\r\n\r\n        this.inputGainNodes.get(DeckId.LEFT).connect(this.masterGain);\r\n        this.inputGainNodes.get(DeckId.RIGHT).connect(this.masterGain);\r\n\r\n        this.masterGain.connect(audioUtil.context.destination);\r\n    }\r\n\r\n    getInputForDeck(deckId: DeckId): AudioNode {\r\n        return this.inputGainNodes.get(deckId);\r\n    }\r\n\r\n    setDeckGain(deckId: DeckId, gain: number) {\r\n        this.inputGainNodes.get(deckId).gain.value = gain;\r\n    }\r\n\r\n    setMasterGain(gain: number) {\r\n        this.masterGain.gain.value = gain;\r\n    }\r\n\r\n    getDeckGain(deckId: DeckId): number {\r\n        return this.inputGainNodes.get(deckId).gain.value;\r\n    }\r\n\r\n    getMasterGain(): number {\r\n        return this.masterGain.gain.value;\r\n    }\r\n\r\n}","import {DeckId} from \"../app/app.component\";\r\nimport {ActiveSong} from \"./activeSong\";\r\nimport {AudioUtil} from \"./audio/audioUtil.service\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {AudioSettings} from \"../app/sideNav/audioSettings/audioSettings.service\";\r\nimport {DspUtil} from \"./audio/dspUtil.service\";\r\nimport {Resampler} from \"./audio/resampler.service\";\r\nimport {AudioOutput} from \"./audioOutput.service\";\r\n\r\n@Injectable()\r\nexport class ActiveSongs {\r\n    private activeSongByDeckId = new Map<DeckId, ActiveSong>();\r\n\r\n    constructor(audioUtil: AudioUtil, audioSettings: AudioSettings, dspUtil: DspUtil, resampler: Resampler, audioOutput: AudioOutput) {\r\n        this.activeSongByDeckId.set(\r\n            DeckId.LEFT,\r\n            new ActiveSong(DeckId.LEFT, audioUtil, audioSettings.getDeckAudioSettings(DeckId.LEFT), dspUtil, resampler, audioOutput)\r\n        );\r\n        this.activeSongByDeckId.set(\r\n            DeckId.RIGHT,\r\n            new ActiveSong(DeckId.RIGHT, audioUtil, audioSettings.getDeckAudioSettings(DeckId.RIGHT), dspUtil, resampler, audioOutput)\r\n        );\r\n    }\r\n\r\n    getActiveSong(deckId: DeckId) {\r\n        return this.activeSongByDeckId.get(deckId);\r\n    }\r\n}","import {Subject} from \"rxjs\";\r\nimport {NgZone, Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class AnimationFrames {\r\n    private framesSubject = new Subject();\r\n\r\n    public frames = this.framesSubject.asObservable();\r\n\r\n    constructor(ngZone: NgZone) {\r\n        ngZone.runOutsideAngular(() => {\r\n            requestAnimationFrame((time) => {\r\n                this.onFrame(time)\r\n            });\r\n        });\r\n    }\r\n\r\n    private onFrame(time) {\r\n        this.framesSubject.next(time);\r\n        requestAnimationFrame((time) => {\r\n            this.onFrame(time)\r\n        });\r\n    }\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\n@Pipe({name: 'formatTime'})\r\nexport class FormatTimePipe implements PipeTransform {\r\n    transform(timeInSeconds: number): string {\r\n        let minutes = Math.round(timeInSeconds / 60).toString();\r\n        let seconds = Math.round(timeInSeconds % 60).toString();\r\n\r\n        seconds.length === 1 && (seconds = '0' + seconds);\r\n\r\n        return `${minutes}:${seconds}`;\r\n    }\r\n}","import {SongDetails} from \"./songDetails\";\r\nexport class Song {\r\n    details: SongDetails;\r\n    buffer: ArrayBuffer;\r\n    waveformCompressed100x: number[];\r\n\r\n    constructor({details, buffer, waveformCompressed100X}: {details: SongDetails, buffer: ArrayBuffer, waveformCompressed100X: number[]}) {\r\n        this.details = details;\r\n        this.buffer = buffer;\r\n        this.waveformCompressed100x = waveformCompressed100X;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {WorkerType, WorkerUtil} from './workerUtil';\r\n\r\n@Injectable()\r\nexport class ImageUtil {\r\n    constructor(private workerUtil: WorkerUtil) {\r\n\r\n    }\r\n\r\n    byteArrayToBase64(byteArr: number[]): Promise<string> {\r\n        return this.workerUtil.run({\r\n            workerType: WorkerType.Image,\r\n            method: 'byteArrayToBase64',\r\n            params: [byteArr]\r\n        });\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Song} from \"../../models/song\";\r\nimport {SongDetails, SongDetailsDraft} from \"../../models/songDetails\";\r\nimport {WaveformUtil} from \"../audio/waveformUtil.service\";\r\nimport {ThemeId} from \"../../app/app.component\";\r\nimport {Db} from \"./db.service\";\r\nimport {AudioUtil} from \"../audio/audioUtil.service\";\r\nimport {ImageUtil} from '../imageUtil.service';\r\n\r\n@Injectable()\r\nexport class SongDb {\r\n    db: IDBDatabase;\r\n\r\n    private allSongDetails$ = new BehaviorSubject<SongDetails[]>([]);\r\n\r\n    constructor(dbService: Db, private waveformUtil: WaveformUtil, private audioUtil: AudioUtil, private imageUtil: ImageUtil) {\r\n        dbService.dbInitialized.then((db) => {\r\n            this.db = db;\r\n\r\n            let getMetadataTransaction = this.db.transaction(['songDetails'], Db.READONLY_TRANSACTION);\r\n            let getMetadataCursor = getMetadataTransaction.objectStore('songDetails').openCursor();\r\n\r\n            let allMetadata = [];\r\n            getMetadataCursor.onsuccess = (e) => {\r\n                let cursor: IDBCursorWithValue = e.target['result'];\r\n                if (cursor) {\r\n                    allMetadata.push(cursor.value);\r\n                    cursor.continue();\r\n                }\r\n            };\r\n\r\n            getMetadataTransaction.oncomplete = () => {\r\n                this.allSongDetails$.next(allMetadata);\r\n            };\r\n        });\r\n    }\r\n\r\n    getAllSongDetails(): Observable<SongDetails[]> {\r\n        return this.allSongDetails$.asObservable();\r\n    }\r\n\r\n    updateSongDetails(details: SongDetails) {\r\n        let updateTransaction = this.db.transaction(['songDetails'], Db.READWRITE_TRANSACTION);\r\n\r\n        return Db.reqToPromise(\r\n            updateTransaction\r\n                .objectStore('songDetails')\r\n                .put(details)\r\n        );\r\n    }\r\n\r\n    //TODO: figure out why this locks up the browser\r\n    addSong(arrayBuffer: ArrayBuffer, audioBuffer: AudioBuffer, tags, fileName: string): Promise<void> {\r\n        //setInterval(() => console.log('tick'));\r\n        console.log('adding song', performance.now());\r\n        let songDetails: SongDetails;\r\n        let songDetailsDraft: SongDetailsDraft = {\r\n            title: undefined,\r\n            lengthSeconds: audioBuffer.duration,\r\n            positiveSamples: undefined,\r\n            negativeSamples: undefined,\r\n            numSamples: undefined,\r\n            waveformDataUrl: undefined,\r\n            cues: []\r\n        };\r\n        let addTransaction: IDBTransaction;\r\n        let waveformData;\r\n\r\n        return this.waveformUtil.getWaveformData(audioBuffer)\r\n            .then((waveformDataResult: any) => {\r\n                waveformData = waveformDataResult;\r\n                songDetailsDraft.positiveSamples = waveformData.positiveSamples;\r\n                songDetailsDraft.negativeSamples = waveformData.negativeSamples;\r\n                songDetailsDraft.numSamples = waveformData.numSamples;\r\n\r\n                console.log('got the waveform', performance.now());\r\n                songDetailsDraft.waveformDataUrl = this.waveformUtil.generateDataUrlWaveform(\r\n                    waveformData.positiveSamples,\r\n                    waveformData.negativeSamples,\r\n                    this.audioUtil.context.sampleRate,\r\n                    150,\r\n                    35,\r\n                    ThemeId.DEFAULT,\r\n                    [],\r\n                    0,\r\n                    0\r\n                );\r\n\r\n\r\n                console.log('generated waveform dataurl', performance.now());\r\n\r\n                if (tags) {\r\n                    let parsedTrack = parseInt(tags.track);\r\n                    let parsedYear = parseInt(tags.year);\r\n\r\n                    songDetailsDraft.title = tags.title;\r\n                    songDetailsDraft.album = tags.album;\r\n                    songDetailsDraft.artist = tags.artist;\r\n                    songDetailsDraft.genre = tags.genre;\r\n                    !isNaN(parsedTrack) && (songDetailsDraft.track = parsedTrack);\r\n                    !isNaN(parsedYear) && (songDetailsDraft.year = parsedYear);\r\n\r\n                    if (tags.picture) {\r\n                        return this.imageUtil.byteArrayToBase64(tags.picture.data)\r\n                            .then((base64Album) => this.resizeBase64Img(tags.picture.format, base64Album, 100, 100))\r\n                            .then(albumDataUrl => (songDetailsDraft.albumDataUrl = albumDataUrl));\r\n                    }\r\n                }\r\n            })\r\n            .then(() => {\r\n                if (!songDetailsDraft.title) {\r\n                    songDetailsDraft.title = fileName;\r\n                }\r\n\r\n                addTransaction = this.db.transaction(['songDetails', 'songBuffer'], Db.READWRITE_TRANSACTION);\r\n\r\n                return Db.reqToPromise(\r\n                    addTransaction\r\n                        .objectStore('songDetails')\r\n                        .add(songDetailsDraft)\r\n                )\r\n            })\r\n            .then((e: Event) => {\r\n            console.log('done adding to indexed db', performance.now());\r\n                let id = e.target['result'];\r\n                songDetails = Object.assign({}, songDetailsDraft, {id: id});\r\n                return id;\r\n            })\r\n            .then((id) => {\r\n                let songBuffer: SongBuffer = {\r\n                    buffer: arrayBuffer,\r\n                    waveformCompressed100X: waveformData.compress100X\r\n                };\r\n\r\n                return Db.reqToPromise(\r\n                    addTransaction\r\n                        .objectStore('songBuffer')\r\n                        .add(songBuffer, id)\r\n                );\r\n            })\r\n            .then(() => {\r\n            console.log('done saving song buffer in indexed db', performance.now());\r\n                this.allSongDetails$.next([...this.allSongDetails$.getValue(), songDetails]);\r\n            });\r\n    }\r\n\r\n    deleteSong(songDetails: SongDetails) {\r\n        let deleteTransaction = this.db.transaction(['songDetails', 'songBuffer'], Db.READWRITE_TRANSACTION);\r\n        let deleteDetailsReq = deleteTransaction.objectStore('songDetails').delete(songDetails.id);\r\n        let deleteBufferReq = deleteTransaction.objectStore('songBuffer').delete(songDetails.id);\r\n\r\n        Promise.all([Db.reqToPromise(deleteDetailsReq), Db.reqToPromise(deleteBufferReq)])\r\n            .then(() => {\r\n                let currentDetails = this.allSongDetails$.getValue();\r\n                let filteredDetails = currentDetails.filter(d => d.id !== songDetails.id);\r\n                this.allSongDetails$.next(filteredDetails);\r\n            });\r\n    }\r\n\r\n    getSong(songDetails: SongDetails): Promise<Song> {\r\n        return Db.reqToPromise(\r\n            this.db.transaction(['songBuffer'], Db.READONLY_TRANSACTION)\r\n                .objectStore('songBuffer')\r\n                .get(songDetails.id)\r\n        )\r\n            .then((bufferEvent: Event) => {\r\n                let songBuffer: SongBuffer = bufferEvent.target['result'];\r\n                return new Song({\r\n                    details: songDetails,\r\n                    buffer: songBuffer.buffer,\r\n                    waveformCompressed100X: songBuffer.waveformCompressed100X\r\n                });\r\n            });\r\n    }\r\n\r\n    //based on http://stackoverflow.com/a/20965997/373655\r\n    resizeBase64Img(type: string, base64: string, maxWidth: number, maxHeight: number): Promise<string> {\r\n        return new Promise((resolve) => {\r\n            let img = new Image;\r\n\r\n            img.onload = resizeImage;\r\n            img.src = `data:${type};base64,${base64}`;\r\n\r\n            function resizeImage() {\r\n                let targetWidth = img.width;\r\n                let targetHeight = img.height;\r\n\r\n                if (img.width > maxWidth) {\r\n                    targetWidth = maxWidth;\r\n                    targetHeight = img.height / (img.width / maxWidth);\r\n                }\r\n\r\n                if (targetHeight > maxHeight) {\r\n                    targetHeight = maxHeight;\r\n                    targetWidth = img.width / (img.height / maxHeight);\r\n                }\r\n                resolve(imageToDataUri(img, targetWidth, targetHeight));\r\n            }\r\n\r\n            function imageToDataUri(img, width, height) {\r\n\r\n                // create an off-screen canvas\r\n                let canvas = document.createElement('canvas'),\r\n                    ctx = canvas.getContext('2d');\r\n\r\n                // set its dimension to target size\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n\r\n                // draw source image into the off-screen canvas:\r\n                ctx.drawImage(img, 0, 0, width, height);\r\n\r\n                // encode image to data-uri with base64 version of compressed image\r\n                return canvas.toDataURL('image/jpeg', 0.8);\r\n            }\r\n        });\r\n    }\r\n}","import {Song} from \"../../models/song\";\r\nimport {SongDetails} from \"../../models/songDetails\";\r\nimport {Component, ElementRef, Input, OnInit, AfterViewInit} from \"@angular/core\";\r\nimport {WaveformUtil} from \"../../services/audio/waveformUtil.service\";\r\nimport {DeckId, ThemeId} from \"../app.component\";\r\nimport {ActiveSongs} from \"../../services/activeSongs.service\";\r\nimport {ActiveSong} from \"../../services/activeSong\";\r\nimport {AnimationFrames} from \"../../services/animationFrames.service\";\r\nimport {Observable} from \"rxjs\";\r\nimport {FormatTimePipe} from \"../../pipes/formatTime.pipe\";\r\nimport {SongDb} from \"../../services/db/songDb.service\";\r\nimport {AudioUtil} from \"../../services/audio/audioUtil.service\";\r\n\r\n@Component({\r\n    selector: 'deck',\r\n    templateUrl: 'deck.component.html',\r\n    styleUrls: ['deck.component.css']\r\n})\r\nexport class DeckComponent implements OnInit, AfterViewInit {\r\n    @Input() deckId: DeckId;\r\n    activeSong: ActiveSong;\r\n    deckElem: HTMLElement;\r\n    waveformElem: HTMLCanvasElement;\r\n    formattedSongOffset$: Observable<string>;\r\n    loadingSong = false;\r\n    cueMode = CueMode.Jump;\r\n\r\n    CueMode = CueMode;\r\n\r\n    songOffsetAtLastDraw: number;\r\n\r\n    inputType: DeckInputType = DeckInputType.File;\r\n    inputTypeOptions = [\r\n        {label: 'File', type: DeckInputType.File},\r\n        {label: 'Live', type: DeckInputType.Live}\r\n    ];\r\n\r\n    get deckName() {\r\n        return DeckId[this.deckId];\r\n    }\r\n\r\n    constructor(\r\n        private elementRef: ElementRef,\r\n        private waveformUtil: WaveformUtil,\r\n        private audioUtil: AudioUtil,\r\n        private activeSongs: ActiveSongs,\r\n        private animationFrames: AnimationFrames,\r\n        private formatTime: FormatTimePipe,\r\n        private songDb: SongDb\r\n    ) {\r\n        animationFrames.frames.subscribe((time) => this.onAnimationFrame());\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.activeSong = this.activeSongs.getActiveSong(this.deckId);\r\n\r\n        this.formattedSongOffset$ = Observable.interval(100 /* ms */)\r\n            .map(() => {\r\n                if (this.activeSong.isLoaded) {\r\n                    return this.formatTime.transform(this.activeSong.currentSongOffset);\r\n                } else {\r\n                    return '0:00';\r\n                }\r\n            })\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.deckElem = <HTMLElement>this.elementRef.nativeElement;\r\n        this.waveformElem = <HTMLCanvasElement>this.deckElem.querySelector('.waveform');\r\n        this.waveformElem.width = this.waveformElem.offsetWidth;\r\n        this.waveformElem.getContext('2d').translate(0.5, 0);\r\n    }\r\n\r\n    loadSong(song: Song) {\r\n        this.loadingSong = true;\r\n        this.activeSong.loadSong(song)\r\n            .then(\r\n                () => {\r\n                    this.songOffsetAtLastDraw = undefined;\r\n                    this.loadingSong = false;\r\n                },\r\n                () => this.loadingSong = false\r\n            );\r\n    }\r\n\r\n    play() {\r\n        if (this.activeSong.isLoaded && !this.activeSong.isPlaying) {\r\n            this.activeSong.playBuffer();\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this.activeSong.isLoaded && this.activeSong.isPlaying) {\r\n            this.activeSong.pauseBuffer();\r\n        }\r\n    }\r\n\r\n    onAnimationFrame() {\r\n        if (this.activeSong.isLoaded) {\r\n            this.drawWaveform(this.activeSong.song.details);\r\n        }\r\n    }\r\n\r\n    drawWaveform(songDetails: SongDetails) {\r\n        let positiveSamples = this.waveformUtil.projectWaveform(\r\n            songDetails.positiveSamples,\r\n            songDetails.positiveSamples.length / songDetails.lengthSeconds,\r\n            this.waveformElem.width\r\n        );\r\n\r\n        let negativeSamples = this.waveformUtil.projectWaveform(\r\n            songDetails.negativeSamples,\r\n            songDetails.negativeSamples.length / songDetails.lengthSeconds,\r\n            this.waveformElem.width\r\n        );\r\n\r\n        let currentSongOffset = this.activeSong.currentSongOffset;\r\n\r\n        let relativeSongOffset = currentSongOffset / this.activeSong.song.details.lengthSeconds;\r\n        let curSample = Math.round(relativeSongOffset * this.waveformElem.width);\r\n\r\n        let drawFromX = 0;\r\n        let drawToX = this.waveformElem.width;\r\n\r\n        if (this.songOffsetAtLastDraw !== undefined) {\r\n            let timeElapsed = currentSongOffset - this.songOffsetAtLastDraw;\r\n            let redrawWidth = this.waveformElem.width * (timeElapsed / this.activeSong.song.details.lengthSeconds);\r\n\r\n            if (redrawWidth < this.waveformElem.width) {\r\n                if (redrawWidth > 0) {\r\n                    drawFromX = Math.max(curSample - Math.ceil(redrawWidth), 0);\r\n                    drawToX = curSample;\r\n                } else {\r\n                    drawFromX = curSample;\r\n                    drawToX = Math.min(curSample + Math.ceil(-redrawWidth), this.waveformElem.width);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.songOffsetAtLastDraw = currentSongOffset;\r\n\r\n        this.waveformUtil.drawWaveform({\r\n            canvas: this.waveformElem,\r\n            themeId: ThemeId.fromDeckId(this.deckId),\r\n            positiveSamples,\r\n            negativeSamples,\r\n            firstColorPixel: curSample,\r\n            drawFromX,\r\n            drawToX\r\n        });\r\n        this.waveformUtil.overlayCues(this.waveformElem, songDetails.cues, 0, songDetails.lengthSeconds)\r\n    }\r\n\r\n    onCanvasClick(event) {\r\n        if (this.activeSong.isLoaded) {\r\n            let relativeSongOffse = event.offsetX / this.waveformElem.offsetWidth;\r\n            this.activeSong.setSongOffset(relativeSongOffse * this.activeSong.song.details.lengthSeconds);\r\n        }\r\n    }\r\n\r\n    cueClicked(index) {\r\n        if (this.activeSong.isLoaded) {\r\n            let cues = this.activeSong.song.details.cues;\r\n            let updateRequired = false;\r\n\r\n\r\n            switch (this.cueMode) {\r\n                case CueMode.Jump: {\r\n                    if (cues[index]) {\r\n                        this.activeSong.setSongOffset(cues[index]);\r\n                    } else {\r\n                        cues[index] = this.activeSong.currentSongOffset;\r\n                        updateRequired = true;\r\n                    }\r\n                    break;\r\n                }\r\n                case CueMode.Set: {\r\n                    cues[index] = this.activeSong.currentSongOffset;\r\n                    this.cueMode = CueMode.Jump;\r\n                    updateRequired = true;\r\n                    break;\r\n                }\r\n                case CueMode.Delete: {\r\n                    cues[index] = undefined;\r\n                    this.cueMode = CueMode.Jump;\r\n                    updateRequired = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (updateRequired) {\r\n                this.activeSong.song.details.waveformDataUrl = this.waveformUtil.generateDataUrlWaveform(\r\n                    this.activeSong.song.details.positiveSamples,\r\n                    this.activeSong.song.details.negativeSamples,\r\n                    this.audioUtil.context.sampleRate,\r\n                    150,\r\n                    35,\r\n                    ThemeId.DEFAULT,\r\n                    this.activeSong.song.details.cues,\r\n                    0,\r\n                    this.activeSong.song.details.lengthSeconds\r\n                );\r\n\r\n                this.songDb.updateSongDetails(this.activeSong.song.details);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    indexArray(num: number) {\r\n        return Array(num).fill(0).map((x, i) => i);\r\n    }\r\n}\r\n\r\nexport enum DeckInputType {File, Live}\r\nexport enum CueMode {Jump, Set, Delete}","import {Injectable} from \"@angular/core\";\r\nimport {BehaviorSubject, Observable} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class SideNav {\r\n    private state = new BehaviorSubject(SideNavState.Closed);\r\n\r\n    get state$() : Observable<SideNavState> {\r\n        return this.state.asObservable();\r\n    }\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    setState(state: SideNavState) {\r\n        this.state.next(state);\r\n    }\r\n\r\n    getState(): SideNavState {\r\n        return this.state.getValue();\r\n    }\r\n}\r\n\r\nexport enum SideNavState {\r\n    Closed, Audio, Midi\r\n}","import {Injectable} from \"@angular/core\";\r\nimport MIDIAccess = WebMidi.MIDIAccess;\r\n\r\n@Injectable()\r\nexport class MidiUtil {\r\n\r\n    midiInitialized: Promise<MIDIAccess>;\r\n    midi: MIDIAccess;\r\n\r\n    private resolveMidiInitialized: (access: MIDIAccess) => void;\r\n    private rejectMidiInitialized: (rejection?) => void;\r\n\r\n    constructor() {\r\n        this.midiInitialized = new Promise((resolve, reject) => {\r\n            this.resolveMidiInitialized = resolve;\r\n            this.rejectMidiInitialized = reject;\r\n        });\r\n    }\r\n\r\n    initialize() {\r\n        if (navigator.requestMIDIAccess) {\r\n            navigator.requestMIDIAccess()\r\n                .then((midiAccess) => {\r\n                    this.midi = midiAccess;\r\n                    this.resolveMidiInitialized(midiAccess);\r\n                })\r\n                .catch(() => {\r\n                    this.rejectMidiInitialized();\r\n                    console.error(\"No access to MIDI devices or your browser doesn't support WebMIDI API\");\r\n                });\r\n        } else {\r\n            this.rejectMidiInitialized();\r\n            console.error(\"No MIDI support in your browser.\");\r\n        }\r\n    }\r\n\r\n    parseRawMsg(rawMessage: Uint8Array): MidiMsg {\r\n        let byte1 = rawMessage[0];\r\n        let byte2 = rawMessage[1];\r\n        let byte3 = rawMessage[2];\r\n\r\n        let msgType: MidiMsgType = byte1 >> 4;\r\n        let channel = (byte1 & 0b00001111) + 1;\r\n\r\n        let subType: number;\r\n        let amount: number;\r\n\r\n        switch (msgType) {\r\n            case MidiMsgType.ProgramChange: {\r\n                subType = byte2;\r\n                amount = 1;\r\n                break;\r\n            }\r\n            case MidiMsgType.ChannelAfterTouch: {\r\n                subType = 0;\r\n                amount = byte2 / 127;\r\n                break;\r\n            }\r\n            case MidiMsgType.PitchBend: {\r\n                subType = 0;\r\n                amount = ((byte3 << 7) + byte2) / ((1 << 14) - 1);\r\n                break;\r\n            }\r\n            default: {\r\n                subType = byte2;\r\n                amount = byte3 / 127;\r\n            }\r\n        }\r\n\r\n        return {msgType, channel, subType, amount};\r\n    }\r\n\r\n    serializeMsg(msg: MidiMsg): number[] {\r\n        let byte1 = (msg.msgType << 4) + (msg.channel - 1);\r\n\r\n        let byte2;\r\n        let byte3;\r\n\r\n        switch (msg.msgType) {\r\n            case MidiMsgType.ProgramChange: {\r\n                byte2 = msg.subType;\r\n                byte3 = 0;\r\n                break;\r\n            }\r\n            case MidiMsgType.ChannelAfterTouch: {\r\n                byte2 = Math.round(msg.amount * 127);\r\n                byte3 = 0;\r\n                break;\r\n            }\r\n            case MidiMsgType.PitchBend: {\r\n                let integerAmount = Math.round(msg.amount * ((1 << 14) - 1));\r\n                byte2 = integerAmount & 0b1111111;\r\n                byte3 = integerAmount >> 7;\r\n                break;\r\n            }\r\n            default: {\r\n                byte2 = msg.subType;\r\n                byte3 = Math.round(msg.amount * 127);\r\n            }\r\n        }\r\n\r\n        return [byte1, byte2, byte3];\r\n    }\r\n}\r\n\r\nexport enum MidiMsgType {\r\n    NoteOff = 8,\r\n    NoteOn = 9,\r\n    PolyAfterTouch = 10,\r\n    CC = 11,\r\n    ProgramChange = 12,\r\n    ChannelAfterTouch = 13,\r\n    PitchBend = 14,\r\n    SysEx = 15\r\n}\r\n\r\nexport interface MidiControl {\r\n    msgType: MidiMsgType,\r\n    //1 - 16\r\n    channel: number;\r\n    //0 - 127\r\n    subType: number;\r\n}\r\n\r\nexport interface MidiMsg extends MidiControl {\r\n    //0 - 1\r\n    amount: number;\r\n}","import {Component, ViewChildren, QueryList, AfterViewInit} from '@angular/core';\r\nimport {DeckComponent} from \"./deck/deck.component\";\r\nimport {LoadSongEvent} from \"./library/library.component\";\r\nimport {SideNav, SideNavState} from \"../services/sidenav.service\";\r\nimport {MidiUtil} from \"../services/midi/midiUtil.service\";\r\nimport {Db} from \"../services/db/db.service\";\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'app.component.html',\r\n    styleUrls: ['app.component.css']\r\n})\r\nexport class AppComponent implements AfterViewInit {\r\n    DeckId = DeckId;\r\n    @ViewChildren(DeckComponent) decksQuery: QueryList<DeckComponent>;\r\n    deck1: DeckComponent;\r\n    deck2: DeckComponent;\r\n\r\n    SideNavState = SideNavState;\r\n\r\n    constructor(public sideNav: SideNav, midiUtil: MidiUtil, db: Db) {\r\n        db.initialize();\r\n        midiUtil.initialize();\r\n\r\n        if ('serviceWorker' in navigator) {\r\n            navigator['serviceWorker'].register('./sw.js');\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        [this.deck1, this.deck2] = this.decksQuery.toArray()\r\n    }\r\n\r\n    onLoadSong({song, deckId}: LoadSongEvent) {\r\n        let deck: DeckComponent = this[`deck${deckId}`];\r\n        deck.loadSong(song);\r\n    }\r\n\r\n    onCloseSideNav() {\r\n        this.sideNav.setState(SideNavState.Closed);\r\n    }\r\n}\r\n\r\nexport enum DeckId {LEFT = 1, RIGHT = 2}\r\n\r\nenum ThemeId {DEFAULT = 0, DECK1 = 1, DECK2 = 2}\r\nnamespace ThemeId {\r\n    export function fromDeckId(deckId: DeckId): ThemeId {\r\n        switch (deckId) {\r\n            case DeckId.LEFT:\r\n                return ThemeId.DECK1;\r\n            case DeckId.RIGHT:\r\n                return ThemeId.DECK2;\r\n        }\r\n    }\r\n}\r\n\r\nexport {ThemeId};","import {Component, EventEmitter, Output} from \"@angular/core\";\r\nimport {AudioUtil} from \"../../services/audio/audioUtil.service\";\r\nimport {SongDb} from \"../../services/db/songDb.service\";\r\nimport {SongDetails} from \"../../models/songDetails\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Song} from \"../../models/song\";\r\nimport {DeckId} from \"../app.component\";\r\nimport firstBy from \"thenby\";\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {FormatTimePipe} from '../../pipes/formatTime.pipe';\r\n\r\ndeclare let jsmediatags;\r\n\r\n@Component({\r\n    selector: 'library',\r\n    templateUrl: 'library.component.html',\r\n    styleUrls: ['library.component.css']\r\n})\r\nexport class LibraryComponent {\r\n    fileIsOverDrop = false;\r\n\r\n    uploadingFiles = false;\r\n    totalFilesToUpload;\r\n    numFilesUploaded;\r\n\r\n    filteredSongDetails: Observable<SongDetails[]>;\r\n    DeckId = DeckId;\r\n    @Output() onLoadSong = new EventEmitter<LoadSongEvent>();\r\n\r\n    searchInput = new BehaviorSubject('').distinctUntilChanged();\r\n\r\n    constructor(private audioUtil: AudioUtil, private songDb: SongDb, private formatTimePipe: FormatTimePipe) {\r\n        let allSongDetails = this.songDb.getAllSongDetails()\r\n            .map((songDetails: SongDetails[]) => {\r\n                return songDetails.sort(\r\n                    (<any>firstBy)('artist', {ignoreCase: true})\r\n                        .thenBy('year')\r\n                        .thenBy('album', {ignoreCase: true})\r\n                        .thenBy('track')\r\n                );\r\n            });\r\n\r\n        this.filteredSongDetails = Observable.combineLatest(\r\n            allSongDetails,\r\n            this.searchInput,\r\n            (details, input) => this.filterSongDetails(details, input)\r\n        );\r\n    }\r\n    \r\n    public onFileOverDrop(fileIsOver: boolean): void {\r\n        this.fileIsOverDrop = fileIsOver;\r\n    }\r\n\r\n    public uploadFiles(files: File[]): void {\r\n        this.uploadingFiles = true;\r\n        this.totalFilesToUpload = files.length;\r\n        this.numFilesUploaded = 0;\r\n\r\n        //For each file...\r\n        //  Read media tags\r\n        //  Read as audio buffer\r\n        //  Add to song db\r\n        //  Update progress bar\r\n        let loadFilePromises = files.map((file) => {\r\n            let readMediaTagsPromise = new Promise((resolve) => {\r\n                jsmediatags.read(file, {\r\n                    onSuccess: (result) => resolve(result.tags),\r\n                    onError: (error) => resolve(null)\r\n                });\r\n            });\r\n\r\n            let arrayBuffer: ArrayBuffer;\r\n            let readAudioBufferPromise = this.readAsArrayBuffer(file)\r\n                .then(buf => {\r\n                    arrayBuffer = buf;\r\n                    //I believe calling decodeAudioData copies the array buffer into a web worker which makes it\r\n                    //inaccessible on the main thread so we need to make a copy of it. Although this didn't happen in\r\n                    //older versions of Chrome. If we don't make a copy then the following error is thrown when the\r\n                    //audio buffer is later saved to the DB:\r\n                    //Failed to execute 'add' on 'IDBObjectStore': An ArrayBuffer is neutered and could not be cloned.\r\n                    let bufCopyForAudioData = this.copyArrayBuffer(buf);\r\n                    return this.audioUtil.context.decodeAudioData(bufCopyForAudioData);\r\n                });\r\n\r\n            return Promise.all([readAudioBufferPromise, readMediaTagsPromise])\r\n                .then(([audioBuffer, tags]: [AudioBuffer, any]) => {\r\n                    return this.songDb.addSong(arrayBuffer, audioBuffer, tags, file.name);\r\n                })\r\n                .then(() => {\r\n                    this.numFilesUploaded++;\r\n                });\r\n        });\r\n\r\n        let onUploadingFinished = () => {\r\n            this.uploadingFiles = false;\r\n            this.totalFilesToUpload = undefined;\r\n            this.numFilesUploaded = undefined;\r\n        };\r\n\r\n        Promise.all(loadFilePromises)\r\n            .then(onUploadingFinished)\r\n            .catch((error) => {\r\n                console.error('Failed to upload songs', error);\r\n                onUploadingFinished();\r\n            });\r\n    }\r\n\r\n    public deleteSong(songDetails: SongDetails) {\r\n        this.songDb.deleteSong(songDetails);\r\n    }\r\n\r\n    public loadSong(songDetails, deckId) {\r\n        this.songDb.getSong(songDetails)\r\n            .then((song: Song) => {\r\n                this.onLoadSong.emit({song, deckId});\r\n            });\r\n    }\r\n\r\n    public getLoadingMessage() {\r\n        if(this.totalFilesToUpload > 1) {\r\n            return `Loading ${this.numFilesUploaded} of ${this.totalFilesToUpload}`;\r\n        } else {\r\n            return 'Loading';\r\n        }\r\n    }\r\n\r\n    //Taken from https://stackoverflow.com/a/22114687/373655\r\n    private copyArrayBuffer(src)  {\r\n        var dst = new ArrayBuffer(src.byteLength);\r\n        new Uint8Array(dst).set(new Uint8Array(src));\r\n        return dst;\r\n    }\r\n\r\n    private readAsArrayBuffer(file): Promise<ArrayBuffer> {\r\n        let arrayBuffer: ArrayBuffer;\r\n\r\n        return new Promise<ArrayBuffer>((resolve, reject) => {\r\n            let reader = new FileReader();\r\n            reader.readAsArrayBuffer(file);\r\n            reader.onload = () => {\r\n                arrayBuffer = reader.result;\r\n                resolve(reader.result);\r\n            };\r\n            reader.onerror = reject;\r\n        });\r\n    }\r\n\r\n    private filterSongDetails(allSongDetails, searchInput): SongDetails[] {\r\n        searchInput = searchInput.trim();\r\n        if(!searchInput) {\r\n            return allSongDetails;\r\n        }\r\n\r\n        let searchTokens = searchInput.split(' ');\r\n\r\n        return allSongDetails.filter((songDetails) => {\r\n            let allTokensMatchReducer = (previousTokensMatch, token) => previousTokensMatch && this.songDetailsMatchesToken(songDetails, token);\r\n            return searchTokens.reduce(allTokensMatchReducer, true);\r\n        });\r\n    }\r\n\r\n    private songDetailsMatchesToken(songDetails: SongDetails, token: string): boolean {\r\n        token = token.toLowerCase();\r\n        for(let fieldKey in songDetails) {\r\n            let field = songDetails[fieldKey];\r\n            if(songDetails.hasOwnProperty(fieldKey) && field !== undefined) {\r\n                let cmpStr: string;\r\n                switch(fieldKey) {\r\n                    case 'title':\r\n                    case 'album':\r\n                    case 'artist':\r\n                    case 'track':\r\n                    case 'year':\r\n                    case 'genre':\r\n                        cmpStr = field.toString();\r\n                        break;\r\n                    case 'lengthSeconds':\r\n                        cmpStr = this.formatTimePipe.transform(field);\r\n                        break;\r\n                }\r\n\r\n                if(cmpStr && cmpStr.toLowerCase().indexOf(token) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport interface LoadSongEvent {\r\n    song: Song,\r\n    deckId: DeckId\r\n}","import {\r\n    Directive,\r\n    EventEmitter,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n} from '@angular/core';\r\n\r\n@Directive({ selector: '[fileDrop]' })\r\nexport class FileDropDirective {\r\n    @Output() public fileOver = new EventEmitter<boolean>();\r\n    @Output() public onFileDrop = new EventEmitter<File[]>();\r\n\r\n    private element: ElementRef;\r\n\r\n    public constructor(\r\n        element: ElementRef\r\n    ) {\r\n        this.element = element;\r\n    }\r\n\r\n    dragLevel = 0;\r\n\r\n    @HostListener('dragover', ['$event'])\r\n    public onDragOver(event: any): void {\r\n        const transfer = this.getDataTransfer(event);\r\n\r\n        if (!this.haveFiles(transfer.types)) {\r\n            return;\r\n        }\r\n\r\n        transfer.dropEffect = 'copy';\r\n        this.preventAndStop(event);\r\n    }\r\n\r\n    @HostListener('dragenter', ['$event'])\r\n    public onDragEnter(event: any): void {\r\n        this.dragLevel++;\r\n        this.emitFileOver();\r\n    }\r\n\r\n    @HostListener('dragleave', ['$event'])\r\n    public onDragLeave(event: any): void {\r\n        this.dragLevel--;\r\n\r\n        this.preventAndStop(event);\r\n        if(this.dragLevel === 0) {\r\n            this.emitFileOver();\r\n        }\r\n    }\r\n\r\n    @HostListener('drop', ['$event'])\r\n    public onDrop(event: any): void {\r\n        const transfer = this.getDataTransfer(event);\r\n\r\n        if (!transfer) {\r\n            return;\r\n        }\r\n\r\n        this.preventAndStop(event);\r\n        this.dragLevel = 0;\r\n        this.emitFileOver();\r\n        this.onFileDrop.emit(Array.from(transfer.files));\r\n    }\r\n\r\n    private emitFileOver(): void {\r\n        this.fileOver.emit(this.dragLevel > 0);\r\n    }\r\n\r\n    private getDataTransfer(event: any | any): DataTransfer {\r\n        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\r\n    }\r\n\r\n    private preventAndStop(event: any): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    private haveFiles(types: any): boolean {\r\n        if (!types) {\r\n            return false;\r\n        }\r\n\r\n        if (types.indexOf) {\r\n            return types.indexOf('Files') !== -1;\r\n        }\r\n\r\n        if (types.contains) {\r\n            return types.contains('Files');\r\n        }\r\n\r\n        return false;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {MidiMsg, MidiUtil} from \"./midiUtil.service\";\r\nimport {Subject, Observable} from \"rxjs\";\r\nimport {PreferencesDb} from \"../db/preferencesDb.service\";\r\nimport MIDIOutput = WebMidi.MIDIOutput;\r\nimport MIDIInput = WebMidi.MIDIInput;\r\nimport MIDIMessageEvent = WebMidi.MIDIMessageEvent;\r\n\r\n@Injectable()\r\nexport class MidiIo {\r\n\r\n    private enabledInputNames = new Set<string>();\r\n    private enabledOutputNames = new Set<string>();\r\n\r\n    private msg = new Subject<MidiMsg>();\r\n    devicesByName: { [name: string]: { input?: MIDIInput, output?: MIDIOutput } };\r\n    devices: Array<{ name: string, input?: MIDIInput, output?: MIDIOutput }>;\r\n\r\n\r\n    get msg$(): Observable<MidiMsg> {\r\n        return this.msg.asObservable();\r\n    }\r\n\r\n    constructor(private midiUtil: MidiUtil, private preferencesDb: PreferencesDb) {\r\n        this.midiUtil.midiInitialized.then(() => {\r\n            midiUtil.midi.onstatechange = () => {\r\n                this.retrieveDevices();\r\n            };\r\n            this.retrieveDevices();\r\n        });\r\n\r\n        preferencesDb.initialized.then(() => {\r\n            this.enabledOutputNames = preferencesDb.getEnabledMidiOutputNames();\r\n            preferencesDb.getEnabledMidiInputNames().forEach((name) => {\r\n                if (this.devicesByName[name]) {\r\n                    this.enableInput(name);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private retrieveDevices() {\r\n        this.devicesByName = {};\r\n\r\n        this.midiUtil.midi.inputs.forEach((input: MIDIInput) => {\r\n            this.devicesByName[input.name] = {input};\r\n\r\n            //This could occur if an input was saved as enabled in the preferences but the diver was not connected to\r\n            //the computer until after the app started.\r\n            if(this.inputIsEnabled(input.name) === false && this.enabledInputNames.has(input.name)) {\r\n                this.enableInput(input.name);\r\n            }\r\n        });\r\n\r\n        this.midiUtil.midi.outputs.forEach((output: MIDIOutput) => {\r\n            this.devicesByName[output.name] = this.devicesByName[output.name] || {};\r\n            this.devicesByName[output.name].output = output;\r\n        });\r\n\r\n        this.devices = [];\r\n        for (let name in this.devicesByName) {\r\n            let device = this.devicesByName[name];\r\n            this.devices.push({name, input: device.input, output: device.output});\r\n        }\r\n    }\r\n\r\n    inputIsEnabled(deviceName: string) {\r\n        let input = this.getDevice(deviceName).input;\r\n        return !!input && !!input['lastEventListener'];\r\n    }\r\n\r\n    enableInput(deviceName: string) {\r\n        this.enabledInputNames.add(deviceName);\r\n        this.saveInputPreferences();\r\n\r\n        let device = this.getDevice(deviceName);\r\n\r\n        if (device.input) {\r\n            device.input['lastEventListener'] = this.onInputMsg.bind(this);\r\n            device.input.addEventListener('midimessage', device.input['lastEventListener']);\r\n        }\r\n\r\n    }\r\n\r\n    disableInput(deviceName: string) {\r\n        let device = this.getDevice(deviceName);\r\n\r\n        if (device.input) {\r\n            if (device.input['lastEventListener']) {\r\n                device.input.removeEventListener('midimessage', device.input['lastEventListener']);\r\n                device.input['lastEventListener'] = undefined;\r\n            }\r\n            device.input.close();\r\n        }\r\n\r\n        this.enabledInputNames.delete(deviceName);\r\n        this.saveInputPreferences();\r\n    }\r\n\r\n    toggleInput(deviceName: string) {\r\n        if (this.inputIsEnabled(deviceName)) {\r\n            this.disableInput(deviceName);\r\n        } else {\r\n            this.enableInput(deviceName);\r\n        }\r\n    }\r\n\r\n    outputIsEnabled(deviceName: string) {\r\n        return this.enabledOutputNames.has(deviceName);\r\n    }\r\n\r\n    enableOutput(deviceName: string) {\r\n        this.enabledOutputNames.add(deviceName);\r\n        this.saveOutputPreferences();\r\n    }\r\n\r\n    disableOutput(deviceName: string) {\r\n        this.enabledOutputNames.delete(deviceName);\r\n        this.saveOutputPreferences();\r\n    }\r\n\r\n    toggleOutput(deviceName: string) {\r\n        if (this.outputIsEnabled(deviceName)) {\r\n            this.disableOutput(deviceName);\r\n        } else {\r\n            this.enableOutput(deviceName);\r\n        }\r\n    }\r\n\r\n    sendMessage(msg: MidiMsg) {\r\n        this.enabledOutputNames.forEach((name) => {\r\n            let device = this.getDevice(name);\r\n            if(device.output) {\r\n                device.output.send(this.midiUtil.serializeMsg(msg));\r\n            }\r\n        });\r\n    }\r\n\r\n    saveInputPreferences() {\r\n        this.preferencesDb.setEnabledMidiInputNames(this.enabledInputNames);\r\n    }\r\n\r\n    saveOutputPreferences() {\r\n        this.preferencesDb.setEnabledMidiOutputNames(this.enabledOutputNames);\r\n    }\r\n\r\n    //Always returns an object even if the device doesn't exist\r\n    getDevice(name: string) {\r\n        return this.devicesByName[name] || {};\r\n    }\r\n\r\n    private onInputMsg(msgEvent: MIDIMessageEvent) {\r\n        let msg = this.midiUtil.parseRawMsg(msgEvent.data);\r\n        this.msg.next(msg);\r\n    }\r\n}","import {Subject, Observable} from \"rxjs\";\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class DocumentEvents {\r\n    get mouseMove(): Observable<MouseEvent> {\r\n        return this.mouseMoveSubject.asObservable();\r\n    }\r\n\r\n    get mouseUp(): Observable<MouseEvent> {\r\n        return this.mouseUpSubject.asObservable();\r\n    }\r\n\r\n    get dragEnd(): Observable<MouseEvent> {\r\n        return this.dragEndSubject.asObservable();\r\n    }\r\n\r\n    get keyUp(): Observable<KeyboardEvent> {\r\n        return this.keyUpSubject.asObservable();\r\n    }\r\n\r\n    private mouseMoveSubject = new Subject();\r\n    private mouseUpSubject = new Subject();\r\n    private dragEndSubject = new Subject();\r\n    private keyUpSubject = new Subject();\r\n\r\n    constructor() {\r\n        document.addEventListener('mousemove', (event) => this.mouseMoveSubject.next(event));\r\n        document.addEventListener('mouseup', (event) => this.mouseUpSubject.next(event));\r\n        document.addEventListener('dragend', (event) => this.dragEndSubject.next(event));\r\n        document.addEventListener('keyup', (event) => this.keyUpSubject.next(event));\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {BehaviorSubject, Observable} from \"rxjs\";\r\nimport {MidiIo} from \"./midiIo.service\";\r\nimport {MidiMappingComponent} from \"../../app/midiMapping/midiMapping.component\";\r\nimport {MidiControl, MidiMsg} from \"./midiUtil.service\";\r\nimport {PreferencesDb} from \"../db/preferencesDb.service\";\r\nimport {DocumentEvents} from \"../documentEvents.service\";\r\n\r\n@Injectable()\r\nexport class MidiMapper {\r\n    private learnMode = new BehaviorSubject<boolean>(false);\r\n    activeLearnMappingComp: MidiMappingComponent;\r\n\r\n    private mappings = new Map<string, MidiMapping>();\r\n    private mappingComps = new Map<string, MidiMappingComponent>();\r\n\r\n    get learnMode$(): Observable<boolean> {\r\n        return this.learnMode.asObservable();\r\n    }\r\n\r\n    constructor(midiIo: MidiIo, private preferencesDb: PreferencesDb, documentEvents: DocumentEvents) {\r\n        midiIo.msg$.subscribe((msg) => this.onInputMsg(msg));\r\n\r\n        preferencesDb.initialized.then(() => {\r\n            this.mappings = preferencesDb.getMidiMappings();\r\n        });\r\n\r\n        documentEvents.keyUp.subscribe((event: KeyboardEvent) => {\r\n            if(this.learnMode.getValue()) {\r\n                if(event.code === 'Backspace' || event.code === 'Delete') {\r\n                    if(this.activeLearnMappingComp) {\r\n                        this.mappings.delete(this.activeLearnMappingComp.elemId);\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    setLearnMode(value: boolean) {\r\n        !value && (this.activeLearnMappingComp = undefined);\r\n        this.learnMode.next(value);\r\n    }\r\n\r\n    toggleLearnMode() {\r\n        this.setLearnMode(!this.learnMode.getValue());\r\n    }\r\n\r\n    getLearnMode(): boolean {\r\n        return this.learnMode.getValue();\r\n    }\r\n\r\n    registerMappingComp(id: string, comp: MidiMappingComponent) {\r\n        this.mappingComps.set(id, comp);\r\n    }\r\n\r\n    setMapping(id: string, mapping: MidiMapping) {\r\n        this.mappings.set(id, mapping);\r\n        this.preferencesDb.setMidiMappings(this.mappings);\r\n    }\r\n\r\n    getMapping(id: string): MidiMapping {\r\n        return this.mappings.get(id);\r\n    }\r\n\r\n    private onInputMsg(msg: MidiMsg) {\r\n        if (this.activeLearnMappingComp) {\r\n            this.activeLearnMappingComp.onLearnMsg(msg);\r\n        } else if (!this.getLearnMode()) {\r\n            this.mappings.forEach((mapping: MidiMapping, id) => {\r\n                if (\r\n                    mapping.control.msgType === msg.msgType &&\r\n                    mapping.control.channel === msg.channel &&\r\n                    mapping.control.subType === msg.subType\r\n                ) {\r\n                    this.mappingComps.get(id).onInputMsg(msg);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport interface MidiMapping {\r\n    control: MidiControl,\r\n    type: MappingType\r\n}\r\n\r\nexport enum MappingType {\r\n    //Map the amount directly to the control\r\n    Amount,\r\n        //Toggle the control whenever a non-zero midi amount is sent\r\n        //TODO use latch by default for note messages\r\n    Latch\r\n}","import {Component} from \"@angular/core\";\r\nimport {SideNav, SideNavState} from \"../../services/sidenav.service\";\r\nimport {MidiMapper} from \"../../services/midi/midiMapper.service\";\r\n\r\n@Component({\r\n    selector: 'toolbar',\r\n    templateUrl: 'toolbar.component.html',\r\n    styleUrls: ['toolbar.component.css']\r\n})\r\nexport class ToolbarComponent {\r\n    constructor(private sideNav: SideNav, public midiMapper: MidiMapper) {\r\n\r\n    }\r\n\r\n    toggleMidiSettings() {\r\n        if(this.sideNav.getState() === SideNavState.Midi) {\r\n            this.sideNav.setState(SideNavState.Closed);\r\n        } else {\r\n            this.sideNav.setState(SideNavState.Midi);\r\n        }\r\n    }\r\n\r\n    toggleAudioSettings() {\r\n        if(this.sideNav.getState() === SideNavState.Audio) {\r\n            this.sideNav.setState(SideNavState.Closed);\r\n        } else {\r\n            this.sideNav.setState(SideNavState.Audio);\r\n        }\r\n    }\r\n\r\n    toggleFullScreen() {\r\n        let doc = <any>document;\r\n\r\n        //Taken from http://stackoverflow.com/a/10627148/373655\r\n        if (!this.isFullScreen()) {\r\n            if (doc.documentElement.requestFullScreen) {\r\n                doc.documentElement.requestFullScreen();\r\n            } else if (doc.documentElement.mozRequestFullScreen) {\r\n                doc.documentElement.mozRequestFullScreen();\r\n            } else if (doc.documentElement.webkitRequestFullScreen) {\r\n                doc.documentElement.webkitRequestFullScreen(Element['ALLOW_KEYBOARD_INPUT']);\r\n            }\r\n        } else {\r\n            if (doc.cancelFullScreen) {\r\n                doc.cancelFullScreen();\r\n            } else if (doc.mozCancelFullScreen) {\r\n                doc.mozCancelFullScreen();\r\n            } else if (doc.webkitCancelFullScreen) {\r\n                doc.webkitCancelFullScreen();\r\n            }\r\n        }\r\n    }\r\n\r\n    isFullScreen() {\r\n        let doc = <any>document;\r\n        return !doc.fullScreenElement && (doc.mozFullScreen || doc.webkitIsFullScreen);\r\n    }\r\n}","import {Component} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'spinner',\r\n    template: `\r\n<div class=\"overlay\"></div>\r\n<div class='uil-ripple-css'> \r\n    <div></div> \r\n    <div></div> \r\n</div>`,\r\n    styles: [`\r\n@keyframes uil-ripple {\r\n  0% {\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 0;\r\n    margin: 0 0 0 0;\r\n  }\r\n  33% {\r\n    width: 44%;\r\n    height: 44%;\r\n    margin: -22% 0 0 -22%;\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    width: 88%;\r\n    height: 88%;\r\n    margin: -44% 0 0 -44%;\r\n    opacity: 0;\r\n  }\r\n}\r\n.uil-ripple-css {\r\n  position: absolute;\r\n  width: 64px;\r\n  height: 64px;\r\n  transform: translate(-50%, -50%);\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n.uil-ripple-css div {\r\n  position: absolute;\r\n  z-index: 2;\r\n  top: 50%;\r\n  left: 50%;\r\n  margin: 0;\r\n  width: 0;\r\n  height: 0;\r\n  opacity: 0;\r\n  border-radius: 50%;\r\n  border-width: 4px;\r\n  border-style: solid;\r\n  animation: uil-ripple 2s linear infinite;\r\n}\r\n.uil-ripple-css div:nth-of-type(1) {\r\n  border-color: #165eaa;\r\n}\r\n.uil-ripple-css div:nth-of-type(2) {\r\n  border-color: #632b9b;\r\n  animation-delay: 1s;\r\n}\r\n.overlay {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n    z-index: 1;\r\n    top: 0;\r\n}\r\n`]\r\n})\r\nexport class SpinnerComponent {\r\n    constructor() {\r\n\r\n    }\r\n}","import {Component, ViewChild, AfterViewInit, ElementRef} from \"@angular/core\";\r\nimport {ActiveSongs} from \"../../services/activeSongs.service\";\r\nimport {ActiveSong} from \"../../services/activeSong\";\r\nimport {DeckId, ThemeId} from \"../app.component\";\r\nimport {Song} from \"../../models/song\";\r\nimport {WaveformUtil, DrawWaveformOptions} from \"../../services/audio/waveformUtil.service\";\r\nimport {AudioUtil} from \"../../services/audio/audioUtil.service\";\r\nimport {AnimationFrames} from \"../../services/animationFrames.service\";\r\nimport {DocumentEvents} from \"../../services/documentEvents.service\";\r\nimport {CrossfaderChangeEvent} from \"./crossfader/crossfader.component\";\r\nimport {AudioOutput} from \"../../services/audioOutput.service\";\r\n\r\n@Component({\r\n    selector: 'center-controls',\r\n    templateUrl: 'centerControls.component.html',\r\n    styleUrls: ['centerControls.component.css']\r\n})\r\nexport class CenterControlsComponent implements AfterViewInit {\r\n    DeckId = DeckId;\r\n\r\n    deck1ActiveSong: ActiveSong;\r\n    deck2ActiveSong: ActiveSong;\r\n\r\n    activeScrubDeck: DeckId;\r\n    scrubOrigSongOffset: number;\r\n    scrubOrigScreenX: number;\r\n    resumePlayingAfterScrub: boolean;\r\n    song1PixelOffsetAtLastDraw: number;\r\n    song2PixelOffsetAtLastDraw: number;\r\n\r\n    @ViewChild('deck1Canvas') deck1ElementRef: ElementRef;\r\n    @ViewChild('deck2Canvas') deck2ElementRef: ElementRef;\r\n\r\n    get deck1Canvas(): HTMLCanvasElement {\r\n        return this.deck1ElementRef.nativeElement;\r\n    }\r\n\r\n    get deck2Canvas(): HTMLCanvasElement {\r\n        return this.deck2ElementRef.nativeElement;\r\n    }\r\n\r\n    constructor(\r\n        private activeSongs: ActiveSongs,\r\n        private waveformUtil: WaveformUtil,\r\n        private audioUtil: AudioUtil,\r\n        private animationFrames: AnimationFrames,\r\n        private documentEvents: DocumentEvents,\r\n        public audioOutput: AudioOutput\r\n    ) {\r\n        this.deck1ActiveSong = activeSongs.getActiveSong(DeckId.LEFT);\r\n        this.deck2ActiveSong = activeSongs.getActiveSong(DeckId.RIGHT);\r\n\r\n        this.deck1ActiveSong.songObservable.subscribe((song: Song) => this.onSongChange(DeckId.LEFT, song));\r\n        this.deck2ActiveSong.songObservable.subscribe((song: Song) => this.onSongChange(DeckId.RIGHT, song));\r\n\r\n        animationFrames.frames.subscribe((time) => this.onAnimationFrame());\r\n\r\n        this.documentEvents.mouseMove.subscribe((event) => this.onMouseMove(event));\r\n        this.documentEvents.mouseUp.subscribe((event) => this.endScrub(event));\r\n        this.documentEvents.dragEnd.subscribe((event) => this.endScrub(event));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.deck1Canvas.width = this.deck1Canvas.offsetWidth;\r\n        this.deck2Canvas.width = this.deck2Canvas.offsetWidth;\r\n\r\n        this.deck1Canvas.getContext('2d').translate(0.5, 0);\r\n        this.deck2Canvas.getContext('2d').translate(0.5, 0);\r\n    }\r\n\r\n    onAnimationFrame() {\r\n        if (this.deck1ActiveSong.isLoaded) {\r\n            this.drawSong(DeckId.LEFT, this.deck1ActiveSong.song);\r\n        }\r\n\r\n        if (this.deck2ActiveSong.isLoaded) {\r\n            this.drawSong(DeckId.RIGHT, this.deck2ActiveSong.song);\r\n        }\r\n    }\r\n\r\n    onSongChange(deckId: DeckId, song: Song) {\r\n        this.setPixelOffsetAtLastDraw(undefined, deckId);\r\n        this.drawSong(deckId, song);\r\n    }\r\n\r\n    setPixelOffsetAtLastDraw(offset: number, deckId: DeckId) {\r\n      if(deckId === DeckId.LEFT) {\r\n          this.song1PixelOffsetAtLastDraw = offset;\r\n      }  else {\r\n          this.song2PixelOffsetAtLastDraw = offset;\r\n      }\r\n    }\r\n\r\n    getPixelOffsetAtLastDraw(deckId: DeckId): number {\r\n        if(deckId === DeckId.LEFT) {\r\n            return this.song1PixelOffsetAtLastDraw;\r\n        }  else {\r\n            return this.song2PixelOffsetAtLastDraw;\r\n        }\r\n    }\r\n\r\n    drawSong(deckId: DeckId, song: Song) {\r\n        let waveformCanvas;\r\n        let drawOptions: DrawWaveformOptions;\r\n        let waveformName;\r\n        let activeSong: ActiveSong;\r\n\r\n        switch (deckId) {\r\n            case DeckId.LEFT: {\r\n                waveformCanvas = this.deck1Canvas;\r\n                waveformName = 'negativeSamples';\r\n                activeSong = this.deck1ActiveSong;\r\n                break;\r\n            }\r\n            case DeckId.RIGHT: {\r\n                waveformCanvas = this.deck2Canvas;\r\n                waveformName = 'positiveSamples';\r\n                activeSong = this.deck2ActiveSong;\r\n            }\r\n        }\r\n\r\n        let currentSongOffset = activeSong.currentSongOffset;\r\n\r\n        //TODO: when tempo slider is set multiple this by it\r\n        let compressedSampleRate = this.audioUtil.context.sampleRate / 100;\r\n        let startTime = currentSongOffset - 3;\r\n        let endTime = currentSongOffset + 3;\r\n\r\n        let drawFromX = 0;\r\n        let drawToX = waveformCanvas.width;\r\n\r\n        let pixelOffset = Math.round(currentSongOffset * waveformCanvas.width/ 6);\r\n\r\n        if(this.getPixelOffsetAtLastDraw(deckId) !== undefined) {\r\n            let redrawWidth = pixelOffset - this.getPixelOffsetAtLastDraw(deckId);\r\n\r\n            if(Math.abs(redrawWidth) < waveformCanvas.width) {\r\n                if(redrawWidth >= 0) {\r\n                    drawFromX = waveformCanvas.width - redrawWidth;\r\n                    drawToX = waveformCanvas.width;\r\n                } else {\r\n                    drawFromX = 0;\r\n                    drawToX = -redrawWidth;\r\n                }\r\n\r\n                if(redrawWidth !== 0) {\r\n                    let canvasCtx = waveformCanvas.getContext('2d');\r\n                    let imageData = canvasCtx.getImageData(0, 0, waveformCanvas.width, waveformCanvas.height);\r\n                    //canvasCtx.clearRect(0,0, waveformCanvas.width, waveformCanvas.height);\r\n                    canvasCtx.putImageData(imageData, -redrawWidth, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setPixelOffsetAtLastDraw(pixelOffset, deckId);\r\n\r\n        drawOptions = {\r\n            canvas: waveformCanvas,\r\n            themeId: ThemeId.fromDeckId(deckId),\r\n            useGradient: false,\r\n            drawFromX,\r\n            drawToX\r\n        };\r\n        drawOptions[waveformName] = this.waveformUtil.projectWaveform(song.waveformCompressed100x, compressedSampleRate, waveformCanvas.width, startTime, endTime);\r\n\r\n        this.waveformUtil.drawWaveform(drawOptions);\r\n        this.waveformUtil.overlayCues(waveformCanvas, song.details.cues, startTime, 6, deckId === DeckId.RIGHT);\r\n    }\r\n\r\n    onMouseMove(event: MouseEvent) {\r\n        if(this.activeScrubDeck) {\r\n            let activeSong = this.getActiveSongFromDeckId(this.activeScrubDeck);\r\n\r\n            let pixelsPerSecond = this.deck1Canvas.offsetWidth / 6;\r\n            let deltaX = this.scrubOrigScreenX - event.screenX;\r\n            let newSongOffset = this.scrubOrigSongOffset + (deltaX / pixelsPerSecond);\r\n            newSongOffset = Math.max(0, newSongOffset);\r\n            newSongOffset = Math.min(activeSong.song.details.lengthSeconds, newSongOffset);\r\n            activeSong.setSongOffset(newSongOffset);\r\n        }\r\n    }\r\n\r\n    endScrub(event: MouseEvent) {\r\n        if(this.activeScrubDeck !== undefined) {\r\n            let activeSong = this.getActiveSongFromDeckId(this.activeScrubDeck);\r\n            if(this.resumePlayingAfterScrub) {\r\n                activeSong.playBuffer();\r\n            }\r\n\r\n            this.activeScrubDeck = undefined;\r\n            document.body.classList.remove('scrubbing');\r\n        }\r\n    }\r\n\r\n    startScrub(deckId: DeckId, event: MouseEvent) {\r\n        let activeSong = this.getActiveSongFromDeckId(deckId);\r\n        if(activeSong.isLoaded) {\r\n            this.activeScrubDeck = deckId;\r\n            this.resumePlayingAfterScrub = activeSong.isPlaying;\r\n            this.scrubOrigSongOffset = activeSong.currentSongOffset;\r\n            this.scrubOrigScreenX = event.screenX;\r\n\r\n            activeSong.isPlaying && activeSong.pauseBuffer();\r\n            document.body.classList.add('scrubbing');\r\n        }\r\n    }\r\n\r\n    getActiveSongFromDeckId(deckId: DeckId) {\r\n        if(deckId === DeckId.LEFT) {\r\n            return this.deck1ActiveSong;\r\n        } else {\r\n            return this.deck2ActiveSong;\r\n        }\r\n    }\r\n\r\n    crossfaderChange({leftGain, rightGain}: CrossfaderChangeEvent) {\r\n        this.deck1ActiveSong.setGain(leftGain);\r\n        this.deck2ActiveSong.setGain(rightGain);\r\n    }\r\n\r\n}\r\n","import {Component, Output, EventEmitter} from \"@angular/core\";\r\nimport {BehaviorSubject} from \"rxjs\";\r\nimport {PreferencesDb} from \"../../../services/db/preferencesDb.service\";\r\n\r\n@Component({\r\n    selector: 'crossfader',\r\n    templateUrl: 'crossfader.component.html',\r\n    styleUrls: ['crossfader.component.css']\r\n})\r\nexport class CrossfaderComponent {\r\n    sliderValue = new BehaviorSubject(0.5);\r\n\r\n    //0 represents an equal power fade\r\n    //1 represents a scratch fade\r\n    crossfaderCurveSharpness = new BehaviorSubject(0);\r\n\r\n    @Output() change = new EventEmitter<CrossfaderChangeEvent>();\r\n\r\n    constructor(private preferencesDb: PreferencesDb) {\r\n        preferencesDb.initialized.then(() => {\r\n            this.crossfaderCurveSharpness.next(preferencesDb.getCrossfaderCurveSharpness());\r\n        });\r\n\r\n        this.crossfaderCurveSharpness.subscribe(() => this.sendCrossfaderChange());\r\n        this.sliderValue.subscribe(() => this.sendCrossfaderChange());\r\n    }\r\n\r\n    getGain(sliderValue, curveSharpness) {\r\n        let equalPowerValue = Math.cos(sliderValue * Math.PI / 2);\r\n        return Math.min(1, equalPowerValue * (curveSharpness * 19 + 1));\r\n    }\r\n\r\n    sendCrossfaderChange() {\r\n        let sliderValue = this.sliderValue.getValue();\r\n        let curveSharpness = this.crossfaderCurveSharpness.getValue();\r\n\r\n        let leftGain = this.getGain(sliderValue, curveSharpness);\r\n        let rightGain = this.getGain(1 - sliderValue, curveSharpness);\r\n        this.change.emit({leftGain, rightGain});\r\n    }\r\n\r\n    setCurveSharpness(value: number) {\r\n        this.preferencesDb.setCrossfaderCurveSharpness(value);\r\n        this.crossfaderCurveSharpness.next(value);\r\n    }\r\n}\r\n\r\nexport interface CrossfaderChangeEvent {\r\n    leftGain: number,\r\n    rightGain: number\r\n}","import {Component} from '@angular/core';\r\nimport {SideNav, SideNavState} from \"../../services/sidenav.service\";\r\n\r\n@Component({\r\n    selector: 'side-nav',\r\n    template: `\r\n<div id=\"sideNav\" style=\"width: 350px; padding:10px\">\r\n    <midi-settings *ngIf=\"(sideNav.state$ | async) === SideNavState.Midi\"></midi-settings>\r\n    <audio-settings *ngIf=\"(sideNav.state$ | async) === SideNavState.Audio\"></audio-settings>\r\n</div>\r\n`\r\n})\r\nexport class SideNavComponent {\r\n    SideNavState = SideNavState;\r\n\r\n    constructor(public sideNav: SideNav) {\r\n\r\n    }\r\n}","import {Component} from '@angular/core';\r\nimport {DeckId} from '../../app.component'\r\n\r\n@Component({\r\n    selector: 'audio-settings',\r\n    templateUrl: 'audioSettings.component.html',\r\n    styleUrls: ['audioSettings.component.css']\r\n})\r\nexport class AudioSettingsComponent {\r\n    DeckId = DeckId;\r\n    constructor() {\r\n\r\n    }\r\n}","import {Component} from '@angular/core';\r\nimport {MidiIo} from \"../../services/midi/midiIo.service\";\r\n\r\n@Component({\r\n    selector: 'midi-settings',\r\n    templateUrl: 'midiSettings.component.html',\r\n    styleUrls: ['midiSettings.component.css']\r\n})\r\nexport class MidiSettingsComponent {\r\n    constructor(public midiIo: MidiIo) {\r\n\r\n    }\r\n\r\n    getDeviceName(device) {\r\n        return device.name;\r\n    }\r\n}","import {Component, Input, Output, EventEmitter, OnInit} from \"@angular/core\";\r\nimport {MidiMapper, MappingType} from \"../../services/midi/midiMapper.service\";\r\nimport {MidiMsg, MidiMsgType} from \"../../services/midi/midiUtil.service\";\r\nimport {MidiIo} from \"../../services/midi/midiIo.service\";\r\n\r\n@Component({\r\n    selector: 'midi-mapping',\r\n    templateUrl: 'midiMapping.component.html',\r\n    styleUrls: ['midiMapping.component.css']\r\n})\r\nexport class MidiMappingComponent implements OnInit {\r\n    @Input() elemId: string;\r\n\r\n    private _amount: number;\r\n    @Input() set amount(value: number) {\r\n        this._amount = value;\r\n\r\n        let mapping = this.midiMapper.getMapping(this.elemId);\r\n        if (mapping) {\r\n            let msg: MidiMsg = {\r\n                msgType: mapping.control.msgType,\r\n                channel: mapping.control.channel,\r\n                subType: mapping.control.subType,\r\n                amount: value\r\n            };\r\n            this.midiIo.sendMessage(msg);\r\n        }\r\n    }\r\n\r\n    ctrl = this;\r\n\r\n    get inputElem() {\r\n        return document.getElementById(this.elemId);\r\n    }\r\n\r\n    @Output() amountChange = new EventEmitter();\r\n\r\n    private shortMidiTypeNames = {\r\n        [MidiMsgType.NoteOff]: 'Note Off',\r\n        [MidiMsgType.NoteOn]: 'Note On',\r\n        [MidiMsgType.PolyAfterTouch]: 'AfTo',\r\n        [MidiMsgType.CC]: 'CC',\r\n        [MidiMsgType.ProgramChange]: 'Prog',\r\n        [MidiMsgType.ChannelAfterTouch]: 'Chan AfTo',\r\n        [MidiMsgType.PitchBend]: 'Pitch Bend',\r\n        [MidiMsgType.SysEx]: 'SysEx',\r\n\r\n    };\r\n\r\n    constructor(public midiMapper: MidiMapper, private midiIo: MidiIo) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.midiMapper.registerMappingComp(this.elemId, this);\r\n    }\r\n\r\n    onLearnMsg(msg: MidiMsg) {\r\n        if (msg.msgType === MidiMsgType.NoteOff) {\r\n            return;\r\n        }\r\n\r\n        let mappingType = (msg.msgType === MidiMsgType.NoteOn) ? MappingType.Latch : MappingType.Amount;\r\n\r\n        this.midiMapper.setMapping(this.elemId, {\r\n            control: {msgType: msg.msgType, channel: msg.channel, subType: msg.subType},\r\n            type: mappingType\r\n        });\r\n    }\r\n\r\n    onInputMsg(msg: MidiMsg) {\r\n        let mapping = this.midiMapper.getMapping(this.elemId);\r\n\r\n        if (mapping.type === MappingType.Amount) {\r\n            this.amountChange.next(msg.amount);\r\n\r\n        } else if (mapping.type === MappingType.Latch) {\r\n            if(msg.amount === 0) {\r\n                return;\r\n            } else {\r\n                if(this._amount === 1) {\r\n                    this.amountChange.next(0);\r\n                } else {\r\n                    this.amountChange.next(1);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getMappedControlMessage() {\r\n        let mapping = this.midiMapper.getMapping(this.elemId);\r\n        if (mapping) {\r\n            return `${this.shortMidiTypeNames[mapping.control.msgType]}: ${mapping.control.subType}`;\r\n        }\r\n    }\r\n}","import {Directive, HostListener} from \"@angular/core\";\r\n\r\n@Directive({selector: '[fixedTableHeaderContainer]'})\r\nexport class FixedTableHeaderContainerDirective {\r\n    @HostListener('scroll', ['$event'])\r\n    public onScroll(event: any): void {\r\n        let elem = event.target;\r\n        let translate = \"translate(0,\"+elem.scrollTop+\"px)\";\r\n\r\n        const allTh = elem.querySelectorAll(\"th\");\r\n        for( let i=0; i < allTh.length; i++ ) {\r\n            allTh[i].style.transform = translate;\r\n        }\r\n    }\r\n}","import {Component, Input, OnInit} from '@angular/core';\r\nimport {AudioUtil} from \"../../../services/audio/audioUtil.service\";\r\nimport {DeckId} from \"../../app.component\";\r\nimport {DeckAudioSettings, AudioSettings} from \"./audioSettings.service\";\r\n\r\n@Component({\r\n    selector: 'deck-audio-settings',\r\n    templateUrl: 'deckAudioSettings.component.html',\r\n    styleUrls: ['deckAudioSettings.component.css']\r\n})\r\nexport class DeckAudioSettingsComponent implements OnInit {\r\n    @Input() deckId: DeckId;\r\n    deckAudioSettings: DeckAudioSettings;\r\n\r\n    deckNames = {\r\n        [DeckId.LEFT]: 'A',\r\n        [DeckId.RIGHT]: 'B'\r\n    };\r\n\r\n    constructor(public audioUtil: AudioUtil, private audioSettings: AudioSettings) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.deckAudioSettings = this.audioSettings.getDeckAudioSettings(this.deckId);\r\n    }\r\n}","import {Component, EventEmitter, Input, Output} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'fader',\r\n    templateUrl: 'fader.component.html',\r\n    styleUrls: ['fader.component.css']\r\n})\r\nexport class FaderComponent {\r\n    //Should be unique\r\n    @Input() name;\r\n    @Input() value;\r\n    @Output() change = new EventEmitter();\r\n\r\n    maxValue = 1.2;\r\n\r\n    constructor() {\r\n\r\n    }\r\n}","import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'loading-overlay',\r\n    styleUrls: ['loadingOverlay.component.css'],\r\n    template: `\r\n<div class=\"loading-overlay\">\r\n    <div class=\"drop-msg\" *ngIf=\"msg\">{{msg}}</div>\r\n    <spinner *ngIf=\"showSpinner\"></spinner>\r\n</div>\r\n`\r\n})\r\nexport class LoadingOverlayComponent {\r\n    @Input() msg: string;\r\n    @Input() showSpinner: boolean = true;\r\n}","import {NgModule} from \"@angular/core\";\r\nimport {BrowserModule} from \"@angular/platform-browser\";\r\nimport {\r\n    MdButtonModule, MdSliderModule, MdSidenavModule, MdTooltipModule, MdSlideToggleModule, MdRadioModule,\r\n    MdCheckboxModule, MdToolbarModule, MdOptionModule, MdSelectModule\r\n} from \"@angular/material\";\r\nimport {AppComponent} from \"./app.component\";\r\nimport {LibraryComponent} from \"./library/library.component\";\r\nimport {FileDropDirective} from \"./library/fileDrop.directive\";\r\nimport {ToolbarComponent} from \"./toolbar/toolbar.component\";\r\nimport {AudioUtil} from \"../services/audio/audioUtil.service\";\r\nimport {SongDb} from \"../services/db/songDb.service\";\r\nimport {SpinnerComponent} from \"./spinner/spinner.component\";\r\nimport {DeckComponent} from \"./deck/deck.component\";\r\nimport {CenterControlsComponent} from \"./centerControls/centerControls.component\";\r\nimport {WaveformUtil} from \"../services/audio/waveformUtil.service\";\r\nimport {ActiveSongs} from \"../services/activeSongs.service\";\r\nimport {AnimationFrames} from \"../services/animationFrames.service\";\r\nimport {DocumentEvents} from \"../services/documentEvents.service\";\r\nimport {CrossfaderComponent} from \"./centerControls/crossfader/crossfader.component\";\r\nimport {SideNav} from \"../services/sidenav.service\";\r\nimport {SideNavComponent} from \"./sideNav/sideNav.component\";\r\nimport {AudioSettingsComponent} from \"./sideNav/audioSettings/audioSettings.component\";\r\nimport {MidiSettingsComponent} from \"./sideNav/midiSettings.component\";\r\nimport {MidiIo} from \"../services/midi/midiIo.service\";\r\nimport {MidiUtil} from \"../services/midi/midiUtil.service\";\r\nimport {MidiMapper} from \"../services/midi/midiMapper.service\";\r\nimport {MidiMappingComponent} from \"./midiMapping/midiMapping.component\";\r\nimport {Db} from \"../services/db/db.service\";\r\nimport {PreferencesDb} from \"../services/db/preferencesDb.service\";\r\nimport {FixedTableHeaderContainerDirective} from \"./library/fixedTableHeaderContainer.directive\";\r\nimport {AudioSettings} from \"./sideNav/audioSettings/audioSettings.service\";\r\nimport {DeckAudioSettingsComponent} from \"./sideNav/audioSettings/deckAudioSettings.component\";\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {DspUtil} from \"../services/audio/dspUtil.service\";\r\nimport {FaderComponent} from \"./fader/fader.component\";\r\nimport {Resampler} from \"../services/audio/resampler.service\";\r\nimport {AudioOutput} from \"../services/audioOutput.service\";\r\nimport {FormatTimePipe} from \"../pipes/formatTime.pipe\";\r\nimport {LoadingOverlayComponent} from \"./loadingOverlay/loadingOverlay.component\";\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {LazyForModule} from 'angular-lazy-for';\r\nimport {WorkerUtil} from '../services/workerUtil';\r\nimport {ImageUtil} from '../services/imageUtil.service';\r\n\r\n@NgModule({\r\n    imports: [BrowserModule, BrowserAnimationsModule, FormsModule, ReactiveFormsModule, LazyForModule,\r\n        MdButtonModule, MdSliderModule, MdSidenavModule, MdTooltipModule, MdSlideToggleModule, MdRadioModule, MdCheckboxModule, MdToolbarModule, MdOptionModule, MdSelectModule],\r\n    declarations: [AppComponent, LibraryComponent, ToolbarComponent, FileDropDirective, SpinnerComponent, DeckComponent,\r\n        CenterControlsComponent, CrossfaderComponent, SideNavComponent, AudioSettingsComponent, MidiSettingsComponent,\r\n        MidiMappingComponent, FixedTableHeaderContainerDirective, DeckAudioSettingsComponent, FaderComponent,\r\n        FormatTimePipe, LoadingOverlayComponent],\r\n    bootstrap: [AppComponent],\r\n    providers: [AudioUtil, WaveformUtil, SongDb, ActiveSongs, AnimationFrames, DocumentEvents, SideNav, MidiIo, MidiUtil,\r\n        MidiMapper, Db, PreferencesDb, AudioSettings, DspUtil, Resampler, AudioOutput, FormatTimePipe, WorkerUtil,\r\n        ImageUtil]\r\n})\r\n\r\nexport class AppModule {\r\n\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport {AppModule} from \"./app/app.module\";\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);"],"names":["db","createObjectStore","autoIncrement","keyPath","upgradeTransaction","getSongCursor","objectStore","openCursor","albumDataUrlById","resizingImagesPromises","onsuccess","e","cursor","target","details_1","value","push","resizeBase64Img","then","albumDataUrl","id","continue","setTimeout","updateAlbumPics","Promise","all","transaction","Db","READWRITE_TRANSACTION","details","update","type","base64","maxWidth","maxHeight","resolve","targetWidth","img","width","targetHeight","height","imageToDataUri","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","Image","onload","resizeImage","src","cues","WorkerUtil","this","_a","WorkerType","Waveform","Worker","workerType","method","params","_b","transferObjs","worker","workersByType","reject","msgId","Math","random","postMessage","handler","data","removeEventListener","error","result","addEventListener","Injectable","WaveformUtil","workerUtil","buffer","samples","getChannelData","run","sampleRate","outputSize","startTime","endTime","outputSamples","undefined","length","desiredOutputLength","round","samplesPerPixel","timePerPixel","pixelOffset","col","firstSampleInBucketIndex","floor","lastSampleInBucketIndex","min","sum","sampleI","mean","WAVEFORM_BOOST","themeId","positiveSamples","negativeSamples","firstColorPixel","useGradient","_c","drawFromX","drawToX","mainColor","highlightColor","ThemeId","DECK1","DECK2","DEFAULT","showPositive","showNegative","showBoth","positiveWaveform","negativeWaveform","numSamples","canvasCtx","clearRect","max","topY","bottomY","startY","halfWaveformHeight","curPixedMainColor","curPixelHighlightColor","beginPath","moveTo","lineTo","gradient","createLinearGradient","addColorStop","strokeStyle","stroke","duration","projectedPositiveSamples","projectWaveform","projectedNegativeSamples","drawWaveform","overlayCues","labelAtTop","forEach","cueTime","index","cueX","fillStyle","fillRect","textBottom","textTop","lastStrokeStyle","strokeRect","strokeText","toString","deckId","audioUtil","deckAudioSettings","dspUtil","resampler","audioOutput","ReplaySubject","song$","subscribe","song","_this","gainNode","context","createGain","connect","getInputForDeck","scriptNode","createScriptProcessor","BUFFER_SIZE","onaudioprocess","processControlAudio","Object","ActiveSong","_playbackRate","lastPlaybackDirectionIsForward","playbackRate","isControlled","asObservable","songOffsetSinceLastRecording","currentTime","songOffsetRecordedTime","songOffset","controlled","controlDevice","getControlIn","isPlaying","pauseBuffer","constraints","audio","deviceId","echoCancellation","exact","navigator","mediaDevices","getUserMedia","stream","controlInputNode","createMediaStreamSource","console","disconnect","updateSongOffset","disableControl","enableControl","event","leftInputBuffer","inputBuffer","rightInputBuffer","leftScriptOutputBuffer","outputBuffer","rightScriptOutputBuffer","subChunkOffset","leftSubInputBuffer","copyBuffer","rightSubInputBuffer","pilotHz","periodSamples","playingForward","controlIsPlayingForward","playDirectionMultiplier","songSize","songPlaybackRate","songSampleRate","leftSongBuffer","rightSongBuffer","leftRenderedBuffer","resample","rightRenderedBuffer","i","buf","autoCorrelate","Error","leftBuf","rightBuf","isPlayingForward","isPlayingForwardMaxMin","phaseSamples","crossCorrelate","relPhaseSeperation","size","leftFullSongBuffer","rightFullSongBuffer","Float32Array","offsetSamples","songIndex","songIndexIsValid","time","playBuffer","decodeAudioData","audioBuffer","next","source","stop","createBufferSource","start","gain","setValueAtTime","currentSongOffset","AudioUtil","AudioContext","onUserMediaLoad","onUserMediaError","inputDevices","outputDevices","output","ondevicechange","updateDeviceLists","enumerateDevices","devices","device","label","kind","dbInitialized","resolveInitialized","rejectInitialized","req","onerror","oldVersion","openRequest","indexedDB","open","Db_1","DB_VERSION","onupgradeneeded","versionEvent","dbMigration1","dbMigration20","dbMigration21","Map","Set","input","deckA","controlDeviceId","liveDeviceId","deckB","PreferencesDb","dbService","initialized","preferences","Preferences","READONLY_TRANSACTION","key","warn","setPreference","crossfaderCurveSharpness","enabledMidiInputNames","inputs","enabledMidiOutputNames","outputs","midiMappings","mappings","audioSettings","settings","reqToPromise","put","AudioSettings","preferencesDb","deckASettings","DeckAudioSettings","deckBSettings","deckSettings","set","DeckId","LEFT","RIGHT","getAudioSettings","inputDevices$","first","setLiveIn","findDeviceById","setControlIn","liveIn$","saveAudioSettings","controlIn$","get","deckAAudioSettings","deckBAudioSettings","setAudioSettings","getLiveIn","deviceList","matchingDevices","filter","BehaviorSubject","liveIn","distinctUntilChanged","controlIn","getValue","DspUtil","seperation","leftDcOffset","rightDcOffset","leftAbsTotalAmp","rightAbsTotalAmp","abs","leftAmpMult","forwardSum","reverseSum","nextLeftExtreme","nextRightExtreme","leftMaxes","leftMins","rightMaxes","rightMins","leftMaxI","rightMaxI","forwardCount","reverseCount","rms","val","sqrt","SIZE","offsetIterations","compareChunkSize","best_offset","best_correlation","foundGoodCorrelation","correlations","Array","getRms","lastCorrelation","offset","correlation","shift","buf1","buf2","MAX_SAMPLES","Resampler","fromRate","fromFrequency","toRate","toFrequency","speed","argc","arguments","n","l","ceil","newBuffer","interpolate","arr","pos","second","frac","AudioOutput","inputGainNodes","masterGain","destination","ActiveSongs","activeSongByDeckId","getDeckAudioSettings","AnimationFrames","ngZone","Subject","framesSubject","runOutsideAngular","requestAnimationFrame","onFrame","NgZone","FormatTimePipe","timeInSeconds","minutes","seconds","Pipe","name","waveformCompressed100X","waveformCompressed100x","ImageUtil","byteArr","SongDb","waveformUtil","imageUtil","getMetadataTransaction","getMetadataCursor","allMetadata","oncomplete","allSongDetails$","updateTransaction","arrayBuffer","tags","fileName","log","performance","now","songDetails","addTransaction","waveformData","songDetailsDraft","title","lengthSeconds","waveformDataUrl","getWaveformData","waveformDataResult","generateDataUrlWaveform","parsedTrack","parseInt","track","parsedYear","year","album","artist","genre","isNaN","picture","byteArrayToBase64","base64Album","format","add","assign","songBuffer","compress100X","deleteTransaction","deleteDetailsReq","delete","deleteBufferReq","currentDetails","filteredDetails","d","bufferEvent","Song","DeckComponent","deckElem","elementRef","nativeElement","waveformElem","querySelector","offsetWidth","translate","loadingSong","activeSong","loadSong","songOffsetAtLastDraw","isLoaded","relativeSongOffset","curSample","timeElapsed","redrawWidth","fromDeckId","relativeSongOffse","offsetX","setSongOffset","updateRequired","cueMode","CueMode","Jump","Delete","songDb","updateSongDetails","num","fill","map","x","DeckInputType","SideNav","SideNavState","Closed","state","MidiUtil","midiInitialized","resolveMidiInitialized","rejectMidiInitialized","requestMIDIAccess","midiAccess","midi","catch","rawMessage","subType","amount","byte1","byte2","byte3","msgType","channel","MidiMsgType","ProgramChange","ChannelAfterTouch","PitchBend","msg","integerAmount","AppComponent","sideNav","midiUtil","initialize","register","setState","__decorate","ViewChildren","QueryList","numFilesUploaded","onUploadingFinished","uploadingFiles","totalFilesToUpload","loadFilePromises","LibraryComponent","deleteSong","getSong","onLoadSong","emit","dst","ArrayBuffer","byteLength","Uint8Array","file","reader","FileReader","readAsArrayBuffer","allSongDetails","searchInput","trim","searchTokens","split","allTokensMatchReducer","previousTokensMatch","token","songDetailsMatchesToken","reduce","toLowerCase","fieldKey","field","hasOwnProperty","cmpStr","formatTimePipe","transform","indexOf","FileDropDirective","element","EventEmitter","transfer","getDataTransfer","haveFiles","types","dropEffect","preventAndStop","dragLevel","emitFileOver","onFileDrop","from","files","fileOver","dataTransfer","originalEvent","preventDefault","stopPropagation","contains","Output","HostListener","Directive","selector","ElementRef","MidiIo","onstatechange","retrieveDevices","enabledOutputNames","getEnabledMidiOutputNames","getEnabledMidiInputNames","devicesByName","enableInput","inputIsEnabled","enabledInputNames","has","deviceName","getDevice","saveInputPreferences","onInputMsg","bind","close","disableInput","saveOutputPreferences","outputIsEnabled","disableOutput","enableOutput","send","serializeMsg","setEnabledMidiInputNames","setEnabledMidiOutputNames","msgEvent","parseRawMsg","DocumentEvents","mouseMoveSubject","mouseUpSubject","dragEndSubject","keyUpSubject","MidiMapper","midiIo","documentEvents","msg$","getMidiMappings","keyUp","learnMode","code","activeLearnMappingComp","elemId","setLearnMode","comp","mappingComps","mapping","setMidiMappings","onLearnMsg","getLearnMode","control","MappingType","ToolbarComponent","midiMapper","getState","Midi","Audio","doc","isFullScreen","cancelFullScreen","mozCancelFullScreen","webkitCancelFullScreen","documentElement","requestFullScreen","mozRequestFullScreen","webkitRequestFullScreen","Element","fullScreenElement","mozFullScreen","webkitIsFullScreen","SpinnerComponent","Component","template","styles","CenterControlsComponent","activeSongs","animationFrames","deck1ActiveSong","getActiveSong","deck2ActiveSong","songObservable","onSongChange","frames","onAnimationFrame","mouseMove","onMouseMove","mouseUp","endScrub","dragEnd","deck1ElementRef","deck2ElementRef","deck1Canvas","deck2Canvas","drawSong","setPixelOffsetAtLastDraw","song1PixelOffsetAtLastDraw","song2PixelOffsetAtLastDraw","waveformCanvas","drawOptions","waveformName","compressedSampleRate","getPixelOffsetAtLastDraw","imageData","getImageData","putImageData","activeScrubDeck","getActiveSongFromDeckId","pixelsPerSecond","deltaX","scrubOrigScreenX","screenX","newSongOffset","scrubOrigSongOffset","resumePlayingAfterScrub","body","classList","remove","leftGain","rightGain","setGain","ViewChild","CrossfaderComponent","getCrossfaderCurveSharpness","sendCrossfaderChange","sliderValue","curveSharpness","equalPowerValue","cos","PI","getGain","change","setCrossfaderCurveSharpness","SideNavComponent","AudioSettingsComponent","MidiSettingsComponent","MidiMappingComponent","NoteOff","NoteOn","PolyAfterTouch","CC","SysEx","_amount","getMapping","sendMessage","getElementById","registerMappingComp","mappingType","Latch","Amount","setMapping","amountChange","shortMidiTypeNames","Input","FixedTableHeaderContainerDirective","elem","scrollTop","allTh","querySelectorAll","style","DeckAudioSettingsComponent","FaderComponent","LoadingOverlayComponent","AppModule","NgModule","imports","BrowserModule","BrowserAnimationsModule","FormsModule","ReactiveFormsModule","LazyForModule","MdButtonModule","MdSliderModule","MdSidenavModule","MdTooltipModule","MdSlideToggleModule","MdRadioModule","MdCheckboxModule","MdToolbarModule","MdOptionModule","MdSelectModule","declarations","bootstrap","providers","platformBrowserDynamic","bootstrapModule"],"mappings":"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"}